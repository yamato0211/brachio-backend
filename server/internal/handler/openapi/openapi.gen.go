// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for Element.
const (
	Darkness  Element = "Darkness"
	Dragon    Element = "Dragon"
	Fighting  Element = "Fighting"
	Fire      Element = "Fire"
	Grass     Element = "Grass"
	Lightning Element = "Lightning"
	Metal     Element = "Metal"
	Normal    Element = "Normal"
	Psychic   Element = "Psychic"
	Water     Element = "Water"
)

// Defines values for GoodsCardCardType.
const (
	GoodsCardCardTypeGoods     GoodsCardCardType = "Goods"
	GoodsCardCardTypeMonster   GoodsCardCardType = "Monster"
	GoodsCardCardTypeSupporter GoodsCardCardType = "Supporter"
)

// Defines values for MonsterCardCardType.
const (
	MonsterCardCardTypeGoods     MonsterCardCardType = "Goods"
	MonsterCardCardTypeMonster   MonsterCardCardType = "Monster"
	MonsterCardCardTypeSupporter MonsterCardCardType = "Supporter"
)

// Defines values for MonsterCardSubType.
const (
	Basic  MonsterCardSubType = "Basic"
	Stage1 MonsterCardSubType = "Stage1"
	Stage2 MonsterCardSubType = "Stage2"
)

// Defines values for SupporterCardCardType.
const (
	Goods     SupporterCardCardType = "Goods"
	Monster   SupporterCardCardType = "Monster"
	Supporter SupporterCardCardType = "Supporter"
)

// Card defines model for Card.
type Card struct {
	union json.RawMessage
}

// Deck defines model for Deck.
type Deck struct {
	// Cards カードリスト
	Cards *[]Card `json:"cards,omitempty"`

	// Elements エネルギーの属性
	Elements *[]Element `json:"elements,omitempty"`

	// Id デッキID
	Id *string `json:"id,omitempty"`

	// Name デッキ名
	Name *string `json:"name,omitempty"`
}

// Element 属性
type Element string

// Gacha defines model for Gacha.
type Gacha struct {
	// Id ガチャID
	Id *string `json:"id,omitempty"`

	// ImageUrl ガチャ画像URL
	ImageUrl *string `json:"imageUrl,omitempty"`

	// Name ガチャ名
	Name *string `json:"name,omitempty"`
}

// GachaDrawRequest defines model for GachaDrawRequest.
type GachaDrawRequest struct {
	// IsTenDraw 10連ガチャかどうか
	IsTenDraw *bool `json:"isTenDraw,omitempty"`
}

// GachaDrawResponse defines model for GachaDrawResponse.
type GachaDrawResponse struct {
	// Packs ガチャで引いたカード
	Packs *[]Pack `json:"packs,omitempty"`
}

// GoodsCard defines model for GoodsCard.
type GoodsCard struct {
	// CardNumber カードナンバー
	CardNumber *int `json:"cardNumber,omitempty"`

	// CardType カードタイプ
	CardType *GoodsCardCardType `json:"cardType,omitempty"`

	// Effect 効果
	Effect *string `json:"effect,omitempty"`

	// Expansion 拡張パック名
	Expansion *string `json:"expansion,omitempty"`

	// Id 全ユーザーで一意に定まるID
	Id *string `json:"id,omitempty"`

	// ImageUrl カード画像URL
	ImageUrl *string `json:"imageUrl,omitempty"`

	// Name カード名
	Name *string `json:"name,omitempty"`

	// Rarity レアリティ
	Rarity *int `json:"rarity,omitempty"`
}

// GoodsCardCardType カードタイプ
type GoodsCardCardType string

// Item defines model for Item.
type Item struct {
	// Count 所持数
	Count *int `json:"count,omitempty"`

	// Id アイテムID（アイテムごとに一意）
	Id *string `json:"id,omitempty"`

	// Name アイテム名
	Name *string `json:"name,omitempty"`
}

// MonsterCard defines model for MonsterCard.
type MonsterCard struct {
	// CardNumber カードナンバー
	CardNumber *int `json:"cardNumber,omitempty"`

	// CardType カードタイプ
	CardType *MonsterCardCardType `json:"cardType,omitempty"`

	// Expansion 拡張パック名
	Expansion *string `json:"expansion,omitempty"`

	// Hp HP
	Hp *int `json:"hp,omitempty"`

	// Id 全ユーザーで一意に定まるID
	Id *string `json:"id,omitempty"`

	// ImageUrl カード画像URL
	ImageUrl *string `json:"imageUrl,omitempty"`

	// Name カード名
	Name *string `json:"name,omitempty"`

	// Rarity レアリティ
	Rarity *int `json:"rarity,omitempty"`

	// RetreatCost にげるコスト
	RetreatCost *int `json:"retreatCost,omitempty"`

	// Skills ワザ
	Skills *[]Skill `json:"skills,omitempty"`

	// SubType 進化段階 (たね, 1進化, 2進化)
	SubType *MonsterCardSubType `json:"subType,omitempty"`

	// Type 属性
	Type *Element `json:"type,omitempty"`

	// Weekness 属性
	Weekness *Element `json:"weekness,omitempty"`
}

// MonsterCardCardType カードタイプ
type MonsterCardCardType string

// MonsterCardSubType 進化段階 (たね, 1進化, 2進化)
type MonsterCardSubType string

// Pack カード5枚セット
type Pack struct {
	// Cards 中身
	Cards *[]Card `json:"cards,omitempty"`
}

// PackPower defines model for PackPower.
type PackPower struct {
	// Charged 現在溜まっているパックの数
	Charged *int `json:"charged,omitempty"`

	// Next 次のパックが貯まるまでの秒数
	Next *int `json:"next,omitempty"`
}

// Skill ワザ
type Skill struct {
	// Cost コスト
	Cost *[]Element `json:"cost,omitempty"`

	// Damage ダメージ
	Damage *int `json:"damage,omitempty"`

	// Name ワザ名
	Name *string `json:"name,omitempty"`

	// Text ワザの説明
	Text *string `json:"text,omitempty"`
}

// SupporterCard defines model for SupporterCard.
type SupporterCard struct {
	// CardNumber カードナンバー
	CardNumber *int `json:"cardNumber,omitempty"`

	// CardType カードタイプ
	CardType *SupporterCardCardType `json:"cardType,omitempty"`

	// Effect 効果
	Effect *string `json:"effect,omitempty"`

	// Expansion 拡張パック名
	Expansion *string `json:"expansion,omitempty"`

	// Id 全ユーザーで一意に定まるID
	Id *string `json:"id,omitempty"`

	// ImageUrl カード画像URL
	ImageUrl *string `json:"imageUrl,omitempty"`

	// Name カード名
	Name *string `json:"name,omitempty"`

	// Rarity レアリティ
	Rarity *int `json:"rarity,omitempty"`
}

// SupporterCardCardType カードタイプ
type SupporterCardCardType string

// PostMyDeckJSONRequestBody defines body for PostMyDeck for application/json ContentType.
type PostMyDeckJSONRequestBody = Deck

// PutMyDeckJSONRequestBody defines body for PutMyDeck for application/json ContentType.
type PutMyDeckJSONRequestBody = Deck

// PostGachaDrawJSONRequestBody defines body for PostGachaDraw for application/json ContentType.
type PostGachaDrawJSONRequestBody = GachaDrawRequest

// AsMonsterCard returns the union data inside the Card as a MonsterCard
func (t Card) AsMonsterCard() (MonsterCard, error) {
	var body MonsterCard
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMonsterCard overwrites any union data inside the Card as the provided MonsterCard
func (t *Card) FromMonsterCard(v MonsterCard) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMonsterCard performs a merge with any union data inside the Card, using the provided MonsterCard
func (t *Card) MergeMonsterCard(v MonsterCard) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSupporterCard returns the union data inside the Card as a SupporterCard
func (t Card) AsSupporterCard() (SupporterCard, error) {
	var body SupporterCard
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSupporterCard overwrites any union data inside the Card as the provided SupporterCard
func (t *Card) FromSupporterCard(v SupporterCard) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSupporterCard performs a merge with any union data inside the Card, using the provided SupporterCard
func (t *Card) MergeSupporterCard(v SupporterCard) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGoodsCard returns the union data inside the Card as a GoodsCard
func (t Card) AsGoodsCard() (GoodsCard, error) {
	var body GoodsCard
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGoodsCard overwrites any union data inside the Card as the provided GoodsCard
func (t *Card) FromGoodsCard(v GoodsCard) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGoodsCard performs a merge with any union data inside the Card, using the provided GoodsCard
func (t *Card) MergeGoodsCard(v GoodsCard) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Card) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Card) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetMyCardList request
	GetMyCardList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMyCard request
	GetMyCard(ctx context.Context, cardNumber string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMyDeckList request
	GetMyDeckList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMyDeckWithBody request with any body
	PostMyDeckWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMyDeck(ctx context.Context, body PostMyDeckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMyDeck request
	GetMyDeck(ctx context.Context, deckId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutMyDeckWithBody request with any body
	PutMyDeckWithBody(ctx context.Context, deckId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutMyDeck(ctx context.Context, deckId string, body PutMyDeckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGachaList request
	GetGachaList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGachaDrawWithBody request with any body
	PostGachaDrawWithBody(ctx context.Context, gachaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGachaDraw(ctx context.Context, gachaId string, body PostGachaDrawJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMyItemList request
	GetMyItemList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPackPower request
	GetPackPower(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetMyCardList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMyCardListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMyCard(ctx context.Context, cardNumber string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMyCardRequest(c.Server, cardNumber)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMyDeckList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMyDeckListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMyDeckWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMyDeckRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMyDeck(ctx context.Context, body PostMyDeckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMyDeckRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMyDeck(ctx context.Context, deckId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMyDeckRequest(c.Server, deckId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutMyDeckWithBody(ctx context.Context, deckId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutMyDeckRequestWithBody(c.Server, deckId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutMyDeck(ctx context.Context, deckId string, body PutMyDeckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutMyDeckRequest(c.Server, deckId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGachaList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGachaListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGachaDrawWithBody(ctx context.Context, gachaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGachaDrawRequestWithBody(c.Server, gachaId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGachaDraw(ctx context.Context, gachaId string, body PostGachaDrawJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGachaDrawRequest(c.Server, gachaId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMyItemList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMyItemListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPackPower(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPackPowerRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetMyCardListRequest generates requests for GetMyCardList
func NewGetMyCardListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cards")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMyCardRequest generates requests for GetMyCard
func NewGetMyCardRequest(server string, cardNumber string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cardNumber", runtime.ParamLocationPath, cardNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cards/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMyDeckListRequest generates requests for GetMyDeckList
func NewGetMyDeckListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/decks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMyDeckRequest calls the generic PostMyDeck builder with application/json body
func NewPostMyDeckRequest(server string, body PostMyDeckJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMyDeckRequestWithBody(server, "application/json", bodyReader)
}

// NewPostMyDeckRequestWithBody generates requests for PostMyDeck with any type of body
func NewPostMyDeckRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/decks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMyDeckRequest generates requests for GetMyDeck
func NewGetMyDeckRequest(server string, deckId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deckId", runtime.ParamLocationPath, deckId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/decks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutMyDeckRequest calls the generic PutMyDeck builder with application/json body
func NewPutMyDeckRequest(server string, deckId string, body PutMyDeckJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutMyDeckRequestWithBody(server, deckId, "application/json", bodyReader)
}

// NewPutMyDeckRequestWithBody generates requests for PutMyDeck with any type of body
func NewPutMyDeckRequestWithBody(server string, deckId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deckId", runtime.ParamLocationPath, deckId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/decks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGachaListRequest generates requests for GetGachaList
func NewGetGachaListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gachas")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGachaDrawRequest calls the generic PostGachaDraw builder with application/json body
func NewPostGachaDrawRequest(server string, gachaId string, body PostGachaDrawJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGachaDrawRequestWithBody(server, gachaId, "application/json", bodyReader)
}

// NewPostGachaDrawRequestWithBody generates requests for PostGachaDraw with any type of body
func NewPostGachaDrawRequestWithBody(server string, gachaId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gachaId", runtime.ParamLocationPath, gachaId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gachas/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMyItemListRequest generates requests for GetMyItemList
func NewGetMyItemListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/items")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPackPowerRequest generates requests for GetPackPower
func NewGetPackPowerRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pack-power")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetMyCardListWithResponse request
	GetMyCardListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMyCardListResponse, error)

	// GetMyCardWithResponse request
	GetMyCardWithResponse(ctx context.Context, cardNumber string, reqEditors ...RequestEditorFn) (*GetMyCardResponse, error)

	// GetMyDeckListWithResponse request
	GetMyDeckListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMyDeckListResponse, error)

	// PostMyDeckWithBodyWithResponse request with any body
	PostMyDeckWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMyDeckResponse, error)

	PostMyDeckWithResponse(ctx context.Context, body PostMyDeckJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMyDeckResponse, error)

	// GetMyDeckWithResponse request
	GetMyDeckWithResponse(ctx context.Context, deckId string, reqEditors ...RequestEditorFn) (*GetMyDeckResponse, error)

	// PutMyDeckWithBodyWithResponse request with any body
	PutMyDeckWithBodyWithResponse(ctx context.Context, deckId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutMyDeckResponse, error)

	PutMyDeckWithResponse(ctx context.Context, deckId string, body PutMyDeckJSONRequestBody, reqEditors ...RequestEditorFn) (*PutMyDeckResponse, error)

	// GetGachaListWithResponse request
	GetGachaListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetGachaListResponse, error)

	// PostGachaDrawWithBodyWithResponse request with any body
	PostGachaDrawWithBodyWithResponse(ctx context.Context, gachaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGachaDrawResponse, error)

	PostGachaDrawWithResponse(ctx context.Context, gachaId string, body PostGachaDrawJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGachaDrawResponse, error)

	// GetMyItemListWithResponse request
	GetMyItemListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMyItemListResponse, error)

	// GetPackPowerWithResponse request
	GetPackPowerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPackPowerResponse, error)
}

type GetMyCardListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Card
}

// Status returns HTTPResponse.Status
func (r GetMyCardListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMyCardListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMyCardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Card
}

// Status returns HTTPResponse.Status
func (r GetMyCardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMyCardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMyDeckListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Deck
}

// Status returns HTTPResponse.Status
func (r GetMyDeckListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMyDeckListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMyDeckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostMyDeckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMyDeckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMyDeckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Deck
}

// Status returns HTTPResponse.Status
func (r GetMyDeckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMyDeckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutMyDeckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutMyDeckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutMyDeckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGachaListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Gacha
}

// Status returns HTTPResponse.Status
func (r GetGachaListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGachaListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGachaDrawResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GachaDrawResponse
}

// Status returns HTTPResponse.Status
func (r PostGachaDrawResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGachaDrawResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMyItemListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Item
}

// Status returns HTTPResponse.Status
func (r GetMyItemListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMyItemListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPackPowerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PackPower
}

// Status returns HTTPResponse.Status
func (r GetPackPowerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPackPowerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetMyCardListWithResponse request returning *GetMyCardListResponse
func (c *ClientWithResponses) GetMyCardListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMyCardListResponse, error) {
	rsp, err := c.GetMyCardList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMyCardListResponse(rsp)
}

// GetMyCardWithResponse request returning *GetMyCardResponse
func (c *ClientWithResponses) GetMyCardWithResponse(ctx context.Context, cardNumber string, reqEditors ...RequestEditorFn) (*GetMyCardResponse, error) {
	rsp, err := c.GetMyCard(ctx, cardNumber, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMyCardResponse(rsp)
}

// GetMyDeckListWithResponse request returning *GetMyDeckListResponse
func (c *ClientWithResponses) GetMyDeckListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMyDeckListResponse, error) {
	rsp, err := c.GetMyDeckList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMyDeckListResponse(rsp)
}

// PostMyDeckWithBodyWithResponse request with arbitrary body returning *PostMyDeckResponse
func (c *ClientWithResponses) PostMyDeckWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMyDeckResponse, error) {
	rsp, err := c.PostMyDeckWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMyDeckResponse(rsp)
}

func (c *ClientWithResponses) PostMyDeckWithResponse(ctx context.Context, body PostMyDeckJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMyDeckResponse, error) {
	rsp, err := c.PostMyDeck(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMyDeckResponse(rsp)
}

// GetMyDeckWithResponse request returning *GetMyDeckResponse
func (c *ClientWithResponses) GetMyDeckWithResponse(ctx context.Context, deckId string, reqEditors ...RequestEditorFn) (*GetMyDeckResponse, error) {
	rsp, err := c.GetMyDeck(ctx, deckId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMyDeckResponse(rsp)
}

// PutMyDeckWithBodyWithResponse request with arbitrary body returning *PutMyDeckResponse
func (c *ClientWithResponses) PutMyDeckWithBodyWithResponse(ctx context.Context, deckId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutMyDeckResponse, error) {
	rsp, err := c.PutMyDeckWithBody(ctx, deckId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutMyDeckResponse(rsp)
}

func (c *ClientWithResponses) PutMyDeckWithResponse(ctx context.Context, deckId string, body PutMyDeckJSONRequestBody, reqEditors ...RequestEditorFn) (*PutMyDeckResponse, error) {
	rsp, err := c.PutMyDeck(ctx, deckId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutMyDeckResponse(rsp)
}

// GetGachaListWithResponse request returning *GetGachaListResponse
func (c *ClientWithResponses) GetGachaListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetGachaListResponse, error) {
	rsp, err := c.GetGachaList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGachaListResponse(rsp)
}

// PostGachaDrawWithBodyWithResponse request with arbitrary body returning *PostGachaDrawResponse
func (c *ClientWithResponses) PostGachaDrawWithBodyWithResponse(ctx context.Context, gachaId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGachaDrawResponse, error) {
	rsp, err := c.PostGachaDrawWithBody(ctx, gachaId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGachaDrawResponse(rsp)
}

func (c *ClientWithResponses) PostGachaDrawWithResponse(ctx context.Context, gachaId string, body PostGachaDrawJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGachaDrawResponse, error) {
	rsp, err := c.PostGachaDraw(ctx, gachaId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGachaDrawResponse(rsp)
}

// GetMyItemListWithResponse request returning *GetMyItemListResponse
func (c *ClientWithResponses) GetMyItemListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMyItemListResponse, error) {
	rsp, err := c.GetMyItemList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMyItemListResponse(rsp)
}

// GetPackPowerWithResponse request returning *GetPackPowerResponse
func (c *ClientWithResponses) GetPackPowerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPackPowerResponse, error) {
	rsp, err := c.GetPackPower(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPackPowerResponse(rsp)
}

// ParseGetMyCardListResponse parses an HTTP response from a GetMyCardListWithResponse call
func ParseGetMyCardListResponse(rsp *http.Response) (*GetMyCardListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMyCardListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Card
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMyCardResponse parses an HTTP response from a GetMyCardWithResponse call
func ParseGetMyCardResponse(rsp *http.Response) (*GetMyCardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMyCardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Card
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMyDeckListResponse parses an HTTP response from a GetMyDeckListWithResponse call
func ParseGetMyDeckListResponse(rsp *http.Response) (*GetMyDeckListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMyDeckListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Deck
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMyDeckResponse parses an HTTP response from a PostMyDeckWithResponse call
func ParsePostMyDeckResponse(rsp *http.Response) (*PostMyDeckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMyDeckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMyDeckResponse parses an HTTP response from a GetMyDeckWithResponse call
func ParseGetMyDeckResponse(rsp *http.Response) (*GetMyDeckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMyDeckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Deck
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutMyDeckResponse parses an HTTP response from a PutMyDeckWithResponse call
func ParsePutMyDeckResponse(rsp *http.Response) (*PutMyDeckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutMyDeckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetGachaListResponse parses an HTTP response from a GetGachaListWithResponse call
func ParseGetGachaListResponse(rsp *http.Response) (*GetGachaListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGachaListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Gacha
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostGachaDrawResponse parses an HTTP response from a PostGachaDrawWithResponse call
func ParsePostGachaDrawResponse(rsp *http.Response) (*PostGachaDrawResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGachaDrawResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GachaDrawResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMyItemListResponse parses an HTTP response from a GetMyItemListWithResponse call
func ParseGetMyItemListResponse(rsp *http.Response) (*GetMyItemListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMyItemListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Item
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPackPowerResponse parses an HTTP response from a GetPackPowerWithResponse call
func ParseGetPackPowerResponse(rsp *http.Response) (*GetPackPowerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPackPowerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PackPower
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 所持カード一覧取得
	// (GET /cards)
	GetMyCardList(ctx echo.Context) error
	// カード取得
	// (GET /cards/{cardNumber})
	GetMyCard(ctx echo.Context, cardNumber string) error
	// デッキ一覧取得
	// (GET /decks)
	GetMyDeckList(ctx echo.Context) error
	// デッキ作成
	// (POST /decks)
	PostMyDeck(ctx echo.Context) error
	// デッキ取得
	// (GET /decks/{deckId})
	GetMyDeck(ctx echo.Context, deckId string) error
	// デッキ編集
	// (PUT /decks/{deckId})
	PutMyDeck(ctx echo.Context, deckId string) error
	// ガチャ一覧取得
	// (GET /gachas)
	GetGachaList(ctx echo.Context) error
	// ガチャを引く
	// (POST /gachas/{gachaId})
	PostGachaDraw(ctx echo.Context, gachaId string) error
	// 所持アイテム一覧取得
	// (GET /items)
	GetMyItemList(ctx echo.Context) error
	// パックパワーの溜まり状況取得
	// (GET /pack-power)
	GetPackPower(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetMyCardList converts echo context to params.
func (w *ServerInterfaceWrapper) GetMyCardList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMyCardList(ctx)
	return err
}

// GetMyCard converts echo context to params.
func (w *ServerInterfaceWrapper) GetMyCard(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "cardNumber" -------------
	var cardNumber string

	err = runtime.BindStyledParameterWithOptions("simple", "cardNumber", ctx.Param("cardNumber"), &cardNumber, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cardNumber: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMyCard(ctx, cardNumber)
	return err
}

// GetMyDeckList converts echo context to params.
func (w *ServerInterfaceWrapper) GetMyDeckList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMyDeckList(ctx)
	return err
}

// PostMyDeck converts echo context to params.
func (w *ServerInterfaceWrapper) PostMyDeck(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostMyDeck(ctx)
	return err
}

// GetMyDeck converts echo context to params.
func (w *ServerInterfaceWrapper) GetMyDeck(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "deckId" -------------
	var deckId string

	err = runtime.BindStyledParameterWithOptions("simple", "deckId", ctx.Param("deckId"), &deckId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deckId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMyDeck(ctx, deckId)
	return err
}

// PutMyDeck converts echo context to params.
func (w *ServerInterfaceWrapper) PutMyDeck(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "deckId" -------------
	var deckId string

	err = runtime.BindStyledParameterWithOptions("simple", "deckId", ctx.Param("deckId"), &deckId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deckId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutMyDeck(ctx, deckId)
	return err
}

// GetGachaList converts echo context to params.
func (w *ServerInterfaceWrapper) GetGachaList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGachaList(ctx)
	return err
}

// PostGachaDraw converts echo context to params.
func (w *ServerInterfaceWrapper) PostGachaDraw(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gachaId" -------------
	var gachaId string

	err = runtime.BindStyledParameterWithOptions("simple", "gachaId", ctx.Param("gachaId"), &gachaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gachaId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostGachaDraw(ctx, gachaId)
	return err
}

// GetMyItemList converts echo context to params.
func (w *ServerInterfaceWrapper) GetMyItemList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMyItemList(ctx)
	return err
}

// GetPackPower converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackPower(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPackPower(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/cards", wrapper.GetMyCardList)
	router.GET(baseURL+"/cards/:cardNumber", wrapper.GetMyCard)
	router.GET(baseURL+"/decks", wrapper.GetMyDeckList)
	router.POST(baseURL+"/decks", wrapper.PostMyDeck)
	router.GET(baseURL+"/decks/:deckId", wrapper.GetMyDeck)
	router.PUT(baseURL+"/decks/:deckId", wrapper.PutMyDeck)
	router.GET(baseURL+"/gachas", wrapper.GetGachaList)
	router.POST(baseURL+"/gachas/:gachaId", wrapper.PostGachaDraw)
	router.GET(baseURL+"/items", wrapper.GetMyItemList)
	router.GET(baseURL+"/pack-power", wrapper.GetPackPower)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZX1MTyRb/KlTf+3Bv1VwStO5L3lRWll3/UILlg5WHZtIkY5KZsaejpqhUZWZcFkGF",
	"pfyz61K6yhawgmFXS0Vl3Q/TJMCTX2GruyeTkOkZJoJ/tsoHKmEyfU6fc36/X5/uHgeqUTQNHenEAqlx",
	"YKk5VIT86zGIM+zT0NHpMZA6Pw7+jdEYSIF/JVpjEt6AxElDtwjCfFBFiX53uGSaBo779oBhZCzxZrqi",
	"gH6k5tm0TGyYCBMN8cmqEGf4lwyyVKyZRDN0kALUWaHuBnWvUfcxdV5RdxIoQCOoyN+N8upNDZCyiUAK",
	"QIxhmf2PCqjYTFanr2Xq3qDuCnVqzKldq/9xv1FdiuvxK2FZ5lTLSNy531PXpc6TwX6gAIxg5rReKIMU",
	"wSXkW7AI1vQsM6HDIoowUp+9AQKjWjMxRi8glU+tOcuAKT9YpJeKIHUeDGBoWUABxzWMgALOQYIwUMAJ",
	"LZsjOrOvgCGrrOY0lb+UzRHxsB/ivI740JOIwAJ7hGHW0IECThm4CAsgLQlwAKo5GASGNHXOKnVt6i7E",
	"S51WhFl0FhciDG3delN3Z86eOQEUMMbmSEAKlLAG4leiaSp2JXjA/RhePoMulpBFJLFbI0hnbwTd9SV3",
	"qgu+T2pPU/s3ak9Qe7rlfNQwCgjqe3q3TEO3UNC9CdW8FREptZfqG7epfZXaD3yixmXLEFTzQapIZ+rr",
	"h1Q1TpWKowhHSscUdZ9Rd5a6G63kaDpBWYSZA2ZlhD8Nt+H8RZ1fqXu3jR+eYgIF+HoIvNlKAY7GxlhE",
	"QeJNvWrcn5chDV0xoW7xtzoHNaYf1jeeU/cHTv81KejkulP/bpm6iyws5wWXuaXN9Wrj6gy1V+q1e9R+",
	"S53p/fPKy9tB8MozFRIihlgjZZkyrlLnEVs23AnqLEgKL8PaIEFFCcyMkkwxG9eqjet24/bvUlTJhesR",
	"h9EEdX8Z7H+3Mdn+gNq3qL1M7RVRj3cb17rJUstObAFqX/L/4dTaL1FyZnDk10Ox6/qFU356MCIYQXLM",
	"sCSMofYKteeoM02dZ347F7Rh5bVCQbbyuGvUeRF3hRlmVmTdmFUalWNyp/q0fv1Oo/Z8597Nnv+wVc1+",
	"ovT0icdKzyHx5b9tQD0KLd7+DBOYRX3NL4ekICWez5g95GWERBsVd4iM4nyVDa///xv371HnDaMGL0Ws",
	"nnxz/cn265X99eFhcx0yLgvB6ZhJDuIskhBva+ZtfX658XqeccxeoPYia0ecaZ/v1K6FCbSOrshEffUh",
	"tWtt469vP10TDOY+lqhd21qakxuVhSVgGI7lzqVGyps2uux3L5KBTGJkE6pS9yHXsHV5vkJ2ICyOECEh",
	"0hSLIdSubT9ebfx4M95itXvP+aUT/NIJfshOkK0SSC0xg8OMUgJkowhihI+USK713/FmLN+cGwGKOH/h",
	"my/+a8tZjhATVJhhTR8z2HiikQL7ZSSHeoaMPGJ/PUeGBoECLiEsig2SvcnePhadYSIdmhpIgcO9yd7D",
	"TDggyfFpJXyhzqLQNtXP3uZ6dXtxiTpz9Zk79bd3qX2X69pPtOoA7gZDNnAwA1JgAJGTZUa4E5pFOBDE",
	"XpE7O5RMCsXSiXegAE2zoKl8eOKCJcAqFInvZvexXDDdkoNBhLOrYvysq71W59OVNFv2i0WIy2EZEelg",
	"BYNZi7GaZRWkmWGR4MR4S2QqodluE4quMswLimEREYQtHkEYkW4/rs+8ZAsBe8xAAJqMaVdBVqyLJQ2z",
	"VVOwtlWJTrlN77Oyexc0ooDdla4lAhHlyiDv4EJeoeaZWddM6Edq/qMxgZ+TxmHC7nC6TOfuwYGkskyC",
	"dEUBprwvaQ6nztzmn/ONydnIJA4ZlpdFD57IIkeNTPnAwCZyVql0gr8SKFhfFC54JI3J2frUg/dNJzcR",
	"TKSPzsQ4+xjMVPaGaZcA3VNIdp07S0RETOyzEZBWTUPieM8SRWC9tEc5tl4u7/w8EQ310qcux6dkV/LD",
	"skvkX86uLFRzMEL8m4fXXYo/Py7/aNov7kJiiP/pb7tdPneFH+AAz96uTCbG+aenVCHLgH8j4Mw1bwQW",
	"u2yE2Nrg30ns3Qy1XwBJSOPN+XNgTeCaJz6DDtq/d9FzkDhqVnwmBEQ+3CO3Jq3D6657skGCih+Nl/x6",
	"INbupDOi99ugdFoJ8JXN2su0CdX8/8zm+VlIS9E81WJf1sQlt3d45kxtTb1oPLNjp751XPcBwdtychCg",
	"jRF+uCJyT/iSXJAKhgoLPeJ3oIASLnhb/lQiwX/LGRZJHU4mk6CSrvwdAAD//33GgQS1IQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
