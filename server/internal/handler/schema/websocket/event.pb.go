// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: websocket/event.proto

package websocket

import (
	event "github.com/yamato0211/brachio-backend/internal/handler/schema/websocket/event"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SenderId      string                 `protobuf:"bytes,2,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	BattleId      string                 `protobuf:"bytes,3,opt,name=battle_id,json=battleId,proto3" json:"battle_id,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventMetadata) Reset() {
	*x = EventMetadata{}
	mi := &file_websocket_event_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventMetadata) ProtoMessage() {}

func (x *EventMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventMetadata.ProtoReflect.Descriptor instead.
func (*EventMetadata) Descriptor() ([]byte, []int) {
	return file_websocket_event_proto_rawDescGZIP(), []int{0}
}

func (x *EventMetadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventMetadata) GetSenderId() string {
	if x != nil {
		return x.SenderId
	}
	return ""
}

func (x *EventMetadata) GetBattleId() string {
	if x != nil {
		return x.BattleId
	}
	return ""
}

func (x *EventMetadata) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type EventEnvelope struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Metadata *EventMetadata         `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Types that are valid to be assigned to Event:
	//
	//	*EventEnvelope_AttackMonsterEventToServer
	//	*EventEnvelope_AttackMonsterEventToActor
	//	*EventEnvelope_AttackMonsterEventToRecipient
	//	*EventEnvelope_SummonMonsterEventToServer
	//	*EventEnvelope_SummonMonsterEventToActor
	//	*EventEnvelope_SummonMonsterEventToRecipient
	//	*EventEnvelope_EvolutionMonsterEventToServer
	//	*EventEnvelope_EvolutionMonsterEventToActor
	//	*EventEnvelope_EvolutionMonsterEventToRecipient
	//	*EventEnvelope_TakeSupportEventToServer
	//	*EventEnvelope_TakeSupportEventToActor
	//	*EventEnvelope_TakeSupportEventToRecipient
	//	*EventEnvelope_TakeGoodsEventToServer
	//	*EventEnvelope_TakeGoodsEventToActor
	//	*EventEnvelope_TakeGoodsEventToRecipient
	//	*EventEnvelope_RetreatEventToServer
	//	*EventEnvelope_RetreatEventToActor
	//	*EventEnvelope_RetreatEventToRecipient
	//	*EventEnvelope_SupplyEnergyEventToServer
	//	*EventEnvelope_SupplyEnergyEventToActor
	//	*EventEnvelope_SupplyEnergyEventToRecipient
	//	*EventEnvelope_SurrenderEventToServer
	//	*EventEnvelope_SurrenderEventToActor
	//	*EventEnvelope_SurrenderEventToRecipient
	//	*EventEnvelope_AbilityEventToServer
	//	*EventEnvelope_AbilityEventToActor
	//	*EventEnvelope_AbilityEventToRecipient
	//	*EventEnvelope_DrawEventToServer
	//	*EventEnvelope_DrawEventToActor
	//	*EventEnvelope_DrawEventToRecipient
	//	*EventEnvelope_ConfirmActionEventToActor
	//	*EventEnvelope_InitialPlacementCompleteEventToServer
	//	*EventEnvelope_StartGameEventToClients
	//	*EventEnvelope_TurnStartEventToClients
	//	*EventEnvelope_TurnEndEventToClients
	//	*EventEnvelope_CoinTossEventToServer
	//	*EventEnvelope_CoinTossEventToActor
	//	*EventEnvelope_CoinTossResultEventToRecipient
	//	*EventEnvelope_ConfirmEnergyEventToServer
	//	*EventEnvelope_ConfirmEnergyEventToActor
	//	*EventEnvelope_ConfirmTargetEventToServer
	//	*EventEnvelope_ConfirmTargetEventToActor
	//	*EventEnvelope_NextEnergyEventToActor
	//	*EventEnvelope_ExchangeDeckEventToServer
	//	*EventEnvelope_ExchangeDeckEventToActor
	//	*EventEnvelope_ExchangeDeckEventToRecipient
	//	*EventEnvelope_CreateRoomEventToServer
	//	*EventEnvelope_EnterRoomEventToServer
	//	*EventEnvelope_MatchingCompleteEventToActor
	//	*EventEnvelope_MatchingCompleteEventToRecipient
	//	*EventEnvelope_DecideOrderEventToActor
	//	*EventEnvelope_DecideOrderEventToRecipient
	Event         isEventEnvelope_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventEnvelope) Reset() {
	*x = EventEnvelope{}
	mi := &file_websocket_event_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventEnvelope) ProtoMessage() {}

func (x *EventEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventEnvelope.ProtoReflect.Descriptor instead.
func (*EventEnvelope) Descriptor() ([]byte, []int) {
	return file_websocket_event_proto_rawDescGZIP(), []int{1}
}

func (x *EventEnvelope) GetMetadata() *EventMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *EventEnvelope) GetEvent() isEventEnvelope_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *EventEnvelope) GetAttackMonsterEventToServer() *event.AttackMonsterEventToServer {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_AttackMonsterEventToServer); ok {
			return x.AttackMonsterEventToServer
		}
	}
	return nil
}

func (x *EventEnvelope) GetAttackMonsterEventToActor() *event.AttackMonsterEventToActor {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_AttackMonsterEventToActor); ok {
			return x.AttackMonsterEventToActor
		}
	}
	return nil
}

func (x *EventEnvelope) GetAttackMonsterEventToRecipient() *event.AttackMonsterEventToRecipient {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_AttackMonsterEventToRecipient); ok {
			return x.AttackMonsterEventToRecipient
		}
	}
	return nil
}

func (x *EventEnvelope) GetSummonMonsterEventToServer() *event.SummonMonsterEventToServer {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_SummonMonsterEventToServer); ok {
			return x.SummonMonsterEventToServer
		}
	}
	return nil
}

func (x *EventEnvelope) GetSummonMonsterEventToActor() *event.SummonMonsterEventToActor {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_SummonMonsterEventToActor); ok {
			return x.SummonMonsterEventToActor
		}
	}
	return nil
}

func (x *EventEnvelope) GetSummonMonsterEventToRecipient() *event.SummonMonsterEventToRecipient {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_SummonMonsterEventToRecipient); ok {
			return x.SummonMonsterEventToRecipient
		}
	}
	return nil
}

func (x *EventEnvelope) GetEvolutionMonsterEventToServer() *event.EvolutionMonsterEventToServer {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_EvolutionMonsterEventToServer); ok {
			return x.EvolutionMonsterEventToServer
		}
	}
	return nil
}

func (x *EventEnvelope) GetEvolutionMonsterEventToActor() *event.EvolutionMonsterEventToActor {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_EvolutionMonsterEventToActor); ok {
			return x.EvolutionMonsterEventToActor
		}
	}
	return nil
}

func (x *EventEnvelope) GetEvolutionMonsterEventToRecipient() *event.EvolutionMonsterEventToRecipient {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_EvolutionMonsterEventToRecipient); ok {
			return x.EvolutionMonsterEventToRecipient
		}
	}
	return nil
}

func (x *EventEnvelope) GetTakeSupportEventToServer() *event.TakeSupportEventToServer {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_TakeSupportEventToServer); ok {
			return x.TakeSupportEventToServer
		}
	}
	return nil
}

func (x *EventEnvelope) GetTakeSupportEventToActor() *event.TakeSupportEventToActor {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_TakeSupportEventToActor); ok {
			return x.TakeSupportEventToActor
		}
	}
	return nil
}

func (x *EventEnvelope) GetTakeSupportEventToRecipient() *event.TakeSupportEventToRecipient {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_TakeSupportEventToRecipient); ok {
			return x.TakeSupportEventToRecipient
		}
	}
	return nil
}

func (x *EventEnvelope) GetTakeGoodsEventToServer() *event.TakeGoodsEventToServer {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_TakeGoodsEventToServer); ok {
			return x.TakeGoodsEventToServer
		}
	}
	return nil
}

func (x *EventEnvelope) GetTakeGoodsEventToActor() *event.TakeGoodsEventToActor {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_TakeGoodsEventToActor); ok {
			return x.TakeGoodsEventToActor
		}
	}
	return nil
}

func (x *EventEnvelope) GetTakeGoodsEventToRecipient() *event.TakeGoodsEventToRecipient {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_TakeGoodsEventToRecipient); ok {
			return x.TakeGoodsEventToRecipient
		}
	}
	return nil
}

func (x *EventEnvelope) GetRetreatEventToServer() *event.RetreatEventToServer {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_RetreatEventToServer); ok {
			return x.RetreatEventToServer
		}
	}
	return nil
}

func (x *EventEnvelope) GetRetreatEventToActor() *event.RetreatEventToActor {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_RetreatEventToActor); ok {
			return x.RetreatEventToActor
		}
	}
	return nil
}

func (x *EventEnvelope) GetRetreatEventToRecipient() *event.RetreatEventToRecipient {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_RetreatEventToRecipient); ok {
			return x.RetreatEventToRecipient
		}
	}
	return nil
}

func (x *EventEnvelope) GetSupplyEnergyEventToServer() *event.SupplyEnergyEventToServer {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_SupplyEnergyEventToServer); ok {
			return x.SupplyEnergyEventToServer
		}
	}
	return nil
}

func (x *EventEnvelope) GetSupplyEnergyEventToActor() *event.SupplyEnergyEventToActor {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_SupplyEnergyEventToActor); ok {
			return x.SupplyEnergyEventToActor
		}
	}
	return nil
}

func (x *EventEnvelope) GetSupplyEnergyEventToRecipient() *event.SupplyEnergyEventToRecipient {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_SupplyEnergyEventToRecipient); ok {
			return x.SupplyEnergyEventToRecipient
		}
	}
	return nil
}

func (x *EventEnvelope) GetSurrenderEventToServer() *event.SurrenderEventToServer {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_SurrenderEventToServer); ok {
			return x.SurrenderEventToServer
		}
	}
	return nil
}

func (x *EventEnvelope) GetSurrenderEventToActor() *event.SurrenderEventToActor {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_SurrenderEventToActor); ok {
			return x.SurrenderEventToActor
		}
	}
	return nil
}

func (x *EventEnvelope) GetSurrenderEventToRecipient() *event.SurrenderEventToRecipient {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_SurrenderEventToRecipient); ok {
			return x.SurrenderEventToRecipient
		}
	}
	return nil
}

func (x *EventEnvelope) GetAbilityEventToServer() *event.AbilityEventToServer {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_AbilityEventToServer); ok {
			return x.AbilityEventToServer
		}
	}
	return nil
}

func (x *EventEnvelope) GetAbilityEventToActor() *event.AbilityEventToActor {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_AbilityEventToActor); ok {
			return x.AbilityEventToActor
		}
	}
	return nil
}

func (x *EventEnvelope) GetAbilityEventToRecipient() *event.AbilityEventToRecipient {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_AbilityEventToRecipient); ok {
			return x.AbilityEventToRecipient
		}
	}
	return nil
}

func (x *EventEnvelope) GetDrawEventToServer() *event.DrawEventToServer {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_DrawEventToServer); ok {
			return x.DrawEventToServer
		}
	}
	return nil
}

func (x *EventEnvelope) GetDrawEventToActor() *event.DrawEventToActor {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_DrawEventToActor); ok {
			return x.DrawEventToActor
		}
	}
	return nil
}

func (x *EventEnvelope) GetDrawEventToRecipient() *event.DrawEventToRecipient {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_DrawEventToRecipient); ok {
			return x.DrawEventToRecipient
		}
	}
	return nil
}

func (x *EventEnvelope) GetConfirmActionEventToActor() *event.ConfirmActionEventToActor {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_ConfirmActionEventToActor); ok {
			return x.ConfirmActionEventToActor
		}
	}
	return nil
}

func (x *EventEnvelope) GetInitialPlacementCompleteEventToServer() *event.InitialPlacementCompleteEventToServer {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_InitialPlacementCompleteEventToServer); ok {
			return x.InitialPlacementCompleteEventToServer
		}
	}
	return nil
}

func (x *EventEnvelope) GetStartGameEventToClients() *event.StartGameEventToClients {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_StartGameEventToClients); ok {
			return x.StartGameEventToClients
		}
	}
	return nil
}

func (x *EventEnvelope) GetTurnStartEventToClients() *event.TurnStartEventToClients {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_TurnStartEventToClients); ok {
			return x.TurnStartEventToClients
		}
	}
	return nil
}

func (x *EventEnvelope) GetTurnEndEventToClients() *event.TurnEndEventToClients {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_TurnEndEventToClients); ok {
			return x.TurnEndEventToClients
		}
	}
	return nil
}

func (x *EventEnvelope) GetCoinTossEventToServer() *event.CoinTossEventToServer {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_CoinTossEventToServer); ok {
			return x.CoinTossEventToServer
		}
	}
	return nil
}

func (x *EventEnvelope) GetCoinTossEventToActor() *event.CoinTossEventToActor {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_CoinTossEventToActor); ok {
			return x.CoinTossEventToActor
		}
	}
	return nil
}

func (x *EventEnvelope) GetCoinTossResultEventToRecipient() *event.CoinTossResultEventToRecipient {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_CoinTossResultEventToRecipient); ok {
			return x.CoinTossResultEventToRecipient
		}
	}
	return nil
}

func (x *EventEnvelope) GetConfirmEnergyEventToServer() *event.ConfirmEnergyEventToServer {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_ConfirmEnergyEventToServer); ok {
			return x.ConfirmEnergyEventToServer
		}
	}
	return nil
}

func (x *EventEnvelope) GetConfirmEnergyEventToActor() *event.ConfirmEnergyEventToActor {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_ConfirmEnergyEventToActor); ok {
			return x.ConfirmEnergyEventToActor
		}
	}
	return nil
}

func (x *EventEnvelope) GetConfirmTargetEventToServer() *event.ConfirmTargetEventToServer {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_ConfirmTargetEventToServer); ok {
			return x.ConfirmTargetEventToServer
		}
	}
	return nil
}

func (x *EventEnvelope) GetConfirmTargetEventToActor() *event.ConfirmTargetEventToActor {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_ConfirmTargetEventToActor); ok {
			return x.ConfirmTargetEventToActor
		}
	}
	return nil
}

func (x *EventEnvelope) GetNextEnergyEventToActor() *event.NextEnergyEventToActor {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_NextEnergyEventToActor); ok {
			return x.NextEnergyEventToActor
		}
	}
	return nil
}

func (x *EventEnvelope) GetExchangeDeckEventToServer() *event.ExchangeDeckEventToServer {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_ExchangeDeckEventToServer); ok {
			return x.ExchangeDeckEventToServer
		}
	}
	return nil
}

func (x *EventEnvelope) GetExchangeDeckEventToActor() *event.ExchangeDeckEventToActor {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_ExchangeDeckEventToActor); ok {
			return x.ExchangeDeckEventToActor
		}
	}
	return nil
}

func (x *EventEnvelope) GetExchangeDeckEventToRecipient() *event.ExchangeDeckEventToRecipient {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_ExchangeDeckEventToRecipient); ok {
			return x.ExchangeDeckEventToRecipient
		}
	}
	return nil
}

func (x *EventEnvelope) GetCreateRoomEventToServer() *event.CreateRoomEventToServer {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_CreateRoomEventToServer); ok {
			return x.CreateRoomEventToServer
		}
	}
	return nil
}

func (x *EventEnvelope) GetEnterRoomEventToServer() *event.EnterRoomEventToServer {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_EnterRoomEventToServer); ok {
			return x.EnterRoomEventToServer
		}
	}
	return nil
}

func (x *EventEnvelope) GetMatchingCompleteEventToActor() *event.MatchingCompleteEventToActor {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_MatchingCompleteEventToActor); ok {
			return x.MatchingCompleteEventToActor
		}
	}
	return nil
}

func (x *EventEnvelope) GetMatchingCompleteEventToRecipient() *event.MatchingCompleteEventToRecipient {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_MatchingCompleteEventToRecipient); ok {
			return x.MatchingCompleteEventToRecipient
		}
	}
	return nil
}

func (x *EventEnvelope) GetDecideOrderEventToActor() *event.DecideOrderEventToActor {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_DecideOrderEventToActor); ok {
			return x.DecideOrderEventToActor
		}
	}
	return nil
}

func (x *EventEnvelope) GetDecideOrderEventToRecipient() *event.DecideOrderEventToRecipient {
	if x != nil {
		if x, ok := x.Event.(*EventEnvelope_DecideOrderEventToRecipient); ok {
			return x.DecideOrderEventToRecipient
		}
	}
	return nil
}

type isEventEnvelope_Event interface {
	isEventEnvelope_Event()
}

type EventEnvelope_AttackMonsterEventToServer struct {
	AttackMonsterEventToServer *event.AttackMonsterEventToServer `protobuf:"bytes,2,opt,name=attack_monster_event_to_server,json=attackMonsterEventToServer,proto3,oneof"`
}

type EventEnvelope_AttackMonsterEventToActor struct {
	AttackMonsterEventToActor *event.AttackMonsterEventToActor `protobuf:"bytes,3,opt,name=attack_monster_event_to_actor,json=attackMonsterEventToActor,proto3,oneof"`
}

type EventEnvelope_AttackMonsterEventToRecipient struct {
	AttackMonsterEventToRecipient *event.AttackMonsterEventToRecipient `protobuf:"bytes,4,opt,name=attack_monster_event_to_recipient,json=attackMonsterEventToRecipient,proto3,oneof"`
}

type EventEnvelope_SummonMonsterEventToServer struct {
	SummonMonsterEventToServer *event.SummonMonsterEventToServer `protobuf:"bytes,5,opt,name=summon_monster_event_to_server,json=summonMonsterEventToServer,proto3,oneof"`
}

type EventEnvelope_SummonMonsterEventToActor struct {
	SummonMonsterEventToActor *event.SummonMonsterEventToActor `protobuf:"bytes,6,opt,name=summon_monster_event_to_actor,json=summonMonsterEventToActor,proto3,oneof"`
}

type EventEnvelope_SummonMonsterEventToRecipient struct {
	SummonMonsterEventToRecipient *event.SummonMonsterEventToRecipient `protobuf:"bytes,7,opt,name=summon_monster_event_to_recipient,json=summonMonsterEventToRecipient,proto3,oneof"`
}

type EventEnvelope_EvolutionMonsterEventToServer struct {
	EvolutionMonsterEventToServer *event.EvolutionMonsterEventToServer `protobuf:"bytes,8,opt,name=evolution_monster_event_to_server,json=evolutionMonsterEventToServer,proto3,oneof"`
}

type EventEnvelope_EvolutionMonsterEventToActor struct {
	EvolutionMonsterEventToActor *event.EvolutionMonsterEventToActor `protobuf:"bytes,9,opt,name=evolution_monster_event_to_actor,json=evolutionMonsterEventToActor,proto3,oneof"`
}

type EventEnvelope_EvolutionMonsterEventToRecipient struct {
	EvolutionMonsterEventToRecipient *event.EvolutionMonsterEventToRecipient `protobuf:"bytes,10,opt,name=evolution_monster_event_to_recipient,json=evolutionMonsterEventToRecipient,proto3,oneof"`
}

type EventEnvelope_TakeSupportEventToServer struct {
	TakeSupportEventToServer *event.TakeSupportEventToServer `protobuf:"bytes,11,opt,name=take_support_event_to_server,json=takeSupportEventToServer,proto3,oneof"`
}

type EventEnvelope_TakeSupportEventToActor struct {
	TakeSupportEventToActor *event.TakeSupportEventToActor `protobuf:"bytes,12,opt,name=take_support_event_to_actor,json=takeSupportEventToActor,proto3,oneof"`
}

type EventEnvelope_TakeSupportEventToRecipient struct {
	TakeSupportEventToRecipient *event.TakeSupportEventToRecipient `protobuf:"bytes,13,opt,name=take_support_event_to_recipient,json=takeSupportEventToRecipient,proto3,oneof"`
}

type EventEnvelope_TakeGoodsEventToServer struct {
	TakeGoodsEventToServer *event.TakeGoodsEventToServer `protobuf:"bytes,14,opt,name=take_goods_event_to_server,json=takeGoodsEventToServer,proto3,oneof"`
}

type EventEnvelope_TakeGoodsEventToActor struct {
	TakeGoodsEventToActor *event.TakeGoodsEventToActor `protobuf:"bytes,15,opt,name=take_goods_event_to_actor,json=takeGoodsEventToActor,proto3,oneof"`
}

type EventEnvelope_TakeGoodsEventToRecipient struct {
	TakeGoodsEventToRecipient *event.TakeGoodsEventToRecipient `protobuf:"bytes,16,opt,name=take_goods_event_to_recipient,json=takeGoodsEventToRecipient,proto3,oneof"`
}

type EventEnvelope_RetreatEventToServer struct {
	RetreatEventToServer *event.RetreatEventToServer `protobuf:"bytes,17,opt,name=retreat_event_to_server,json=retreatEventToServer,proto3,oneof"`
}

type EventEnvelope_RetreatEventToActor struct {
	RetreatEventToActor *event.RetreatEventToActor `protobuf:"bytes,18,opt,name=retreat_event_to_actor,json=retreatEventToActor,proto3,oneof"`
}

type EventEnvelope_RetreatEventToRecipient struct {
	RetreatEventToRecipient *event.RetreatEventToRecipient `protobuf:"bytes,19,opt,name=retreat_event_to_recipient,json=retreatEventToRecipient,proto3,oneof"`
}

type EventEnvelope_SupplyEnergyEventToServer struct {
	SupplyEnergyEventToServer *event.SupplyEnergyEventToServer `protobuf:"bytes,20,opt,name=supply_energy_event_to_server,json=supplyEnergyEventToServer,proto3,oneof"`
}

type EventEnvelope_SupplyEnergyEventToActor struct {
	SupplyEnergyEventToActor *event.SupplyEnergyEventToActor `protobuf:"bytes,21,opt,name=supply_energy_event_to_actor,json=supplyEnergyEventToActor,proto3,oneof"`
}

type EventEnvelope_SupplyEnergyEventToRecipient struct {
	SupplyEnergyEventToRecipient *event.SupplyEnergyEventToRecipient `protobuf:"bytes,22,opt,name=supply_energy_event_to_recipient,json=supplyEnergyEventToRecipient,proto3,oneof"`
}

type EventEnvelope_SurrenderEventToServer struct {
	SurrenderEventToServer *event.SurrenderEventToServer `protobuf:"bytes,23,opt,name=surrender_event_to_server,json=surrenderEventToServer,proto3,oneof"`
}

type EventEnvelope_SurrenderEventToActor struct {
	SurrenderEventToActor *event.SurrenderEventToActor `protobuf:"bytes,24,opt,name=surrender_event_to_actor,json=surrenderEventToActor,proto3,oneof"`
}

type EventEnvelope_SurrenderEventToRecipient struct {
	SurrenderEventToRecipient *event.SurrenderEventToRecipient `protobuf:"bytes,25,opt,name=surrender_event_to_recipient,json=surrenderEventToRecipient,proto3,oneof"`
}

type EventEnvelope_AbilityEventToServer struct {
	AbilityEventToServer *event.AbilityEventToServer `protobuf:"bytes,26,opt,name=ability_event_to_server,json=abilityEventToServer,proto3,oneof"`
}

type EventEnvelope_AbilityEventToActor struct {
	AbilityEventToActor *event.AbilityEventToActor `protobuf:"bytes,27,opt,name=ability_event_to_actor,json=abilityEventToActor,proto3,oneof"`
}

type EventEnvelope_AbilityEventToRecipient struct {
	AbilityEventToRecipient *event.AbilityEventToRecipient `protobuf:"bytes,28,opt,name=ability_event_to_recipient,json=abilityEventToRecipient,proto3,oneof"`
}

type EventEnvelope_DrawEventToServer struct {
	DrawEventToServer *event.DrawEventToServer `protobuf:"bytes,29,opt,name=draw_event_to_server,json=drawEventToServer,proto3,oneof"`
}

type EventEnvelope_DrawEventToActor struct {
	DrawEventToActor *event.DrawEventToActor `protobuf:"bytes,30,opt,name=draw_event_to_actor,json=drawEventToActor,proto3,oneof"`
}

type EventEnvelope_DrawEventToRecipient struct {
	DrawEventToRecipient *event.DrawEventToRecipient `protobuf:"bytes,31,opt,name=draw_event_to_recipient,json=drawEventToRecipient,proto3,oneof"`
}

type EventEnvelope_ConfirmActionEventToActor struct {
	ConfirmActionEventToActor *event.ConfirmActionEventToActor `protobuf:"bytes,32,opt,name=confirm_action_event_to_actor,json=confirmActionEventToActor,proto3,oneof"`
}

type EventEnvelope_InitialPlacementCompleteEventToServer struct {
	InitialPlacementCompleteEventToServer *event.InitialPlacementCompleteEventToServer `protobuf:"bytes,33,opt,name=initial_placement_complete_event_to_server,json=initialPlacementCompleteEventToServer,proto3,oneof"`
}

type EventEnvelope_StartGameEventToClients struct {
	StartGameEventToClients *event.StartGameEventToClients `protobuf:"bytes,34,opt,name=start_game_event_to_clients,json=startGameEventToClients,proto3,oneof"`
}

type EventEnvelope_TurnStartEventToClients struct {
	TurnStartEventToClients *event.TurnStartEventToClients `protobuf:"bytes,35,opt,name=turn_start_event_to_clients,json=turnStartEventToClients,proto3,oneof"`
}

type EventEnvelope_TurnEndEventToClients struct {
	TurnEndEventToClients *event.TurnEndEventToClients `protobuf:"bytes,36,opt,name=turn_end_event_to_clients,json=turnEndEventToClients,proto3,oneof"`
}

type EventEnvelope_CoinTossEventToServer struct {
	CoinTossEventToServer *event.CoinTossEventToServer `protobuf:"bytes,37,opt,name=coin_toss_event_to_server,json=coinTossEventToServer,proto3,oneof"`
}

type EventEnvelope_CoinTossEventToActor struct {
	CoinTossEventToActor *event.CoinTossEventToActor `protobuf:"bytes,38,opt,name=coin_toss_event_to_actor,json=coinTossEventToActor,proto3,oneof"`
}

type EventEnvelope_CoinTossResultEventToRecipient struct {
	CoinTossResultEventToRecipient *event.CoinTossResultEventToRecipient `protobuf:"bytes,39,opt,name=coin_toss_result_event_to_recipient,json=coinTossResultEventToRecipient,proto3,oneof"`
}

type EventEnvelope_ConfirmEnergyEventToServer struct {
	ConfirmEnergyEventToServer *event.ConfirmEnergyEventToServer `protobuf:"bytes,40,opt,name=confirm_energy_event_to_server,json=confirmEnergyEventToServer,proto3,oneof"`
}

type EventEnvelope_ConfirmEnergyEventToActor struct {
	ConfirmEnergyEventToActor *event.ConfirmEnergyEventToActor `protobuf:"bytes,41,opt,name=confirm_energy_event_to_actor,json=confirmEnergyEventToActor,proto3,oneof"`
}

type EventEnvelope_ConfirmTargetEventToServer struct {
	ConfirmTargetEventToServer *event.ConfirmTargetEventToServer `protobuf:"bytes,42,opt,name=confirm_target_event_to_server,json=confirmTargetEventToServer,proto3,oneof"`
}

type EventEnvelope_ConfirmTargetEventToActor struct {
	ConfirmTargetEventToActor *event.ConfirmTargetEventToActor `protobuf:"bytes,43,opt,name=confirm_target_event_to_actor,json=confirmTargetEventToActor,proto3,oneof"`
}

type EventEnvelope_NextEnergyEventToActor struct {
	NextEnergyEventToActor *event.NextEnergyEventToActor `protobuf:"bytes,44,opt,name=next_energy_event_to_actor,json=nextEnergyEventToActor,proto3,oneof"`
}

type EventEnvelope_ExchangeDeckEventToServer struct {
	ExchangeDeckEventToServer *event.ExchangeDeckEventToServer `protobuf:"bytes,45,opt,name=exchange_deck_event_to_server,json=exchangeDeckEventToServer,proto3,oneof"`
}

type EventEnvelope_ExchangeDeckEventToActor struct {
	ExchangeDeckEventToActor *event.ExchangeDeckEventToActor `protobuf:"bytes,46,opt,name=exchange_deck_event_to_actor,json=exchangeDeckEventToActor,proto3,oneof"`
}

type EventEnvelope_ExchangeDeckEventToRecipient struct {
	ExchangeDeckEventToRecipient *event.ExchangeDeckEventToRecipient `protobuf:"bytes,47,opt,name=exchange_deck_event_to_recipient,json=exchangeDeckEventToRecipient,proto3,oneof"`
}

type EventEnvelope_CreateRoomEventToServer struct {
	CreateRoomEventToServer *event.CreateRoomEventToServer `protobuf:"bytes,48,opt,name=create_room_event_to_server,json=createRoomEventToServer,proto3,oneof"`
}

type EventEnvelope_EnterRoomEventToServer struct {
	EnterRoomEventToServer *event.EnterRoomEventToServer `protobuf:"bytes,49,opt,name=enter_room_event_to_server,json=enterRoomEventToServer,proto3,oneof"`
}

type EventEnvelope_MatchingCompleteEventToActor struct {
	MatchingCompleteEventToActor *event.MatchingCompleteEventToActor `protobuf:"bytes,50,opt,name=matching_complete_event_to_actor,json=matchingCompleteEventToActor,proto3,oneof"`
}

type EventEnvelope_MatchingCompleteEventToRecipient struct {
	MatchingCompleteEventToRecipient *event.MatchingCompleteEventToRecipient `protobuf:"bytes,51,opt,name=matching_complete_event_to_recipient,json=matchingCompleteEventToRecipient,proto3,oneof"`
}

type EventEnvelope_DecideOrderEventToActor struct {
	DecideOrderEventToActor *event.DecideOrderEventToActor `protobuf:"bytes,52,opt,name=decide_order_event_to_actor,json=decideOrderEventToActor,proto3,oneof"`
}

type EventEnvelope_DecideOrderEventToRecipient struct {
	DecideOrderEventToRecipient *event.DecideOrderEventToRecipient `protobuf:"bytes,53,opt,name=decide_order_event_to_recipient,json=decideOrderEventToRecipient,proto3,oneof"`
}

func (*EventEnvelope_AttackMonsterEventToServer) isEventEnvelope_Event() {}

func (*EventEnvelope_AttackMonsterEventToActor) isEventEnvelope_Event() {}

func (*EventEnvelope_AttackMonsterEventToRecipient) isEventEnvelope_Event() {}

func (*EventEnvelope_SummonMonsterEventToServer) isEventEnvelope_Event() {}

func (*EventEnvelope_SummonMonsterEventToActor) isEventEnvelope_Event() {}

func (*EventEnvelope_SummonMonsterEventToRecipient) isEventEnvelope_Event() {}

func (*EventEnvelope_EvolutionMonsterEventToServer) isEventEnvelope_Event() {}

func (*EventEnvelope_EvolutionMonsterEventToActor) isEventEnvelope_Event() {}

func (*EventEnvelope_EvolutionMonsterEventToRecipient) isEventEnvelope_Event() {}

func (*EventEnvelope_TakeSupportEventToServer) isEventEnvelope_Event() {}

func (*EventEnvelope_TakeSupportEventToActor) isEventEnvelope_Event() {}

func (*EventEnvelope_TakeSupportEventToRecipient) isEventEnvelope_Event() {}

func (*EventEnvelope_TakeGoodsEventToServer) isEventEnvelope_Event() {}

func (*EventEnvelope_TakeGoodsEventToActor) isEventEnvelope_Event() {}

func (*EventEnvelope_TakeGoodsEventToRecipient) isEventEnvelope_Event() {}

func (*EventEnvelope_RetreatEventToServer) isEventEnvelope_Event() {}

func (*EventEnvelope_RetreatEventToActor) isEventEnvelope_Event() {}

func (*EventEnvelope_RetreatEventToRecipient) isEventEnvelope_Event() {}

func (*EventEnvelope_SupplyEnergyEventToServer) isEventEnvelope_Event() {}

func (*EventEnvelope_SupplyEnergyEventToActor) isEventEnvelope_Event() {}

func (*EventEnvelope_SupplyEnergyEventToRecipient) isEventEnvelope_Event() {}

func (*EventEnvelope_SurrenderEventToServer) isEventEnvelope_Event() {}

func (*EventEnvelope_SurrenderEventToActor) isEventEnvelope_Event() {}

func (*EventEnvelope_SurrenderEventToRecipient) isEventEnvelope_Event() {}

func (*EventEnvelope_AbilityEventToServer) isEventEnvelope_Event() {}

func (*EventEnvelope_AbilityEventToActor) isEventEnvelope_Event() {}

func (*EventEnvelope_AbilityEventToRecipient) isEventEnvelope_Event() {}

func (*EventEnvelope_DrawEventToServer) isEventEnvelope_Event() {}

func (*EventEnvelope_DrawEventToActor) isEventEnvelope_Event() {}

func (*EventEnvelope_DrawEventToRecipient) isEventEnvelope_Event() {}

func (*EventEnvelope_ConfirmActionEventToActor) isEventEnvelope_Event() {}

func (*EventEnvelope_InitialPlacementCompleteEventToServer) isEventEnvelope_Event() {}

func (*EventEnvelope_StartGameEventToClients) isEventEnvelope_Event() {}

func (*EventEnvelope_TurnStartEventToClients) isEventEnvelope_Event() {}

func (*EventEnvelope_TurnEndEventToClients) isEventEnvelope_Event() {}

func (*EventEnvelope_CoinTossEventToServer) isEventEnvelope_Event() {}

func (*EventEnvelope_CoinTossEventToActor) isEventEnvelope_Event() {}

func (*EventEnvelope_CoinTossResultEventToRecipient) isEventEnvelope_Event() {}

func (*EventEnvelope_ConfirmEnergyEventToServer) isEventEnvelope_Event() {}

func (*EventEnvelope_ConfirmEnergyEventToActor) isEventEnvelope_Event() {}

func (*EventEnvelope_ConfirmTargetEventToServer) isEventEnvelope_Event() {}

func (*EventEnvelope_ConfirmTargetEventToActor) isEventEnvelope_Event() {}

func (*EventEnvelope_NextEnergyEventToActor) isEventEnvelope_Event() {}

func (*EventEnvelope_ExchangeDeckEventToServer) isEventEnvelope_Event() {}

func (*EventEnvelope_ExchangeDeckEventToActor) isEventEnvelope_Event() {}

func (*EventEnvelope_ExchangeDeckEventToRecipient) isEventEnvelope_Event() {}

func (*EventEnvelope_CreateRoomEventToServer) isEventEnvelope_Event() {}

func (*EventEnvelope_EnterRoomEventToServer) isEventEnvelope_Event() {}

func (*EventEnvelope_MatchingCompleteEventToActor) isEventEnvelope_Event() {}

func (*EventEnvelope_MatchingCompleteEventToRecipient) isEventEnvelope_Event() {}

func (*EventEnvelope_DecideOrderEventToActor) isEventEnvelope_Event() {}

func (*EventEnvelope_DecideOrderEventToRecipient) isEventEnvelope_Event() {}

var File_websocket_event_proto protoreflect.FileDescriptor

var file_websocket_event_proto_rawDesc = string([]byte{
	0x0a, 0x15, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1d, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2f, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18,
	0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f,
	0x67, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x94, 0x01, 0x0a, 0x0d, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0x9d, 0x30, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x12, 0x30, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x79, 0x0a, 0x1e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x6f,
	0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x77, 0x65,
	0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x6c,
	0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x1a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x76,
	0x0a, 0x1d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x19, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x82, 0x01, 0x0a, 0x21, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x6f, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1d, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x79, 0x0a, 0x1e, 0x73,
	0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75,
	0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x00, 0x52, 0x1a, 0x73, 0x75, 0x6d, 0x6d,
	0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x76, 0x0a, 0x1d, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x6f, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x6f,
	0x6e, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x19, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x82,
	0x01, 0x0a, 0x21, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x77, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x1d, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x82, 0x01, 0x0a, 0x21, 0x65, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x76, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x00, 0x52, 0x1d, 0x65, 0x76, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x7f, 0x0a, 0x20, 0x65, 0x76, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x76, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x1c, 0x65, 0x76, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x8b, 0x01, 0x0a, 0x24, 0x65, 0x76,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69,
	0x6e, 0x67, 0x2e, 0x45, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x20, 0x65, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x73, 0x0a, 0x1c, 0x74, 0x61, 0x6b, 0x65, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x61, 0x6b, 0x65, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x18, 0x74, 0x61, 0x6b, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x70, 0x0a, 0x1b,
	0x74, 0x61, 0x6b, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x61, 0x6b, 0x65,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x17, 0x74, 0x61, 0x6b, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x7c,
	0x0a, 0x1f, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e,
	0x67, 0x2e, 0x54, 0x61, 0x6b, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x1b, 0x74, 0x61, 0x6b, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x6d, 0x0a, 0x1a,
	0x74, 0x61, 0x6b, 0x65, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x61, 0x6b, 0x65, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x16, 0x74, 0x61, 0x6b, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x6a, 0x0a, 0x19, 0x74,
	0x61, 0x6b, 0x65, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x6f, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x61, 0x6b, 0x65, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x15, 0x74, 0x61, 0x6b, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x76, 0x0a, 0x1d, 0x74, 0x61, 0x6b, 0x65, 0x5f,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x61, 0x6b, 0x65, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x19, 0x74, 0x61, 0x6b, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x66, 0x0a, 0x17, 0x72, 0x65, 0x74, 0x72, 0x65, 0x61, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x65,
	0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x14, 0x72, 0x65, 0x74, 0x72, 0x65, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x63, 0x0a, 0x16, 0x72, 0x65, 0x74, 0x72, 0x65,
	0x61, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e,
	0x67, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x65, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x74, 0x72, 0x65, 0x61, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x6f, 0x0a, 0x1a,
	0x72, 0x65, 0x74, 0x72, 0x65, 0x61, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f,
	0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x65,
	0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x17, 0x72, 0x65, 0x74, 0x72, 0x65, 0x61, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x76, 0x0a,
	0x1d, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x00, 0x52, 0x19, 0x73, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x73, 0x0a, 0x1c, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f,
	0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x77, 0x65,
	0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x6c,
	0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x18, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x7f, 0x0a, 0x20, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x73,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x6c, 0x0a, 0x19, 0x73,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x16, 0x73, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x69, 0x0a, 0x18, 0x73, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x77, 0x65,
	0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x6c,
	0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x15, 0x73,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x75, 0x0a, 0x1c, 0x73, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x77, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x19, 0x73, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x66, 0x0a, 0x17, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x77,
	0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x00, 0x52, 0x14, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x63, 0x0a, 0x16, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x13, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x6f, 0x0a, 0x1a, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x77,
	0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x17, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x14, 0x64, 0x72, 0x61,
	0x77, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e,
	0x67, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x48, 0x00, 0x52, 0x11, 0x64, 0x72, 0x61, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x13, 0x64, 0x72, 0x61, 0x77,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e,
	0x44, 0x72, 0x61, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x10, 0x64, 0x72, 0x61, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x66, 0x0a, 0x17, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e,
	0x44, 0x72, 0x61, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x14, 0x64, 0x72, 0x61, 0x77, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x76, 0x0a, 0x1d,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x9b, 0x01, 0x0a, 0x2a, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x77, 0x65, 0x62, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x79,
	0x69, 0x6e, 0x67, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x00, 0x52, 0x25, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x70, 0x0a, 0x1b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e,
	0x67, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x00, 0x52, 0x17, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x70, 0x0a, 0x1b, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x77, 0x65, 0x62, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x79,
	0x69, 0x6e, 0x67, 0x2e, 0x54, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x00, 0x52, 0x17, 0x74,
	0x75, 0x72, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x6a, 0x0a, 0x19, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x65,
	0x6e, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x77, 0x65, 0x62, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x79,
	0x69, 0x6e, 0x67, 0x2e, 0x54, 0x75, 0x72, 0x6e, 0x45, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x00, 0x52, 0x15, 0x74, 0x75, 0x72,
	0x6e, 0x45, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x6a, 0x0a, 0x19, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x73, 0x73, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x00, 0x52, 0x15, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x73,
	0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x67,
	0x0a, 0x18, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x73, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x54,
	0x6f, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x48,
	0x00, 0x52, 0x14, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x86, 0x01, 0x0a, 0x23, 0x63, 0x6f, 0x69, 0x6e,
	0x5f, 0x74, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x1e, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x79, 0x0a, 0x1e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x65, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69,
	0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x1a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x76, 0x0a, 0x1d, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x79, 0x0a, 0x1e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x77, 0x65,
	0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x6c,
	0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x76,
	0x0a, 0x1d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x19, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x6d, 0x0a, 0x1a, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x65,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x16, 0x6e,
	0x65, 0x78, 0x74, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x71, 0x0a, 0x1d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x77,
	0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x67,
	0x6d, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x00, 0x52, 0x19, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x6e, 0x0a, 0x1c, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x6f, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x67, 0x6d, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x63, 0x6b,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x18,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x7a, 0x0a, 0x20, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x6f, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x2f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6d, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x44, 0x65, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x44, 0x65, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x6b, 0x0a, 0x1b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x77, 0x65, 0x62, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6d, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x00, 0x52, 0x17, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x6f, 0x6f, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x68, 0x0a, 0x1a, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6d, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x52, 0x6f, 0x6f, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x16, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6f, 0x6d, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x7a, 0x0a, 0x20, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6d, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x1c, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x86, 0x01, 0x0a, 0x24, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6d, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x20,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x6b, 0x0a, 0x1b, 0x64, 0x65, 0x63, 0x69, 0x64, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6d, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x64,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x48, 0x00, 0x52, 0x17, 0x64, 0x65, 0x63, 0x69, 0x64, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x77, 0x0a,
	0x1f, 0x64, 0x65, 0x63, 0x69, 0x64, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6d, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x64, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1b, 0x64, 0x65, 0x63, 0x69, 0x64,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x42,
	0x94, 0x01, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x47, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x6d, 0x61, 0x74, 0x6f, 0x30, 0x32,
	0x31, 0x31, 0x2f, 0x62, 0x72, 0x61, 0x63, 0x68, 0x69, 0x6f, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x72, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x77, 0x65, 0x62, 0x73, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0xa2, 0x02, 0x03, 0x45, 0x58, 0x58, 0xaa, 0x02, 0x05, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0xca, 0x02, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0xe2, 0x02, 0x11, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_websocket_event_proto_rawDescOnce sync.Once
	file_websocket_event_proto_rawDescData []byte
)

func file_websocket_event_proto_rawDescGZIP() []byte {
	file_websocket_event_proto_rawDescOnce.Do(func() {
		file_websocket_event_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_websocket_event_proto_rawDesc), len(file_websocket_event_proto_rawDesc)))
	})
	return file_websocket_event_proto_rawDescData
}

var file_websocket_event_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_websocket_event_proto_goTypes = []any{
	(*EventMetadata)(nil),                               // 0: event.EventMetadata
	(*EventEnvelope)(nil),                               // 1: event.EventEnvelope
	(*timestamppb.Timestamp)(nil),                       // 2: google.protobuf.Timestamp
	(*event.AttackMonsterEventToServer)(nil),            // 3: websocket.event.playing.AttackMonsterEventToServer
	(*event.AttackMonsterEventToActor)(nil),             // 4: websocket.event.playing.AttackMonsterEventToActor
	(*event.AttackMonsterEventToRecipient)(nil),         // 5: websocket.event.playing.AttackMonsterEventToRecipient
	(*event.SummonMonsterEventToServer)(nil),            // 6: websocket.event.playing.SummonMonsterEventToServer
	(*event.SummonMonsterEventToActor)(nil),             // 7: websocket.event.playing.SummonMonsterEventToActor
	(*event.SummonMonsterEventToRecipient)(nil),         // 8: websocket.event.playing.SummonMonsterEventToRecipient
	(*event.EvolutionMonsterEventToServer)(nil),         // 9: websocket.event.playing.EvolutionMonsterEventToServer
	(*event.EvolutionMonsterEventToActor)(nil),          // 10: websocket.event.playing.EvolutionMonsterEventToActor
	(*event.EvolutionMonsterEventToRecipient)(nil),      // 11: websocket.event.playing.EvolutionMonsterEventToRecipient
	(*event.TakeSupportEventToServer)(nil),              // 12: websocket.event.playing.TakeSupportEventToServer
	(*event.TakeSupportEventToActor)(nil),               // 13: websocket.event.playing.TakeSupportEventToActor
	(*event.TakeSupportEventToRecipient)(nil),           // 14: websocket.event.playing.TakeSupportEventToRecipient
	(*event.TakeGoodsEventToServer)(nil),                // 15: websocket.event.playing.TakeGoodsEventToServer
	(*event.TakeGoodsEventToActor)(nil),                 // 16: websocket.event.playing.TakeGoodsEventToActor
	(*event.TakeGoodsEventToRecipient)(nil),             // 17: websocket.event.playing.TakeGoodsEventToRecipient
	(*event.RetreatEventToServer)(nil),                  // 18: websocket.event.playing.RetreatEventToServer
	(*event.RetreatEventToActor)(nil),                   // 19: websocket.event.playing.RetreatEventToActor
	(*event.RetreatEventToRecipient)(nil),               // 20: websocket.event.playing.RetreatEventToRecipient
	(*event.SupplyEnergyEventToServer)(nil),             // 21: websocket.event.playing.SupplyEnergyEventToServer
	(*event.SupplyEnergyEventToActor)(nil),              // 22: websocket.event.playing.SupplyEnergyEventToActor
	(*event.SupplyEnergyEventToRecipient)(nil),          // 23: websocket.event.playing.SupplyEnergyEventToRecipient
	(*event.SurrenderEventToServer)(nil),                // 24: websocket.event.playing.SurrenderEventToServer
	(*event.SurrenderEventToActor)(nil),                 // 25: websocket.event.playing.SurrenderEventToActor
	(*event.SurrenderEventToRecipient)(nil),             // 26: websocket.event.playing.SurrenderEventToRecipient
	(*event.AbilityEventToServer)(nil),                  // 27: websocket.event.playing.AbilityEventToServer
	(*event.AbilityEventToActor)(nil),                   // 28: websocket.event.playing.AbilityEventToActor
	(*event.AbilityEventToRecipient)(nil),               // 29: websocket.event.playing.AbilityEventToRecipient
	(*event.DrawEventToServer)(nil),                     // 30: websocket.event.playing.DrawEventToServer
	(*event.DrawEventToActor)(nil),                      // 31: websocket.event.playing.DrawEventToActor
	(*event.DrawEventToRecipient)(nil),                  // 32: websocket.event.playing.DrawEventToRecipient
	(*event.ConfirmActionEventToActor)(nil),             // 33: websocket.event.playing.ConfirmActionEventToActor
	(*event.InitialPlacementCompleteEventToServer)(nil), // 34: websocket.event.playing.InitialPlacementCompleteEventToServer
	(*event.StartGameEventToClients)(nil),               // 35: websocket.event.playing.StartGameEventToClients
	(*event.TurnStartEventToClients)(nil),               // 36: websocket.event.playing.TurnStartEventToClients
	(*event.TurnEndEventToClients)(nil),                 // 37: websocket.event.playing.TurnEndEventToClients
	(*event.CoinTossEventToServer)(nil),                 // 38: websocket.event.playing.CoinTossEventToServer
	(*event.CoinTossEventToActor)(nil),                  // 39: websocket.event.playing.CoinTossEventToActor
	(*event.CoinTossResultEventToRecipient)(nil),        // 40: websocket.event.playing.CoinTossResultEventToRecipient
	(*event.ConfirmEnergyEventToServer)(nil),            // 41: websocket.event.playing.ConfirmEnergyEventToServer
	(*event.ConfirmEnergyEventToActor)(nil),             // 42: websocket.event.playing.ConfirmEnergyEventToActor
	(*event.ConfirmTargetEventToServer)(nil),            // 43: websocket.event.playing.ConfirmTargetEventToServer
	(*event.ConfirmTargetEventToActor)(nil),             // 44: websocket.event.playing.ConfirmTargetEventToActor
	(*event.NextEnergyEventToActor)(nil),                // 45: websocket.event.playing.NextEnergyEventToActor
	(*event.ExchangeDeckEventToServer)(nil),             // 46: websocket.event.gm.ExchangeDeckEventToServer
	(*event.ExchangeDeckEventToActor)(nil),              // 47: websocket.event.gm.ExchangeDeckEventToActor
	(*event.ExchangeDeckEventToRecipient)(nil),          // 48: websocket.event.gm.ExchangeDeckEventToRecipient
	(*event.CreateRoomEventToServer)(nil),               // 49: websocket.event.gm.CreateRoomEventToServer
	(*event.EnterRoomEventToServer)(nil),                // 50: websocket.event.gm.EnterRoomEventToServer
	(*event.MatchingCompleteEventToActor)(nil),          // 51: websocket.event.gm.MatchingCompleteEventToActor
	(*event.MatchingCompleteEventToRecipient)(nil),      // 52: websocket.event.gm.MatchingCompleteEventToRecipient
	(*event.DecideOrderEventToActor)(nil),               // 53: websocket.event.gm.DecideOrderEventToActor
	(*event.DecideOrderEventToRecipient)(nil),           // 54: websocket.event.gm.DecideOrderEventToRecipient
}
var file_websocket_event_proto_depIdxs = []int32{
	2,  // 0: event.EventMetadata.created_at:type_name -> google.protobuf.Timestamp
	0,  // 1: event.EventEnvelope.metadata:type_name -> event.EventMetadata
	3,  // 2: event.EventEnvelope.attack_monster_event_to_server:type_name -> websocket.event.playing.AttackMonsterEventToServer
	4,  // 3: event.EventEnvelope.attack_monster_event_to_actor:type_name -> websocket.event.playing.AttackMonsterEventToActor
	5,  // 4: event.EventEnvelope.attack_monster_event_to_recipient:type_name -> websocket.event.playing.AttackMonsterEventToRecipient
	6,  // 5: event.EventEnvelope.summon_monster_event_to_server:type_name -> websocket.event.playing.SummonMonsterEventToServer
	7,  // 6: event.EventEnvelope.summon_monster_event_to_actor:type_name -> websocket.event.playing.SummonMonsterEventToActor
	8,  // 7: event.EventEnvelope.summon_monster_event_to_recipient:type_name -> websocket.event.playing.SummonMonsterEventToRecipient
	9,  // 8: event.EventEnvelope.evolution_monster_event_to_server:type_name -> websocket.event.playing.EvolutionMonsterEventToServer
	10, // 9: event.EventEnvelope.evolution_monster_event_to_actor:type_name -> websocket.event.playing.EvolutionMonsterEventToActor
	11, // 10: event.EventEnvelope.evolution_monster_event_to_recipient:type_name -> websocket.event.playing.EvolutionMonsterEventToRecipient
	12, // 11: event.EventEnvelope.take_support_event_to_server:type_name -> websocket.event.playing.TakeSupportEventToServer
	13, // 12: event.EventEnvelope.take_support_event_to_actor:type_name -> websocket.event.playing.TakeSupportEventToActor
	14, // 13: event.EventEnvelope.take_support_event_to_recipient:type_name -> websocket.event.playing.TakeSupportEventToRecipient
	15, // 14: event.EventEnvelope.take_goods_event_to_server:type_name -> websocket.event.playing.TakeGoodsEventToServer
	16, // 15: event.EventEnvelope.take_goods_event_to_actor:type_name -> websocket.event.playing.TakeGoodsEventToActor
	17, // 16: event.EventEnvelope.take_goods_event_to_recipient:type_name -> websocket.event.playing.TakeGoodsEventToRecipient
	18, // 17: event.EventEnvelope.retreat_event_to_server:type_name -> websocket.event.playing.RetreatEventToServer
	19, // 18: event.EventEnvelope.retreat_event_to_actor:type_name -> websocket.event.playing.RetreatEventToActor
	20, // 19: event.EventEnvelope.retreat_event_to_recipient:type_name -> websocket.event.playing.RetreatEventToRecipient
	21, // 20: event.EventEnvelope.supply_energy_event_to_server:type_name -> websocket.event.playing.SupplyEnergyEventToServer
	22, // 21: event.EventEnvelope.supply_energy_event_to_actor:type_name -> websocket.event.playing.SupplyEnergyEventToActor
	23, // 22: event.EventEnvelope.supply_energy_event_to_recipient:type_name -> websocket.event.playing.SupplyEnergyEventToRecipient
	24, // 23: event.EventEnvelope.surrender_event_to_server:type_name -> websocket.event.playing.SurrenderEventToServer
	25, // 24: event.EventEnvelope.surrender_event_to_actor:type_name -> websocket.event.playing.SurrenderEventToActor
	26, // 25: event.EventEnvelope.surrender_event_to_recipient:type_name -> websocket.event.playing.SurrenderEventToRecipient
	27, // 26: event.EventEnvelope.ability_event_to_server:type_name -> websocket.event.playing.AbilityEventToServer
	28, // 27: event.EventEnvelope.ability_event_to_actor:type_name -> websocket.event.playing.AbilityEventToActor
	29, // 28: event.EventEnvelope.ability_event_to_recipient:type_name -> websocket.event.playing.AbilityEventToRecipient
	30, // 29: event.EventEnvelope.draw_event_to_server:type_name -> websocket.event.playing.DrawEventToServer
	31, // 30: event.EventEnvelope.draw_event_to_actor:type_name -> websocket.event.playing.DrawEventToActor
	32, // 31: event.EventEnvelope.draw_event_to_recipient:type_name -> websocket.event.playing.DrawEventToRecipient
	33, // 32: event.EventEnvelope.confirm_action_event_to_actor:type_name -> websocket.event.playing.ConfirmActionEventToActor
	34, // 33: event.EventEnvelope.initial_placement_complete_event_to_server:type_name -> websocket.event.playing.InitialPlacementCompleteEventToServer
	35, // 34: event.EventEnvelope.start_game_event_to_clients:type_name -> websocket.event.playing.StartGameEventToClients
	36, // 35: event.EventEnvelope.turn_start_event_to_clients:type_name -> websocket.event.playing.TurnStartEventToClients
	37, // 36: event.EventEnvelope.turn_end_event_to_clients:type_name -> websocket.event.playing.TurnEndEventToClients
	38, // 37: event.EventEnvelope.coin_toss_event_to_server:type_name -> websocket.event.playing.CoinTossEventToServer
	39, // 38: event.EventEnvelope.coin_toss_event_to_actor:type_name -> websocket.event.playing.CoinTossEventToActor
	40, // 39: event.EventEnvelope.coin_toss_result_event_to_recipient:type_name -> websocket.event.playing.CoinTossResultEventToRecipient
	41, // 40: event.EventEnvelope.confirm_energy_event_to_server:type_name -> websocket.event.playing.ConfirmEnergyEventToServer
	42, // 41: event.EventEnvelope.confirm_energy_event_to_actor:type_name -> websocket.event.playing.ConfirmEnergyEventToActor
	43, // 42: event.EventEnvelope.confirm_target_event_to_server:type_name -> websocket.event.playing.ConfirmTargetEventToServer
	44, // 43: event.EventEnvelope.confirm_target_event_to_actor:type_name -> websocket.event.playing.ConfirmTargetEventToActor
	45, // 44: event.EventEnvelope.next_energy_event_to_actor:type_name -> websocket.event.playing.NextEnergyEventToActor
	46, // 45: event.EventEnvelope.exchange_deck_event_to_server:type_name -> websocket.event.gm.ExchangeDeckEventToServer
	47, // 46: event.EventEnvelope.exchange_deck_event_to_actor:type_name -> websocket.event.gm.ExchangeDeckEventToActor
	48, // 47: event.EventEnvelope.exchange_deck_event_to_recipient:type_name -> websocket.event.gm.ExchangeDeckEventToRecipient
	49, // 48: event.EventEnvelope.create_room_event_to_server:type_name -> websocket.event.gm.CreateRoomEventToServer
	50, // 49: event.EventEnvelope.enter_room_event_to_server:type_name -> websocket.event.gm.EnterRoomEventToServer
	51, // 50: event.EventEnvelope.matching_complete_event_to_actor:type_name -> websocket.event.gm.MatchingCompleteEventToActor
	52, // 51: event.EventEnvelope.matching_complete_event_to_recipient:type_name -> websocket.event.gm.MatchingCompleteEventToRecipient
	53, // 52: event.EventEnvelope.decide_order_event_to_actor:type_name -> websocket.event.gm.DecideOrderEventToActor
	54, // 53: event.EventEnvelope.decide_order_event_to_recipient:type_name -> websocket.event.gm.DecideOrderEventToRecipient
	54, // [54:54] is the sub-list for method output_type
	54, // [54:54] is the sub-list for method input_type
	54, // [54:54] is the sub-list for extension type_name
	54, // [54:54] is the sub-list for extension extendee
	0,  // [0:54] is the sub-list for field type_name
}

func init() { file_websocket_event_proto_init() }
func file_websocket_event_proto_init() {
	if File_websocket_event_proto != nil {
		return
	}
	file_websocket_event_proto_msgTypes[1].OneofWrappers = []any{
		(*EventEnvelope_AttackMonsterEventToServer)(nil),
		(*EventEnvelope_AttackMonsterEventToActor)(nil),
		(*EventEnvelope_AttackMonsterEventToRecipient)(nil),
		(*EventEnvelope_SummonMonsterEventToServer)(nil),
		(*EventEnvelope_SummonMonsterEventToActor)(nil),
		(*EventEnvelope_SummonMonsterEventToRecipient)(nil),
		(*EventEnvelope_EvolutionMonsterEventToServer)(nil),
		(*EventEnvelope_EvolutionMonsterEventToActor)(nil),
		(*EventEnvelope_EvolutionMonsterEventToRecipient)(nil),
		(*EventEnvelope_TakeSupportEventToServer)(nil),
		(*EventEnvelope_TakeSupportEventToActor)(nil),
		(*EventEnvelope_TakeSupportEventToRecipient)(nil),
		(*EventEnvelope_TakeGoodsEventToServer)(nil),
		(*EventEnvelope_TakeGoodsEventToActor)(nil),
		(*EventEnvelope_TakeGoodsEventToRecipient)(nil),
		(*EventEnvelope_RetreatEventToServer)(nil),
		(*EventEnvelope_RetreatEventToActor)(nil),
		(*EventEnvelope_RetreatEventToRecipient)(nil),
		(*EventEnvelope_SupplyEnergyEventToServer)(nil),
		(*EventEnvelope_SupplyEnergyEventToActor)(nil),
		(*EventEnvelope_SupplyEnergyEventToRecipient)(nil),
		(*EventEnvelope_SurrenderEventToServer)(nil),
		(*EventEnvelope_SurrenderEventToActor)(nil),
		(*EventEnvelope_SurrenderEventToRecipient)(nil),
		(*EventEnvelope_AbilityEventToServer)(nil),
		(*EventEnvelope_AbilityEventToActor)(nil),
		(*EventEnvelope_AbilityEventToRecipient)(nil),
		(*EventEnvelope_DrawEventToServer)(nil),
		(*EventEnvelope_DrawEventToActor)(nil),
		(*EventEnvelope_DrawEventToRecipient)(nil),
		(*EventEnvelope_ConfirmActionEventToActor)(nil),
		(*EventEnvelope_InitialPlacementCompleteEventToServer)(nil),
		(*EventEnvelope_StartGameEventToClients)(nil),
		(*EventEnvelope_TurnStartEventToClients)(nil),
		(*EventEnvelope_TurnEndEventToClients)(nil),
		(*EventEnvelope_CoinTossEventToServer)(nil),
		(*EventEnvelope_CoinTossEventToActor)(nil),
		(*EventEnvelope_CoinTossResultEventToRecipient)(nil),
		(*EventEnvelope_ConfirmEnergyEventToServer)(nil),
		(*EventEnvelope_ConfirmEnergyEventToActor)(nil),
		(*EventEnvelope_ConfirmTargetEventToServer)(nil),
		(*EventEnvelope_ConfirmTargetEventToActor)(nil),
		(*EventEnvelope_NextEnergyEventToActor)(nil),
		(*EventEnvelope_ExchangeDeckEventToServer)(nil),
		(*EventEnvelope_ExchangeDeckEventToActor)(nil),
		(*EventEnvelope_ExchangeDeckEventToRecipient)(nil),
		(*EventEnvelope_CreateRoomEventToServer)(nil),
		(*EventEnvelope_EnterRoomEventToServer)(nil),
		(*EventEnvelope_MatchingCompleteEventToActor)(nil),
		(*EventEnvelope_MatchingCompleteEventToRecipient)(nil),
		(*EventEnvelope_DecideOrderEventToActor)(nil),
		(*EventEnvelope_DecideOrderEventToRecipient)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_websocket_event_proto_rawDesc), len(file_websocket_event_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_websocket_event_proto_goTypes,
		DependencyIndexes: file_websocket_event_proto_depIdxs,
		MessageInfos:      file_websocket_event_proto_msgTypes,
	}.Build()
	File_websocket_event_proto = out.File
	file_websocket_event_proto_goTypes = nil
	file_websocket_event_proto_depIdxs = nil
}
