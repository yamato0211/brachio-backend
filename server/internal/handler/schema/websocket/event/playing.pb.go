// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: websocket/event/playing.proto

package event

import (
	payload "github.com/yamato0211/brachio-backend/internal/handler/schema/websocket/payload"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// //
// ラムモン攻撃イベント
// //
type AttackMonsterEventToServer struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Payload       *payload.AttackMonsterPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AttackMonsterEventToServer) Reset() {
	*x = AttackMonsterEventToServer{}
	mi := &file_websocket_event_playing_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttackMonsterEventToServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttackMonsterEventToServer) ProtoMessage() {}

func (x *AttackMonsterEventToServer) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttackMonsterEventToServer.ProtoReflect.Descriptor instead.
func (*AttackMonsterEventToServer) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{0}
}

func (x *AttackMonsterEventToServer) GetPayload() *payload.AttackMonsterPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

// TODO:一旦保留
type AttackMonsterEventToActor struct {
	state   protoimpl.MessageState        `protogen:"open.v1"`
	Payload *payload.AttackMonsterPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// 攻撃者のユーザーID
	UserId        string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AttackMonsterEventToActor) Reset() {
	*x = AttackMonsterEventToActor{}
	mi := &file_websocket_event_playing_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttackMonsterEventToActor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttackMonsterEventToActor) ProtoMessage() {}

func (x *AttackMonsterEventToActor) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttackMonsterEventToActor.ProtoReflect.Descriptor instead.
func (*AttackMonsterEventToActor) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{1}
}

func (x *AttackMonsterEventToActor) GetPayload() *payload.AttackMonsterPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *AttackMonsterEventToActor) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type AttackMonsterEventToRecipient struct {
	state   protoimpl.MessageState        `protogen:"open.v1"`
	Payload *payload.AttackMonsterPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// 攻撃者のユーザーID
	UserId        string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AttackMonsterEventToRecipient) Reset() {
	*x = AttackMonsterEventToRecipient{}
	mi := &file_websocket_event_playing_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttackMonsterEventToRecipient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttackMonsterEventToRecipient) ProtoMessage() {}

func (x *AttackMonsterEventToRecipient) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttackMonsterEventToRecipient.ProtoReflect.Descriptor instead.
func (*AttackMonsterEventToRecipient) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{2}
}

func (x *AttackMonsterEventToRecipient) GetPayload() *payload.AttackMonsterPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *AttackMonsterEventToRecipient) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// //
// ラムモン召喚イベント
// //
type SummonMonsterEventToServer struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Payload       *payload.SummonMonsterPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SummonMonsterEventToServer) Reset() {
	*x = SummonMonsterEventToServer{}
	mi := &file_websocket_event_playing_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SummonMonsterEventToServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummonMonsterEventToServer) ProtoMessage() {}

func (x *SummonMonsterEventToServer) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummonMonsterEventToServer.ProtoReflect.Descriptor instead.
func (*SummonMonsterEventToServer) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{3}
}

func (x *SummonMonsterEventToServer) GetPayload() *payload.SummonMonsterPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type SummonMonsterEventToActor struct {
	state   protoimpl.MessageState        `protogen:"open.v1"`
	Payload *payload.SummonMonsterPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// 召喚するユーザーのID
	UserId        string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SummonMonsterEventToActor) Reset() {
	*x = SummonMonsterEventToActor{}
	mi := &file_websocket_event_playing_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SummonMonsterEventToActor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummonMonsterEventToActor) ProtoMessage() {}

func (x *SummonMonsterEventToActor) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummonMonsterEventToActor.ProtoReflect.Descriptor instead.
func (*SummonMonsterEventToActor) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{4}
}

func (x *SummonMonsterEventToActor) GetPayload() *payload.SummonMonsterPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *SummonMonsterEventToActor) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type SummonMonsterEventToRecipient struct {
	state   protoimpl.MessageState        `protogen:"open.v1"`
	Payload *payload.SummonMonsterPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// 召喚するユーザーのID
	UserId        string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SummonMonsterEventToRecipient) Reset() {
	*x = SummonMonsterEventToRecipient{}
	mi := &file_websocket_event_playing_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SummonMonsterEventToRecipient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummonMonsterEventToRecipient) ProtoMessage() {}

func (x *SummonMonsterEventToRecipient) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummonMonsterEventToRecipient.ProtoReflect.Descriptor instead.
func (*SummonMonsterEventToRecipient) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{5}
}

func (x *SummonMonsterEventToRecipient) GetPayload() *payload.SummonMonsterPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *SummonMonsterEventToRecipient) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// //
// ラムモン進化イベント
// //
type EvolutionMonsterEventToServer struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Payload       *payload.EvolutionMonsterPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EvolutionMonsterEventToServer) Reset() {
	*x = EvolutionMonsterEventToServer{}
	mi := &file_websocket_event_playing_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EvolutionMonsterEventToServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvolutionMonsterEventToServer) ProtoMessage() {}

func (x *EvolutionMonsterEventToServer) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvolutionMonsterEventToServer.ProtoReflect.Descriptor instead.
func (*EvolutionMonsterEventToServer) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{6}
}

func (x *EvolutionMonsterEventToServer) GetPayload() *payload.EvolutionMonsterPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type EvolutionMonsterEventToActor struct {
	state   protoimpl.MessageState           `protogen:"open.v1"`
	Payload *payload.EvolutionMonsterPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// 進化するユーザーのID
	UserId        string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EvolutionMonsterEventToActor) Reset() {
	*x = EvolutionMonsterEventToActor{}
	mi := &file_websocket_event_playing_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EvolutionMonsterEventToActor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvolutionMonsterEventToActor) ProtoMessage() {}

func (x *EvolutionMonsterEventToActor) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvolutionMonsterEventToActor.ProtoReflect.Descriptor instead.
func (*EvolutionMonsterEventToActor) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{7}
}

func (x *EvolutionMonsterEventToActor) GetPayload() *payload.EvolutionMonsterPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *EvolutionMonsterEventToActor) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type EvolutionMonsterEventToRecipient struct {
	state   protoimpl.MessageState           `protogen:"open.v1"`
	Payload *payload.EvolutionMonsterPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// 進化するユーザーのID
	UserId        string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EvolutionMonsterEventToRecipient) Reset() {
	*x = EvolutionMonsterEventToRecipient{}
	mi := &file_websocket_event_playing_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EvolutionMonsterEventToRecipient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvolutionMonsterEventToRecipient) ProtoMessage() {}

func (x *EvolutionMonsterEventToRecipient) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvolutionMonsterEventToRecipient.ProtoReflect.Descriptor instead.
func (*EvolutionMonsterEventToRecipient) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{8}
}

func (x *EvolutionMonsterEventToRecipient) GetPayload() *payload.EvolutionMonsterPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *EvolutionMonsterEventToRecipient) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// //
// サポートカード使用イベント
// //
type TakeSupportEventToServer struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Payload       *payload.TakeSupportPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TakeSupportEventToServer) Reset() {
	*x = TakeSupportEventToServer{}
	mi := &file_websocket_event_playing_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TakeSupportEventToServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeSupportEventToServer) ProtoMessage() {}

func (x *TakeSupportEventToServer) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeSupportEventToServer.ProtoReflect.Descriptor instead.
func (*TakeSupportEventToServer) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{9}
}

func (x *TakeSupportEventToServer) GetPayload() *payload.TakeSupportPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type TakeSupportEventToActor struct {
	state   protoimpl.MessageState      `protogen:"open.v1"`
	Payload *payload.TakeSupportPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// サポートするユーザーのID
	UserId        string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TakeSupportEventToActor) Reset() {
	*x = TakeSupportEventToActor{}
	mi := &file_websocket_event_playing_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TakeSupportEventToActor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeSupportEventToActor) ProtoMessage() {}

func (x *TakeSupportEventToActor) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeSupportEventToActor.ProtoReflect.Descriptor instead.
func (*TakeSupportEventToActor) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{10}
}

func (x *TakeSupportEventToActor) GetPayload() *payload.TakeSupportPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *TakeSupportEventToActor) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type TakeSupportEventToRecipient struct {
	state   protoimpl.MessageState      `protogen:"open.v1"`
	Payload *payload.TakeSupportPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// サポートするユーザーのID
	UserId        string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TakeSupportEventToRecipient) Reset() {
	*x = TakeSupportEventToRecipient{}
	mi := &file_websocket_event_playing_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TakeSupportEventToRecipient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeSupportEventToRecipient) ProtoMessage() {}

func (x *TakeSupportEventToRecipient) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeSupportEventToRecipient.ProtoReflect.Descriptor instead.
func (*TakeSupportEventToRecipient) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{11}
}

func (x *TakeSupportEventToRecipient) GetPayload() *payload.TakeSupportPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *TakeSupportEventToRecipient) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// //
// グッズカード使用イベント
// //
type TakeGoodsEventToServer struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Payload       *payload.TakeGoodsPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TakeGoodsEventToServer) Reset() {
	*x = TakeGoodsEventToServer{}
	mi := &file_websocket_event_playing_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TakeGoodsEventToServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeGoodsEventToServer) ProtoMessage() {}

func (x *TakeGoodsEventToServer) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeGoodsEventToServer.ProtoReflect.Descriptor instead.
func (*TakeGoodsEventToServer) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{12}
}

func (x *TakeGoodsEventToServer) GetPayload() *payload.TakeGoodsPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type TakeGoodsEventToActor struct {
	state   protoimpl.MessageState    `protogen:"open.v1"`
	Payload *payload.TakeGoodsPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// アイテムを取得するユーザーのID
	UserId        string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TakeGoodsEventToActor) Reset() {
	*x = TakeGoodsEventToActor{}
	mi := &file_websocket_event_playing_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TakeGoodsEventToActor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeGoodsEventToActor) ProtoMessage() {}

func (x *TakeGoodsEventToActor) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeGoodsEventToActor.ProtoReflect.Descriptor instead.
func (*TakeGoodsEventToActor) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{13}
}

func (x *TakeGoodsEventToActor) GetPayload() *payload.TakeGoodsPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *TakeGoodsEventToActor) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type TakeGoodsEventToRecipient struct {
	state   protoimpl.MessageState    `protogen:"open.v1"`
	Payload *payload.TakeGoodsPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// アイテムを取得するユーザーのID
	UserId        string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TakeGoodsEventToRecipient) Reset() {
	*x = TakeGoodsEventToRecipient{}
	mi := &file_websocket_event_playing_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TakeGoodsEventToRecipient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeGoodsEventToRecipient) ProtoMessage() {}

func (x *TakeGoodsEventToRecipient) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeGoodsEventToRecipient.ProtoReflect.Descriptor instead.
func (*TakeGoodsEventToRecipient) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{14}
}

func (x *TakeGoodsEventToRecipient) GetPayload() *payload.TakeGoodsPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *TakeGoodsEventToRecipient) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// //
// 逃げるイベント
// //
type RetreatEventToServer struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Payload       *payload.RetreatPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RetreatEventToServer) Reset() {
	*x = RetreatEventToServer{}
	mi := &file_websocket_event_playing_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetreatEventToServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetreatEventToServer) ProtoMessage() {}

func (x *RetreatEventToServer) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetreatEventToServer.ProtoReflect.Descriptor instead.
func (*RetreatEventToServer) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{15}
}

func (x *RetreatEventToServer) GetPayload() *payload.RetreatPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type RetreatEventToActor struct {
	state   protoimpl.MessageState  `protogen:"open.v1"`
	Payload *payload.RetreatPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// 逃げるユーザーのID
	UserId        string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RetreatEventToActor) Reset() {
	*x = RetreatEventToActor{}
	mi := &file_websocket_event_playing_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetreatEventToActor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetreatEventToActor) ProtoMessage() {}

func (x *RetreatEventToActor) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetreatEventToActor.ProtoReflect.Descriptor instead.
func (*RetreatEventToActor) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{16}
}

func (x *RetreatEventToActor) GetPayload() *payload.RetreatPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *RetreatEventToActor) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type RetreatEventToRecipient struct {
	state   protoimpl.MessageState  `protogen:"open.v1"`
	Payload *payload.RetreatPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// 逃げるユーザーのID
	UserId        string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RetreatEventToRecipient) Reset() {
	*x = RetreatEventToRecipient{}
	mi := &file_websocket_event_playing_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetreatEventToRecipient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetreatEventToRecipient) ProtoMessage() {}

func (x *RetreatEventToRecipient) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetreatEventToRecipient.ProtoReflect.Descriptor instead.
func (*RetreatEventToRecipient) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{17}
}

func (x *RetreatEventToRecipient) GetPayload() *payload.RetreatPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *RetreatEventToRecipient) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// //
// エネルギー付与イベント
// //
type SupplyEnergyEventToServer struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Payload       *payload.SupplyEnergyPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SupplyEnergyEventToServer) Reset() {
	*x = SupplyEnergyEventToServer{}
	mi := &file_websocket_event_playing_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SupplyEnergyEventToServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplyEnergyEventToServer) ProtoMessage() {}

func (x *SupplyEnergyEventToServer) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplyEnergyEventToServer.ProtoReflect.Descriptor instead.
func (*SupplyEnergyEventToServer) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{18}
}

func (x *SupplyEnergyEventToServer) GetPayload() *payload.SupplyEnergyPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type SupplyEnergyEventToActor struct {
	state   protoimpl.MessageState       `protogen:"open.v1"`
	Payload *payload.SupplyEnergyPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// エネルギーを供給するユーザーのID
	UserId        string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SupplyEnergyEventToActor) Reset() {
	*x = SupplyEnergyEventToActor{}
	mi := &file_websocket_event_playing_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SupplyEnergyEventToActor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplyEnergyEventToActor) ProtoMessage() {}

func (x *SupplyEnergyEventToActor) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplyEnergyEventToActor.ProtoReflect.Descriptor instead.
func (*SupplyEnergyEventToActor) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{19}
}

func (x *SupplyEnergyEventToActor) GetPayload() *payload.SupplyEnergyPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *SupplyEnergyEventToActor) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type SupplyEnergyEventToRecipient struct {
	state   protoimpl.MessageState       `protogen:"open.v1"`
	Payload *payload.SupplyEnergyPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// エネルギーを供給するユーザーのID
	UserId        string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SupplyEnergyEventToRecipient) Reset() {
	*x = SupplyEnergyEventToRecipient{}
	mi := &file_websocket_event_playing_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SupplyEnergyEventToRecipient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplyEnergyEventToRecipient) ProtoMessage() {}

func (x *SupplyEnergyEventToRecipient) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplyEnergyEventToRecipient.ProtoReflect.Descriptor instead.
func (*SupplyEnergyEventToRecipient) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{20}
}

func (x *SupplyEnergyEventToRecipient) GetPayload() *payload.SupplyEnergyPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *SupplyEnergyEventToRecipient) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// //
// 降参イベント
// //
type SurrenderEventToServer struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Payload       *payload.SurrenderPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SurrenderEventToServer) Reset() {
	*x = SurrenderEventToServer{}
	mi := &file_websocket_event_playing_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SurrenderEventToServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurrenderEventToServer) ProtoMessage() {}

func (x *SurrenderEventToServer) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurrenderEventToServer.ProtoReflect.Descriptor instead.
func (*SurrenderEventToServer) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{21}
}

func (x *SurrenderEventToServer) GetPayload() *payload.SurrenderPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type SurrenderEventToActor struct {
	state   protoimpl.MessageState    `protogen:"open.v1"`
	Payload *payload.SurrenderPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// 降参するユーザーのID
	UserId        string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SurrenderEventToActor) Reset() {
	*x = SurrenderEventToActor{}
	mi := &file_websocket_event_playing_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SurrenderEventToActor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurrenderEventToActor) ProtoMessage() {}

func (x *SurrenderEventToActor) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurrenderEventToActor.ProtoReflect.Descriptor instead.
func (*SurrenderEventToActor) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{22}
}

func (x *SurrenderEventToActor) GetPayload() *payload.SurrenderPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *SurrenderEventToActor) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type SurrenderEventToRecipient struct {
	state   protoimpl.MessageState    `protogen:"open.v1"`
	Payload *payload.SurrenderPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// 降参するユーザーのID
	UserId        string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SurrenderEventToRecipient) Reset() {
	*x = SurrenderEventToRecipient{}
	mi := &file_websocket_event_playing_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SurrenderEventToRecipient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurrenderEventToRecipient) ProtoMessage() {}

func (x *SurrenderEventToRecipient) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurrenderEventToRecipient.ProtoReflect.Descriptor instead.
func (*SurrenderEventToRecipient) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{23}
}

func (x *SurrenderEventToRecipient) GetPayload() *payload.SurrenderPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *SurrenderEventToRecipient) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// //
// ラムモン特性イベント
// //
type AbilityEventToServer struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Payload       *payload.AbilityPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AbilityEventToServer) Reset() {
	*x = AbilityEventToServer{}
	mi := &file_websocket_event_playing_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbilityEventToServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbilityEventToServer) ProtoMessage() {}

func (x *AbilityEventToServer) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbilityEventToServer.ProtoReflect.Descriptor instead.
func (*AbilityEventToServer) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{24}
}

func (x *AbilityEventToServer) GetPayload() *payload.AbilityPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type AbilityEventToActor struct {
	state   protoimpl.MessageState  `protogen:"open.v1"`
	Payload *payload.AbilityPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// 特性を発動するユーザーのID
	UserId        string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AbilityEventToActor) Reset() {
	*x = AbilityEventToActor{}
	mi := &file_websocket_event_playing_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbilityEventToActor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbilityEventToActor) ProtoMessage() {}

func (x *AbilityEventToActor) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbilityEventToActor.ProtoReflect.Descriptor instead.
func (*AbilityEventToActor) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{25}
}

func (x *AbilityEventToActor) GetPayload() *payload.AbilityPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *AbilityEventToActor) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type AbilityEventToRecipient struct {
	state   protoimpl.MessageState  `protogen:"open.v1"`
	Payload *payload.AbilityPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// 特性を発動するユーザーのID
	UserId        string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AbilityEventToRecipient) Reset() {
	*x = AbilityEventToRecipient{}
	mi := &file_websocket_event_playing_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbilityEventToRecipient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbilityEventToRecipient) ProtoMessage() {}

func (x *AbilityEventToRecipient) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbilityEventToRecipient.ProtoReflect.Descriptor instead.
func (*AbilityEventToRecipient) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{26}
}

func (x *AbilityEventToRecipient) GetPayload() *payload.AbilityPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *AbilityEventToRecipient) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// //
// ドローイベント
// //
type DrawEventToServer struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Payload       *payload.DrawCardPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DrawEventToServer) Reset() {
	*x = DrawEventToServer{}
	mi := &file_websocket_event_playing_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DrawEventToServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawEventToServer) ProtoMessage() {}

func (x *DrawEventToServer) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawEventToServer.ProtoReflect.Descriptor instead.
func (*DrawEventToServer) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{27}
}

func (x *DrawEventToServer) GetPayload() *payload.DrawCardPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type DrawEventToActor struct {
	state   protoimpl.MessageState             `protogen:"open.v1"`
	Payload *payload.DrawCardIndividualPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// ドローするユーザーのID
	UserId        string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DrawEventToActor) Reset() {
	*x = DrawEventToActor{}
	mi := &file_websocket_event_playing_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DrawEventToActor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawEventToActor) ProtoMessage() {}

func (x *DrawEventToActor) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawEventToActor.ProtoReflect.Descriptor instead.
func (*DrawEventToActor) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{28}
}

func (x *DrawEventToActor) GetPayload() *payload.DrawCardIndividualPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *DrawEventToActor) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type DrawEventToRecipient struct {
	state   protoimpl.MessageState   `protogen:"open.v1"`
	Payload *payload.DrawCardPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// ドローするユーザーのID
	UserId        string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DrawEventToRecipient) Reset() {
	*x = DrawEventToRecipient{}
	mi := &file_websocket_event_playing_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DrawEventToRecipient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawEventToRecipient) ProtoMessage() {}

func (x *DrawEventToRecipient) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawEventToRecipient.ProtoReflect.Descriptor instead.
func (*DrawEventToRecipient) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{29}
}

func (x *DrawEventToRecipient) GetPayload() *payload.DrawCardPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *DrawEventToRecipient) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// //
// 実行可能な行動確認イベント
// //
type ConfirmActionEventToActor struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Payload       *payload.ConfirmActionPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfirmActionEventToActor) Reset() {
	*x = ConfirmActionEventToActor{}
	mi := &file_websocket_event_playing_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfirmActionEventToActor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmActionEventToActor) ProtoMessage() {}

func (x *ConfirmActionEventToActor) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmActionEventToActor.ProtoReflect.Descriptor instead.
func (*ConfirmActionEventToActor) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{30}
}

func (x *ConfirmActionEventToActor) GetPayload() *payload.ConfirmActionPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

// //
// 初期ラムポケ配置完了イベント
// //
type InitialPlacementCompleteEventToServer struct {
	state         protoimpl.MessageState                   `protogen:"open.v1"`
	Payload       *payload.InitialPlacementCompletePayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InitialPlacementCompleteEventToServer) Reset() {
	*x = InitialPlacementCompleteEventToServer{}
	mi := &file_websocket_event_playing_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitialPlacementCompleteEventToServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitialPlacementCompleteEventToServer) ProtoMessage() {}

func (x *InitialPlacementCompleteEventToServer) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitialPlacementCompleteEventToServer.ProtoReflect.Descriptor instead.
func (*InitialPlacementCompleteEventToServer) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{31}
}

func (x *InitialPlacementCompleteEventToServer) GetPayload() *payload.InitialPlacementCompletePayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

// //
// ゲーム開始通知イベント
// //
type StartGameEventToClients struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Payload       *payload.StartGamePayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartGameEventToClients) Reset() {
	*x = StartGameEventToClients{}
	mi := &file_websocket_event_playing_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartGameEventToClients) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartGameEventToClients) ProtoMessage() {}

func (x *StartGameEventToClients) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartGameEventToClients.ProtoReflect.Descriptor instead.
func (*StartGameEventToClients) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{32}
}

func (x *StartGameEventToClients) GetPayload() *payload.StartGamePayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

// //
// ターン開始時イベント検知イベント
// //
type TurnStartEventToClients struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Payload       *payload.TurnStartPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TurnStartEventToClients) Reset() {
	*x = TurnStartEventToClients{}
	mi := &file_websocket_event_playing_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TurnStartEventToClients) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TurnStartEventToClients) ProtoMessage() {}

func (x *TurnStartEventToClients) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TurnStartEventToClients.ProtoReflect.Descriptor instead.
func (*TurnStartEventToClients) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{33}
}

func (x *TurnStartEventToClients) GetPayload() *payload.TurnStartPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

// //
// ターン終了時イベント検知イベント
// //
type TurnEndEventToClients struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Payload       *payload.TurnEndPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TurnEndEventToClients) Reset() {
	*x = TurnEndEventToClients{}
	mi := &file_websocket_event_playing_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TurnEndEventToClients) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TurnEndEventToClients) ProtoMessage() {}

func (x *TurnEndEventToClients) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TurnEndEventToClients.ProtoReflect.Descriptor instead.
func (*TurnEndEventToClients) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{34}
}

func (x *TurnEndEventToClients) GetPayload() *payload.TurnEndPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

// //
// コイントスイベント
// //
type CoinTossEventToServer struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Payload       *payload.CoinTossEmptyPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CoinTossEventToServer) Reset() {
	*x = CoinTossEventToServer{}
	mi := &file_websocket_event_playing_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CoinTossEventToServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinTossEventToServer) ProtoMessage() {}

func (x *CoinTossEventToServer) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinTossEventToServer.ProtoReflect.Descriptor instead.
func (*CoinTossEventToServer) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{35}
}

func (x *CoinTossEventToServer) GetPayload() *payload.CoinTossEmptyPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type CoinTossEventToActor struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Payload       *payload.CoinTossPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CoinTossEventToActor) Reset() {
	*x = CoinTossEventToActor{}
	mi := &file_websocket_event_playing_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CoinTossEventToActor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinTossEventToActor) ProtoMessage() {}

func (x *CoinTossEventToActor) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinTossEventToActor.ProtoReflect.Descriptor instead.
func (*CoinTossEventToActor) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{36}
}

func (x *CoinTossEventToActor) GetPayload() *payload.CoinTossPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

// //
// コイントス結果通知イベント
// //
type CoinTossResultEventToRecipient struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Payload       *payload.CoinTossPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CoinTossResultEventToRecipient) Reset() {
	*x = CoinTossResultEventToRecipient{}
	mi := &file_websocket_event_playing_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CoinTossResultEventToRecipient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinTossResultEventToRecipient) ProtoMessage() {}

func (x *CoinTossResultEventToRecipient) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinTossResultEventToRecipient.ProtoReflect.Descriptor instead.
func (*CoinTossResultEventToRecipient) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{37}
}

func (x *CoinTossResultEventToRecipient) GetPayload() *payload.CoinTossPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

// //
// ワザを打つために必要なエネルギー確認イベント
// //
type ConfirmEnergyEventToServer struct {
	state         protoimpl.MessageState                `protogen:"open.v1"`
	Payload       *payload.ConfirmEnergyResponsePayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfirmEnergyEventToServer) Reset() {
	*x = ConfirmEnergyEventToServer{}
	mi := &file_websocket_event_playing_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfirmEnergyEventToServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmEnergyEventToServer) ProtoMessage() {}

func (x *ConfirmEnergyEventToServer) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmEnergyEventToServer.ProtoReflect.Descriptor instead.
func (*ConfirmEnergyEventToServer) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{38}
}

func (x *ConfirmEnergyEventToServer) GetPayload() *payload.ConfirmEnergyResponsePayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type ConfirmEnergyEventToActor struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	Payload       *payload.ConfirmEnergyRequestPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfirmEnergyEventToActor) Reset() {
	*x = ConfirmEnergyEventToActor{}
	mi := &file_websocket_event_playing_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfirmEnergyEventToActor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmEnergyEventToActor) ProtoMessage() {}

func (x *ConfirmEnergyEventToActor) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmEnergyEventToActor.ProtoReflect.Descriptor instead.
func (*ConfirmEnergyEventToActor) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{39}
}

func (x *ConfirmEnergyEventToActor) GetPayload() *payload.ConfirmEnergyRequestPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

// //
// ワザを打つために必要なターゲット指定イベント
// //
type ConfirmTargetEventToServer struct {
	state         protoimpl.MessageState                `protogen:"open.v1"`
	Payload       *payload.ConfirmTargetResponsePayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfirmTargetEventToServer) Reset() {
	*x = ConfirmTargetEventToServer{}
	mi := &file_websocket_event_playing_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfirmTargetEventToServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmTargetEventToServer) ProtoMessage() {}

func (x *ConfirmTargetEventToServer) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmTargetEventToServer.ProtoReflect.Descriptor instead.
func (*ConfirmTargetEventToServer) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{40}
}

func (x *ConfirmTargetEventToServer) GetPayload() *payload.ConfirmTargetResponsePayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type ConfirmTargetEventToActor struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	Payload       *payload.ConfirmTargetRequestPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfirmTargetEventToActor) Reset() {
	*x = ConfirmTargetEventToActor{}
	mi := &file_websocket_event_playing_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfirmTargetEventToActor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmTargetEventToActor) ProtoMessage() {}

func (x *ConfirmTargetEventToActor) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmTargetEventToActor.ProtoReflect.Descriptor instead.
func (*ConfirmTargetEventToActor) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{41}
}

func (x *ConfirmTargetEventToActor) GetPayload() *payload.ConfirmTargetRequestPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

// //
// 次のエネルギーの取得イベント
// //
type NextEnergyEventToActor struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Payload       *payload.NextEnergyPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NextEnergyEventToActor) Reset() {
	*x = NextEnergyEventToActor{}
	mi := &file_websocket_event_playing_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NextEnergyEventToActor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextEnergyEventToActor) ProtoMessage() {}

func (x *NextEnergyEventToActor) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextEnergyEventToActor.ProtoReflect.Descriptor instead.
func (*NextEnergyEventToActor) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{42}
}

func (x *NextEnergyEventToActor) GetPayload() *payload.NextEnergyPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

// //
// 描画する必要のあるイベント通知イベント
// //
type DrawEffectEventToActor struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Payload       *payload.DrawEffectPayloadToActor `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DrawEffectEventToActor) Reset() {
	*x = DrawEffectEventToActor{}
	mi := &file_websocket_event_playing_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DrawEffectEventToActor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawEffectEventToActor) ProtoMessage() {}

func (x *DrawEffectEventToActor) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawEffectEventToActor.ProtoReflect.Descriptor instead.
func (*DrawEffectEventToActor) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{43}
}

func (x *DrawEffectEventToActor) GetPayload() *payload.DrawEffectPayloadToActor {
	if x != nil {
		return x.Payload
	}
	return nil
}

type DrawEffectEventToRecipient struct {
	state         protoimpl.MessageState                `protogen:"open.v1"`
	Payload       *payload.DrawEffectPayloadToRecipient `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DrawEffectEventToRecipient) Reset() {
	*x = DrawEffectEventToRecipient{}
	mi := &file_websocket_event_playing_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DrawEffectEventToRecipient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawEffectEventToRecipient) ProtoMessage() {}

func (x *DrawEffectEventToRecipient) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawEffectEventToRecipient.ProtoReflect.Descriptor instead.
func (*DrawEffectEventToRecipient) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{44}
}

func (x *DrawEffectEventToRecipient) GetPayload() *payload.DrawEffectPayloadToRecipient {
	if x != nil {
		return x.Payload
	}
	return nil
}

// //
// バトル場が空いた時にバトル場に置くカードを選択するイベント(クライアントへの通知はDrawEffectEventを用いる)
// //
type SelectBattlePositionEventToServer struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	Payload       *payload.SelectBattlePositionPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SelectBattlePositionEventToServer) Reset() {
	*x = SelectBattlePositionEventToServer{}
	mi := &file_websocket_event_playing_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SelectBattlePositionEventToServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectBattlePositionEventToServer) ProtoMessage() {}

func (x *SelectBattlePositionEventToServer) ProtoReflect() protoreflect.Message {
	mi := &file_websocket_event_playing_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectBattlePositionEventToServer.ProtoReflect.Descriptor instead.
func (*SelectBattlePositionEventToServer) Descriptor() ([]byte, []int) {
	return file_websocket_event_playing_proto_rawDescGZIP(), []int{45}
}

func (x *SelectBattlePositionEventToServer) GetPayload() *payload.SelectBattlePositionPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

var File_websocket_event_playing_proto protoreflect.FileDescriptor

var file_websocket_event_playing_proto_rawDesc = string([]byte{
	0x0a, 0x1d, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x17, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x1a, 0x1f, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x2f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2f, 0x70, 0x6c, 0x61, 0x79,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x67, 0x0a, 0x1a, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0x7e, 0x0a, 0x19, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x49, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x1d, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x6e,
	0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e,
	0x67, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x1a, 0x53, 0x75, 0x6d, 0x6d, 0x6f,
	0x6e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69,
	0x6e, 0x67, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x22, 0x7e, 0x0a, 0x19, 0x53, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x49, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x6f,
	0x6e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x82, 0x01, 0x0a, 0x1d, 0x53, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x49, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e,
	0x53, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x6d, 0x0a, 0x1d, 0x45, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x79,
	0x69, 0x6e, 0x67, 0x2e, 0x45, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e,
	0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x1c, 0x45, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x4c, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69,
	0x6e, 0x67, 0x2e, 0x45, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x20,
	0x45, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x4c, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x76,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x18, 0x54, 0x61, 0x6b, 0x65, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x47, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e,
	0x54, 0x61, 0x6b, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x7a, 0x0a, 0x17, 0x54,
	0x61, 0x6b, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x47, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x79,
	0x69, 0x6e, 0x67, 0x2e, 0x54, 0x61, 0x6b, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x1b, 0x54, 0x61, 0x6b, 0x65, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x79,
	0x69, 0x6e, 0x67, 0x2e, 0x54, 0x61, 0x6b, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x16, 0x54, 0x61, 0x6b, 0x65, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x45, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x54,
	0x61, 0x6b, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x76, 0x0a, 0x15, 0x54, 0x61, 0x6b, 0x65,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x45, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x54,
	0x61, 0x6b, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x7a, 0x0a, 0x19, 0x54, 0x61, 0x6b, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x61, 0x6b, 0x65, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x14,
	0x52, 0x65, 0x74, 0x72, 0x65, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e,
	0x67, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x65, 0x61, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x72, 0x0a, 0x13, 0x52, 0x65, 0x74,
	0x72, 0x65, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x43, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65,
	0x74, 0x72, 0x65, 0x61, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x76, 0x0a,
	0x17, 0x52, 0x65, 0x74, 0x72, 0x65, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x77, 0x65, 0x62, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x6c,
	0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x65, 0x61, 0x74, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x65, 0x0a, 0x19, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x45,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x48, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x7c, 0x0a, 0x18,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x48, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x77, 0x65, 0x62, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x6c,
	0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x1c, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x77,
	0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x45,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5f, 0x0a,
	0x16, 0x53, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x76,
	0x0a, 0x15, 0x53, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x45, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x7a, 0x0a, 0x19, 0x53, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67,
	0x2e, 0x53, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x5b, 0x0a, 0x14, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x77, 0x65,
	0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22,
	0x72, 0x0a, 0x13, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x79,
	0x69, 0x6e, 0x67, 0x2e, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x76, 0x0a, 0x17, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x43,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x11, 0x44,
	0x72, 0x61, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x44, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x72,
	0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x7a, 0x0a, 0x10, 0x44, 0x72, 0x61, 0x77, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x4e, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x77, 0x65,
	0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64,
	0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x74, 0x0a, 0x14, 0x44, 0x72, 0x61, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x77, 0x65,
	0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x66, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x49, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69,
	0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x22, 0x7d, 0x0a, 0x25, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x77, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22,
	0x60, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x72, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x77, 0x65,
	0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x22, 0x60, 0x0a, 0x17, 0x54, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x75, 0x72, 0x6e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x22, 0x5c, 0x0a, 0x15, 0x54, 0x75, 0x72, 0x6e, 0x45, 0x6e, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x75, 0x72, 0x6e, 0x45, 0x6e,
	0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x22, 0x62, 0x0a, 0x15, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x73, 0x73, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x65,
	0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x73, 0x73,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x5c, 0x0a, 0x14, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x73,
	0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x44, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x54,
	0x6f, 0x73, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x22, 0x66, 0x0a, 0x1e, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x73, 0x73, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69,
	0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x73, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x6f, 0x0a, 0x1a, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x77, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x45, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x6d, 0x0a, 0x19,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x50, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x77, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x45, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x6f, 0x0a, 0x1a, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x77, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x6d, 0x0a, 0x19,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x50, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x77, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x60, 0x0a, 0x16, 0x4e,
	0x65, 0x78, 0x74, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x46, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69,
	0x6e, 0x67, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x67, 0x0a,
	0x16, 0x44, 0x72, 0x61, 0x77, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x4d, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x6f, 0x0a, 0x1a, 0x44, 0x72, 0x61, 0x77, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e,
	0x67, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x75, 0x0a, 0x21, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0xf8,
	0x01, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x42, 0x0c,
	0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4d,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x6d, 0x61, 0x74,
	0x6f, 0x30, 0x32, 0x31, 0x31, 0x2f, 0x62, 0x72, 0x61, 0x63, 0x68, 0x69, 0x6f, 0x2d, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x77, 0x65,
	0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0xa2, 0x02, 0x03,
	0x57, 0x45, 0x50, 0xaa, 0x02, 0x17, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0xca, 0x02, 0x17,
	0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5c,
	0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0xe2, 0x02, 0x23, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e,
	0x67, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x19,
	0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x3a, 0x3a, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
})

var (
	file_websocket_event_playing_proto_rawDescOnce sync.Once
	file_websocket_event_playing_proto_rawDescData []byte
)

func file_websocket_event_playing_proto_rawDescGZIP() []byte {
	file_websocket_event_playing_proto_rawDescOnce.Do(func() {
		file_websocket_event_playing_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_websocket_event_playing_proto_rawDesc), len(file_websocket_event_playing_proto_rawDesc)))
	})
	return file_websocket_event_playing_proto_rawDescData
}

var file_websocket_event_playing_proto_msgTypes = make([]protoimpl.MessageInfo, 46)
var file_websocket_event_playing_proto_goTypes = []any{
	(*AttackMonsterEventToServer)(nil),              // 0: websocket.event.playing.AttackMonsterEventToServer
	(*AttackMonsterEventToActor)(nil),               // 1: websocket.event.playing.AttackMonsterEventToActor
	(*AttackMonsterEventToRecipient)(nil),           // 2: websocket.event.playing.AttackMonsterEventToRecipient
	(*SummonMonsterEventToServer)(nil),              // 3: websocket.event.playing.SummonMonsterEventToServer
	(*SummonMonsterEventToActor)(nil),               // 4: websocket.event.playing.SummonMonsterEventToActor
	(*SummonMonsterEventToRecipient)(nil),           // 5: websocket.event.playing.SummonMonsterEventToRecipient
	(*EvolutionMonsterEventToServer)(nil),           // 6: websocket.event.playing.EvolutionMonsterEventToServer
	(*EvolutionMonsterEventToActor)(nil),            // 7: websocket.event.playing.EvolutionMonsterEventToActor
	(*EvolutionMonsterEventToRecipient)(nil),        // 8: websocket.event.playing.EvolutionMonsterEventToRecipient
	(*TakeSupportEventToServer)(nil),                // 9: websocket.event.playing.TakeSupportEventToServer
	(*TakeSupportEventToActor)(nil),                 // 10: websocket.event.playing.TakeSupportEventToActor
	(*TakeSupportEventToRecipient)(nil),             // 11: websocket.event.playing.TakeSupportEventToRecipient
	(*TakeGoodsEventToServer)(nil),                  // 12: websocket.event.playing.TakeGoodsEventToServer
	(*TakeGoodsEventToActor)(nil),                   // 13: websocket.event.playing.TakeGoodsEventToActor
	(*TakeGoodsEventToRecipient)(nil),               // 14: websocket.event.playing.TakeGoodsEventToRecipient
	(*RetreatEventToServer)(nil),                    // 15: websocket.event.playing.RetreatEventToServer
	(*RetreatEventToActor)(nil),                     // 16: websocket.event.playing.RetreatEventToActor
	(*RetreatEventToRecipient)(nil),                 // 17: websocket.event.playing.RetreatEventToRecipient
	(*SupplyEnergyEventToServer)(nil),               // 18: websocket.event.playing.SupplyEnergyEventToServer
	(*SupplyEnergyEventToActor)(nil),                // 19: websocket.event.playing.SupplyEnergyEventToActor
	(*SupplyEnergyEventToRecipient)(nil),            // 20: websocket.event.playing.SupplyEnergyEventToRecipient
	(*SurrenderEventToServer)(nil),                  // 21: websocket.event.playing.SurrenderEventToServer
	(*SurrenderEventToActor)(nil),                   // 22: websocket.event.playing.SurrenderEventToActor
	(*SurrenderEventToRecipient)(nil),               // 23: websocket.event.playing.SurrenderEventToRecipient
	(*AbilityEventToServer)(nil),                    // 24: websocket.event.playing.AbilityEventToServer
	(*AbilityEventToActor)(nil),                     // 25: websocket.event.playing.AbilityEventToActor
	(*AbilityEventToRecipient)(nil),                 // 26: websocket.event.playing.AbilityEventToRecipient
	(*DrawEventToServer)(nil),                       // 27: websocket.event.playing.DrawEventToServer
	(*DrawEventToActor)(nil),                        // 28: websocket.event.playing.DrawEventToActor
	(*DrawEventToRecipient)(nil),                    // 29: websocket.event.playing.DrawEventToRecipient
	(*ConfirmActionEventToActor)(nil),               // 30: websocket.event.playing.ConfirmActionEventToActor
	(*InitialPlacementCompleteEventToServer)(nil),   // 31: websocket.event.playing.InitialPlacementCompleteEventToServer
	(*StartGameEventToClients)(nil),                 // 32: websocket.event.playing.StartGameEventToClients
	(*TurnStartEventToClients)(nil),                 // 33: websocket.event.playing.TurnStartEventToClients
	(*TurnEndEventToClients)(nil),                   // 34: websocket.event.playing.TurnEndEventToClients
	(*CoinTossEventToServer)(nil),                   // 35: websocket.event.playing.CoinTossEventToServer
	(*CoinTossEventToActor)(nil),                    // 36: websocket.event.playing.CoinTossEventToActor
	(*CoinTossResultEventToRecipient)(nil),          // 37: websocket.event.playing.CoinTossResultEventToRecipient
	(*ConfirmEnergyEventToServer)(nil),              // 38: websocket.event.playing.ConfirmEnergyEventToServer
	(*ConfirmEnergyEventToActor)(nil),               // 39: websocket.event.playing.ConfirmEnergyEventToActor
	(*ConfirmTargetEventToServer)(nil),              // 40: websocket.event.playing.ConfirmTargetEventToServer
	(*ConfirmTargetEventToActor)(nil),               // 41: websocket.event.playing.ConfirmTargetEventToActor
	(*NextEnergyEventToActor)(nil),                  // 42: websocket.event.playing.NextEnergyEventToActor
	(*DrawEffectEventToActor)(nil),                  // 43: websocket.event.playing.DrawEffectEventToActor
	(*DrawEffectEventToRecipient)(nil),              // 44: websocket.event.playing.DrawEffectEventToRecipient
	(*SelectBattlePositionEventToServer)(nil),       // 45: websocket.event.playing.SelectBattlePositionEventToServer
	(*payload.AttackMonsterPayload)(nil),            // 46: websocket.payload.playing.AttackMonsterPayload
	(*payload.SummonMonsterPayload)(nil),            // 47: websocket.payload.playing.SummonMonsterPayload
	(*payload.EvolutionMonsterPayload)(nil),         // 48: websocket.payload.playing.EvolutionMonsterPayload
	(*payload.TakeSupportPayload)(nil),              // 49: websocket.payload.playing.TakeSupportPayload
	(*payload.TakeGoodsPayload)(nil),                // 50: websocket.payload.playing.TakeGoodsPayload
	(*payload.RetreatPayload)(nil),                  // 51: websocket.payload.playing.RetreatPayload
	(*payload.SupplyEnergyPayload)(nil),             // 52: websocket.payload.playing.SupplyEnergyPayload
	(*payload.SurrenderPayload)(nil),                // 53: websocket.payload.playing.SurrenderPayload
	(*payload.AbilityPayload)(nil),                  // 54: websocket.payload.playing.AbilityPayload
	(*payload.DrawCardPayload)(nil),                 // 55: websocket.payload.playing.DrawCardPayload
	(*payload.DrawCardIndividualPayload)(nil),       // 56: websocket.payload.playing.DrawCardIndividualPayload
	(*payload.ConfirmActionPayload)(nil),            // 57: websocket.payload.playing.ConfirmActionPayload
	(*payload.InitialPlacementCompletePayload)(nil), // 58: websocket.payload.playing.InitialPlacementCompletePayload
	(*payload.StartGamePayload)(nil),                // 59: websocket.payload.playing.StartGamePayload
	(*payload.TurnStartPayload)(nil),                // 60: websocket.payload.playing.TurnStartPayload
	(*payload.TurnEndPayload)(nil),                  // 61: websocket.payload.playing.TurnEndPayload
	(*payload.CoinTossEmptyPayload)(nil),            // 62: websocket.payload.playing.CoinTossEmptyPayload
	(*payload.CoinTossPayload)(nil),                 // 63: websocket.payload.playing.CoinTossPayload
	(*payload.ConfirmEnergyResponsePayload)(nil),    // 64: websocket.payload.playing.ConfirmEnergyResponsePayload
	(*payload.ConfirmEnergyRequestPayload)(nil),     // 65: websocket.payload.playing.ConfirmEnergyRequestPayload
	(*payload.ConfirmTargetResponsePayload)(nil),    // 66: websocket.payload.playing.ConfirmTargetResponsePayload
	(*payload.ConfirmTargetRequestPayload)(nil),     // 67: websocket.payload.playing.ConfirmTargetRequestPayload
	(*payload.NextEnergyPayload)(nil),               // 68: websocket.payload.playing.NextEnergyPayload
	(*payload.DrawEffectPayloadToActor)(nil),        // 69: websocket.payload.playing.DrawEffectPayloadToActor
	(*payload.DrawEffectPayloadToRecipient)(nil),    // 70: websocket.payload.playing.DrawEffectPayloadToRecipient
	(*payload.SelectBattlePositionPayload)(nil),     // 71: websocket.payload.playing.SelectBattlePositionPayload
}
var file_websocket_event_playing_proto_depIdxs = []int32{
	46, // 0: websocket.event.playing.AttackMonsterEventToServer.payload:type_name -> websocket.payload.playing.AttackMonsterPayload
	46, // 1: websocket.event.playing.AttackMonsterEventToActor.payload:type_name -> websocket.payload.playing.AttackMonsterPayload
	46, // 2: websocket.event.playing.AttackMonsterEventToRecipient.payload:type_name -> websocket.payload.playing.AttackMonsterPayload
	47, // 3: websocket.event.playing.SummonMonsterEventToServer.payload:type_name -> websocket.payload.playing.SummonMonsterPayload
	47, // 4: websocket.event.playing.SummonMonsterEventToActor.payload:type_name -> websocket.payload.playing.SummonMonsterPayload
	47, // 5: websocket.event.playing.SummonMonsterEventToRecipient.payload:type_name -> websocket.payload.playing.SummonMonsterPayload
	48, // 6: websocket.event.playing.EvolutionMonsterEventToServer.payload:type_name -> websocket.payload.playing.EvolutionMonsterPayload
	48, // 7: websocket.event.playing.EvolutionMonsterEventToActor.payload:type_name -> websocket.payload.playing.EvolutionMonsterPayload
	48, // 8: websocket.event.playing.EvolutionMonsterEventToRecipient.payload:type_name -> websocket.payload.playing.EvolutionMonsterPayload
	49, // 9: websocket.event.playing.TakeSupportEventToServer.payload:type_name -> websocket.payload.playing.TakeSupportPayload
	49, // 10: websocket.event.playing.TakeSupportEventToActor.payload:type_name -> websocket.payload.playing.TakeSupportPayload
	49, // 11: websocket.event.playing.TakeSupportEventToRecipient.payload:type_name -> websocket.payload.playing.TakeSupportPayload
	50, // 12: websocket.event.playing.TakeGoodsEventToServer.payload:type_name -> websocket.payload.playing.TakeGoodsPayload
	50, // 13: websocket.event.playing.TakeGoodsEventToActor.payload:type_name -> websocket.payload.playing.TakeGoodsPayload
	50, // 14: websocket.event.playing.TakeGoodsEventToRecipient.payload:type_name -> websocket.payload.playing.TakeGoodsPayload
	51, // 15: websocket.event.playing.RetreatEventToServer.payload:type_name -> websocket.payload.playing.RetreatPayload
	51, // 16: websocket.event.playing.RetreatEventToActor.payload:type_name -> websocket.payload.playing.RetreatPayload
	51, // 17: websocket.event.playing.RetreatEventToRecipient.payload:type_name -> websocket.payload.playing.RetreatPayload
	52, // 18: websocket.event.playing.SupplyEnergyEventToServer.payload:type_name -> websocket.payload.playing.SupplyEnergyPayload
	52, // 19: websocket.event.playing.SupplyEnergyEventToActor.payload:type_name -> websocket.payload.playing.SupplyEnergyPayload
	52, // 20: websocket.event.playing.SupplyEnergyEventToRecipient.payload:type_name -> websocket.payload.playing.SupplyEnergyPayload
	53, // 21: websocket.event.playing.SurrenderEventToServer.payload:type_name -> websocket.payload.playing.SurrenderPayload
	53, // 22: websocket.event.playing.SurrenderEventToActor.payload:type_name -> websocket.payload.playing.SurrenderPayload
	53, // 23: websocket.event.playing.SurrenderEventToRecipient.payload:type_name -> websocket.payload.playing.SurrenderPayload
	54, // 24: websocket.event.playing.AbilityEventToServer.payload:type_name -> websocket.payload.playing.AbilityPayload
	54, // 25: websocket.event.playing.AbilityEventToActor.payload:type_name -> websocket.payload.playing.AbilityPayload
	54, // 26: websocket.event.playing.AbilityEventToRecipient.payload:type_name -> websocket.payload.playing.AbilityPayload
	55, // 27: websocket.event.playing.DrawEventToServer.payload:type_name -> websocket.payload.playing.DrawCardPayload
	56, // 28: websocket.event.playing.DrawEventToActor.payload:type_name -> websocket.payload.playing.DrawCardIndividualPayload
	55, // 29: websocket.event.playing.DrawEventToRecipient.payload:type_name -> websocket.payload.playing.DrawCardPayload
	57, // 30: websocket.event.playing.ConfirmActionEventToActor.payload:type_name -> websocket.payload.playing.ConfirmActionPayload
	58, // 31: websocket.event.playing.InitialPlacementCompleteEventToServer.payload:type_name -> websocket.payload.playing.InitialPlacementCompletePayload
	59, // 32: websocket.event.playing.StartGameEventToClients.payload:type_name -> websocket.payload.playing.StartGamePayload
	60, // 33: websocket.event.playing.TurnStartEventToClients.payload:type_name -> websocket.payload.playing.TurnStartPayload
	61, // 34: websocket.event.playing.TurnEndEventToClients.payload:type_name -> websocket.payload.playing.TurnEndPayload
	62, // 35: websocket.event.playing.CoinTossEventToServer.payload:type_name -> websocket.payload.playing.CoinTossEmptyPayload
	63, // 36: websocket.event.playing.CoinTossEventToActor.payload:type_name -> websocket.payload.playing.CoinTossPayload
	63, // 37: websocket.event.playing.CoinTossResultEventToRecipient.payload:type_name -> websocket.payload.playing.CoinTossPayload
	64, // 38: websocket.event.playing.ConfirmEnergyEventToServer.payload:type_name -> websocket.payload.playing.ConfirmEnergyResponsePayload
	65, // 39: websocket.event.playing.ConfirmEnergyEventToActor.payload:type_name -> websocket.payload.playing.ConfirmEnergyRequestPayload
	66, // 40: websocket.event.playing.ConfirmTargetEventToServer.payload:type_name -> websocket.payload.playing.ConfirmTargetResponsePayload
	67, // 41: websocket.event.playing.ConfirmTargetEventToActor.payload:type_name -> websocket.payload.playing.ConfirmTargetRequestPayload
	68, // 42: websocket.event.playing.NextEnergyEventToActor.payload:type_name -> websocket.payload.playing.NextEnergyPayload
	69, // 43: websocket.event.playing.DrawEffectEventToActor.payload:type_name -> websocket.payload.playing.DrawEffectPayloadToActor
	70, // 44: websocket.event.playing.DrawEffectEventToRecipient.payload:type_name -> websocket.payload.playing.DrawEffectPayloadToRecipient
	71, // 45: websocket.event.playing.SelectBattlePositionEventToServer.payload:type_name -> websocket.payload.playing.SelectBattlePositionPayload
	46, // [46:46] is the sub-list for method output_type
	46, // [46:46] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_websocket_event_playing_proto_init() }
func file_websocket_event_playing_proto_init() {
	if File_websocket_event_playing_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_websocket_event_playing_proto_rawDesc), len(file_websocket_event_playing_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   46,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_websocket_event_playing_proto_goTypes,
		DependencyIndexes: file_websocket_event_playing_proto_depIdxs,
		MessageInfos:      file_websocket_event_playing_proto_msgTypes,
	}.Build()
	File_websocket_event_playing_proto = out.File
	file_websocket_event_playing_proto_goTypes = nil
	file_websocket_event_playing_proto_depIdxs = nil
}
