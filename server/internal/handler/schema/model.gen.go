// Package schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package schema

import (
	"encoding/json"

	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for Element.
const (
	Darkness  Element = "Darkness"
	Dragon    Element = "Dragon"
	Fighting  Element = "Fighting"
	Fire      Element = "Fire"
	Grass     Element = "Grass"
	Lightning Element = "Lightning"
	Metal     Element = "Metal"
	Normal    Element = "Normal"
	Psychic   Element = "Psychic"
	Water     Element = "Water"
)

// Defines values for GoodsCardCardType.
const (
	GoodsCardCardTypeGoods     GoodsCardCardType = "Goods"
	GoodsCardCardTypeMonster   GoodsCardCardType = "Monster"
	GoodsCardCardTypeSupporter GoodsCardCardType = "Supporter"
)

// Defines values for MonsterCardCardType.
const (
	MonsterCardCardTypeGoods     MonsterCardCardType = "Goods"
	MonsterCardCardTypeMonster   MonsterCardCardType = "Monster"
	MonsterCardCardTypeSupporter MonsterCardCardType = "Supporter"
)

// Defines values for MonsterCardSubType.
const (
	Basic  MonsterCardSubType = "Basic"
	Stage1 MonsterCardSubType = "Stage1"
	Stage2 MonsterCardSubType = "Stage2"
)

// Defines values for SupporterCardCardType.
const (
	Goods     SupporterCardCardType = "Goods"
	Monster   SupporterCardCardType = "Monster"
	Supporter SupporterCardCardType = "Supporter"
)

// Card defines model for Card.
type Card struct {
	union json.RawMessage
}

// Deck defines model for Deck.
type Deck struct {
	// Cards カードリスト
	Cards *[]Card `json:"cards,omitempty"`

	// Elements エネルギーの属性
	Elements *[]Element `json:"elements,omitempty"`

	// Id デッキID
	Id *string `json:"id,omitempty"`

	// Name デッキ名
	Name *string `json:"name,omitempty"`
}

// Element 属性
type Element string

// Gacha defines model for Gacha.
type Gacha struct {
	// Id ガチャID
	Id *string `json:"id,omitempty"`

	// ImageUrl ガチャ画像URL
	ImageUrl *string `json:"imageUrl,omitempty"`

	// Name ガチャ名
	Name *string `json:"name,omitempty"`
}

// GachaDrawRequest defines model for GachaDrawRequest.
type GachaDrawRequest struct {
	// IsTenDraw 10連ガチャかどうか
	IsTenDraw *bool `json:"isTenDraw,omitempty"`
}

// GachaDrawResponse defines model for GachaDrawResponse.
type GachaDrawResponse struct {
	// Packs ガチャで引いたカード
	Packs *[]Pack `json:"packs,omitempty"`
}

// GoodsCard defines model for GoodsCard.
type GoodsCard struct {
	// CardNumber カードナンバー
	CardNumber *int `json:"cardNumber,omitempty"`

	// CardType カードタイプ
	CardType *GoodsCardCardType `json:"cardType,omitempty"`

	// Effect 効果
	Effect *string `json:"effect,omitempty"`

	// Expansion 拡張パック名
	Expansion *string `json:"expansion,omitempty"`

	// Id 全ユーザーで一意に定まるID
	Id *string `json:"id,omitempty"`

	// ImageUrl カード画像URL
	ImageUrl *string `json:"imageUrl,omitempty"`

	// Name カード名
	Name *string `json:"name,omitempty"`

	// Rarity レアリティ
	Rarity *int `json:"rarity,omitempty"`
}

// GoodsCardCardType カードタイプ
type GoodsCardCardType string

// Item defines model for Item.
type Item struct {
	// Count 所持数
	Count *int `json:"count,omitempty"`

	// Id アイテムID（アイテムごとに一意）
	Id *string `json:"id,omitempty"`

	// Name アイテム名
	Name *string `json:"name,omitempty"`
}

// MonsterCard defines model for MonsterCard.
type MonsterCard struct {
	// CardNumber カードナンバー
	CardNumber *int `json:"cardNumber,omitempty"`

	// CardType カードタイプ
	CardType *MonsterCardCardType `json:"cardType,omitempty"`

	// Expansion 拡張パック名
	Expansion *string `json:"expansion,omitempty"`

	// Hp HP
	Hp *int `json:"hp,omitempty"`

	// Id 全ユーザーで一意に定まるID
	Id *string `json:"id,omitempty"`

	// ImageUrl カード画像URL
	ImageUrl *string `json:"imageUrl,omitempty"`

	// Name カード名
	Name *string `json:"name,omitempty"`

	// Rarity レアリティ
	Rarity *int `json:"rarity,omitempty"`

	// RetreatCost にげるコスト
	RetreatCost *int `json:"retreatCost,omitempty"`

	// Skills ワザ
	Skills *[]Skill `json:"skills,omitempty"`

	// SubType 進化段階 (たね, 1進化, 2進化)
	SubType *MonsterCardSubType `json:"subType,omitempty"`

	// Type 属性
	Type *Element `json:"type,omitempty"`

	// Weekness 属性
	Weekness *Element `json:"weekness,omitempty"`
}

// MonsterCardCardType カードタイプ
type MonsterCardCardType string

// MonsterCardSubType 進化段階 (たね, 1進化, 2進化)
type MonsterCardSubType string

// Pack カード5枚セット
type Pack struct {
	// Cards 中身
	Cards *[]Card `json:"cards,omitempty"`
}

// PackPower defines model for PackPower.
type PackPower struct {
	// Charged 現在溜まっているパックの数
	Charged *int `json:"charged,omitempty"`

	// Next 次のパックが貯まるまでの秒数
	Next *int `json:"next,omitempty"`
}

// Skill ワザ
type Skill struct {
	// Cost コスト
	Cost *[]Element `json:"cost,omitempty"`

	// Damage ダメージ
	Damage *int `json:"damage,omitempty"`

	// Name ワザ名
	Name *string `json:"name,omitempty"`

	// Text ワザの説明
	Text *string `json:"text,omitempty"`
}

// SupporterCard defines model for SupporterCard.
type SupporterCard struct {
	// CardNumber カードナンバー
	CardNumber *int `json:"cardNumber,omitempty"`

	// CardType カードタイプ
	CardType *SupporterCardCardType `json:"cardType,omitempty"`

	// Effect 効果
	Effect *string `json:"effect,omitempty"`

	// Expansion 拡張パック名
	Expansion *string `json:"expansion,omitempty"`

	// Id 全ユーザーで一意に定まるID
	Id *string `json:"id,omitempty"`

	// ImageUrl カード画像URL
	ImageUrl *string `json:"imageUrl,omitempty"`

	// Name カード名
	Name *string `json:"name,omitempty"`

	// Rarity レアリティ
	Rarity *int `json:"rarity,omitempty"`
}

// SupporterCardCardType カードタイプ
type SupporterCardCardType string

// PostMyDeckJSONRequestBody defines body for PostMyDeck for application/json ContentType.
type PostMyDeckJSONRequestBody = Deck

// PutMyDeckJSONRequestBody defines body for PutMyDeck for application/json ContentType.
type PutMyDeckJSONRequestBody = Deck

// PostGachaDrawJSONRequestBody defines body for PostGachaDraw for application/json ContentType.
type PostGachaDrawJSONRequestBody = GachaDrawRequest

// AsMonsterCard returns the union data inside the Card as a MonsterCard
func (t Card) AsMonsterCard() (MonsterCard, error) {
	var body MonsterCard
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMonsterCard overwrites any union data inside the Card as the provided MonsterCard
func (t *Card) FromMonsterCard(v MonsterCard) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMonsterCard performs a merge with any union data inside the Card, using the provided MonsterCard
func (t *Card) MergeMonsterCard(v MonsterCard) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSupporterCard returns the union data inside the Card as a SupporterCard
func (t Card) AsSupporterCard() (SupporterCard, error) {
	var body SupporterCard
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSupporterCard overwrites any union data inside the Card as the provided SupporterCard
func (t *Card) FromSupporterCard(v SupporterCard) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSupporterCard performs a merge with any union data inside the Card, using the provided SupporterCard
func (t *Card) MergeSupporterCard(v SupporterCard) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGoodsCard returns the union data inside the Card as a GoodsCard
func (t Card) AsGoodsCard() (GoodsCard, error) {
	var body GoodsCard
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGoodsCard overwrites any union data inside the Card as the provided GoodsCard
func (t *Card) FromGoodsCard(v GoodsCard) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGoodsCard performs a merge with any union data inside the Card, using the provided GoodsCard
func (t *Card) MergeGoodsCard(v GoodsCard) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Card) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Card) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
