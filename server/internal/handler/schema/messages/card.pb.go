// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: messages/card.proto

package messages

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//	message GoodsCard {
//	  // 効果
//	  string effect = 1;
//	  // 以下、共通のカード情報
//	  string id = 2;                 // 全ユーザーで一意に定まるID
//	  string name = 3;               // カード名
//	  int32 rarity = 4;              // レアリティ
//	  int32 card_number = 5;         // カードナンバー
//	  string expansion = 6;          // 拡張パック名
//	  common.CardType card_type = 7; // カードタイプ
//	  string image_url = 8;          // カード画像URL
//	}
type Card struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// masterCard は oneof でモンスター/サポーター/グッズのいずれか
	MasterCard *MasterCard `protobuf:"bytes,1,opt,name=master_card,json=masterCard,proto3" json:"master_card,omitempty"`
	// 個別のカードID
	Id            string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Card) Reset() {
	*x = Card{}
	mi := &file_messages_card_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_messages_card_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_messages_card_proto_rawDescGZIP(), []int{0}
}

func (x *Card) GetMasterCard() *MasterCard {
	if x != nil {
		return x.MasterCard
	}
	return nil
}

func (x *Card) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// マスターカードと枚数の組み合わせ
type MasterCardWithCount struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// マスターカード情報
	MasterCard *MasterCard `protobuf:"bytes,1,opt,name=master_card,json=masterCard,proto3" json:"master_card,omitempty"`
	// カード枚数
	Count         int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MasterCardWithCount) Reset() {
	*x = MasterCardWithCount{}
	mi := &file_messages_card_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MasterCardWithCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterCardWithCount) ProtoMessage() {}

func (x *MasterCardWithCount) ProtoReflect() protoreflect.Message {
	mi := &file_messages_card_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterCardWithCount.ProtoReflect.Descriptor instead.
func (*MasterCardWithCount) Descriptor() ([]byte, []int) {
	return file_messages_card_proto_rawDescGZIP(), []int{1}
}

func (x *MasterCardWithCount) GetMasterCard() *MasterCard {
	if x != nil {
		return x.MasterCard
	}
	return nil
}

func (x *MasterCardWithCount) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// マスターカード（oneof で各種カードに分岐）
type MasterCard struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to CardVariant:
	//
	//	*MasterCard_MasterMonsterCard
	//	*MasterCard_MasterSupporterCard
	//	*MasterCard_MasterGoodsCard
	CardVariant   isMasterCard_CardVariant `protobuf_oneof:"card_variant"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MasterCard) Reset() {
	*x = MasterCard{}
	mi := &file_messages_card_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MasterCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterCard) ProtoMessage() {}

func (x *MasterCard) ProtoReflect() protoreflect.Message {
	mi := &file_messages_card_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterCard.ProtoReflect.Descriptor instead.
func (*MasterCard) Descriptor() ([]byte, []int) {
	return file_messages_card_proto_rawDescGZIP(), []int{2}
}

func (x *MasterCard) GetCardVariant() isMasterCard_CardVariant {
	if x != nil {
		return x.CardVariant
	}
	return nil
}

func (x *MasterCard) GetMasterMonsterCard() *MasterMonsterCard {
	if x != nil {
		if x, ok := x.CardVariant.(*MasterCard_MasterMonsterCard); ok {
			return x.MasterMonsterCard
		}
	}
	return nil
}

func (x *MasterCard) GetMasterSupporterCard() *MasterSupporterCard {
	if x != nil {
		if x, ok := x.CardVariant.(*MasterCard_MasterSupporterCard); ok {
			return x.MasterSupporterCard
		}
	}
	return nil
}

func (x *MasterCard) GetMasterGoodsCard() *MasterGoodsCard {
	if x != nil {
		if x, ok := x.CardVariant.(*MasterCard_MasterGoodsCard); ok {
			return x.MasterGoodsCard
		}
	}
	return nil
}

type isMasterCard_CardVariant interface {
	isMasterCard_CardVariant()
}

type MasterCard_MasterMonsterCard struct {
	MasterMonsterCard *MasterMonsterCard `protobuf:"bytes,1,opt,name=master_monster_card,json=masterMonsterCard,proto3,oneof"`
}

type MasterCard_MasterSupporterCard struct {
	MasterSupporterCard *MasterSupporterCard `protobuf:"bytes,2,opt,name=master_supporter_card,json=masterSupporterCard,proto3,oneof"`
}

type MasterCard_MasterGoodsCard struct {
	MasterGoodsCard *MasterGoodsCard `protobuf:"bytes,3,opt,name=master_goods_card,json=masterGoodsCard,proto3,oneof"`
}

func (*MasterCard_MasterMonsterCard) isMasterCard_CardVariant() {}

func (*MasterCard_MasterSupporterCard) isMasterCard_CardVariant() {}

func (*MasterCard_MasterGoodsCard) isMasterCard_CardVariant() {}

// モンスターカード（マスターカードの一種）
// masterMonsterCard は masterCardBase の情報に加え、固有のプロパティを持つ
type MasterMonsterCard struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 共通プロパティ
	Base *MasterCardBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	// HP
	Hp int32 `protobuf:"varint,2,opt,name=hp,proto3" json:"hp,omitempty"`
	// 属性（element は必須）
	Element Element `protobuf:"varint,3,opt,name=element,proto3,enum=messages.common.Element" json:"element,omitempty"`
	// 弱点
	Weakness Element `protobuf:"varint,4,opt,name=weakness,proto3,enum=messages.common.Element" json:"weakness,omitempty"`
	// ワザのリスト
	Skills []*Skill `protobuf:"bytes,5,rep,name=skills,proto3" json:"skills,omitempty"`
	// 特性
	Ability *Ability `protobuf:"bytes,6,opt,name=ability,proto3" json:"ability,omitempty"`
	// 逃げるコスト
	RetreatCost int32 `protobuf:"varint,7,opt,name=retreat_cost,json=retreatCost,proto3" json:"retreat_cost,omitempty"`
	// 進化元
	EvolvesFrom []string `protobuf:"bytes,8,rep,name=evolves_from,json=evolvesFrom,proto3" json:"evolves_from,omitempty"`
	// 進化先
	EvolvesTo []string `protobuf:"bytes,9,rep,name=evolves_to,json=evolvesTo,proto3" json:"evolves_to,omitempty"`
	// サブタイプ
	SubType       SubType `protobuf:"varint,10,opt,name=sub_type,json=subType,proto3,enum=messages.common.SubType" json:"sub_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MasterMonsterCard) Reset() {
	*x = MasterMonsterCard{}
	mi := &file_messages_card_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MasterMonsterCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterMonsterCard) ProtoMessage() {}

func (x *MasterMonsterCard) ProtoReflect() protoreflect.Message {
	mi := &file_messages_card_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterMonsterCard.ProtoReflect.Descriptor instead.
func (*MasterMonsterCard) Descriptor() ([]byte, []int) {
	return file_messages_card_proto_rawDescGZIP(), []int{3}
}

func (x *MasterMonsterCard) GetBase() *MasterCardBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *MasterMonsterCard) GetHp() int32 {
	if x != nil {
		return x.Hp
	}
	return 0
}

func (x *MasterMonsterCard) GetElement() Element {
	if x != nil {
		return x.Element
	}
	return Element_ELEMENT_UNKNOWN
}

func (x *MasterMonsterCard) GetWeakness() Element {
	if x != nil {
		return x.Weakness
	}
	return Element_ELEMENT_UNKNOWN
}

func (x *MasterMonsterCard) GetSkills() []*Skill {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *MasterMonsterCard) GetAbility() *Ability {
	if x != nil {
		return x.Ability
	}
	return nil
}

func (x *MasterMonsterCard) GetRetreatCost() int32 {
	if x != nil {
		return x.RetreatCost
	}
	return 0
}

func (x *MasterMonsterCard) GetEvolvesFrom() []string {
	if x != nil {
		return x.EvolvesFrom
	}
	return nil
}

func (x *MasterMonsterCard) GetEvolvesTo() []string {
	if x != nil {
		return x.EvolvesTo
	}
	return nil
}

func (x *MasterMonsterCard) GetSubType() SubType {
	if x != nil {
		return x.SubType
	}
	return SubType_SUB_TYPE_UNSPECIFIED
}

// サポーターカード（マスターカードの一種）
// masterSupporterCard は masterCardBase に加えてテキスト情報を持つ
type MasterSupporterCard struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Base  *MasterCardBase        `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	// 説明文
	Text          string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MasterSupporterCard) Reset() {
	*x = MasterSupporterCard{}
	mi := &file_messages_card_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MasterSupporterCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterSupporterCard) ProtoMessage() {}

func (x *MasterSupporterCard) ProtoReflect() protoreflect.Message {
	mi := &file_messages_card_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterSupporterCard.ProtoReflect.Descriptor instead.
func (*MasterSupporterCard) Descriptor() ([]byte, []int) {
	return file_messages_card_proto_rawDescGZIP(), []int{4}
}

func (x *MasterSupporterCard) GetBase() *MasterCardBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *MasterSupporterCard) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// グッズカード（マスターカードの一種）
// masterGoodsCard は masterCardBase に加えてテキスト情報を持つ
type MasterGoodsCard struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Base  *MasterCardBase        `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	// 説明文
	Text          string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MasterGoodsCard) Reset() {
	*x = MasterGoodsCard{}
	mi := &file_messages_card_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MasterGoodsCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterGoodsCard) ProtoMessage() {}

func (x *MasterGoodsCard) ProtoReflect() protoreflect.Message {
	mi := &file_messages_card_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterGoodsCard.ProtoReflect.Descriptor instead.
func (*MasterGoodsCard) Descriptor() ([]byte, []int) {
	return file_messages_card_proto_rawDescGZIP(), []int{5}
}

func (x *MasterGoodsCard) GetBase() *MasterCardBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *MasterGoodsCard) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// 全カード共通のプロパティ
type MasterCardBase struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// カードID（readOnly）
	MasterCardId string `protobuf:"bytes,1,opt,name=master_card_id,json=masterCardId,proto3" json:"master_card_id,omitempty"`
	// カード名
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// カードタイプ
	CardType MasterCardType `protobuf:"varint,3,opt,name=card_type,json=cardType,proto3,enum=messages.common.MasterCardType" json:"card_type,omitempty"`
	// レアリティ
	Rarity int32 `protobuf:"varint,4,opt,name=rarity,proto3" json:"rarity,omitempty"`
	// カード画像URL
	ImageUrl string `protobuf:"bytes,5,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	// カードセット名
	Expansion     string `protobuf:"bytes,6,opt,name=expansion,proto3" json:"expansion,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MasterCardBase) Reset() {
	*x = MasterCardBase{}
	mi := &file_messages_card_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MasterCardBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterCardBase) ProtoMessage() {}

func (x *MasterCardBase) ProtoReflect() protoreflect.Message {
	mi := &file_messages_card_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterCardBase.ProtoReflect.Descriptor instead.
func (*MasterCardBase) Descriptor() ([]byte, []int) {
	return file_messages_card_proto_rawDescGZIP(), []int{6}
}

func (x *MasterCardBase) GetMasterCardId() string {
	if x != nil {
		return x.MasterCardId
	}
	return ""
}

func (x *MasterCardBase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MasterCardBase) GetCardType() MasterCardType {
	if x != nil {
		return x.CardType
	}
	return MasterCardType_MASTER_CARD_TYPE_UNSPECIFIED
}

func (x *MasterCardBase) GetRarity() int32 {
	if x != nil {
		return x.Rarity
	}
	return 0
}

func (x *MasterCardBase) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *MasterCardBase) GetExpansion() string {
	if x != nil {
		return x.Expansion
	}
	return ""
}

var File_messages_card_proto protoreflect.FileDescriptor

var file_messages_card_proto_rawDesc = string([]byte{
	0x0a, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x63, 0x61, 0x72, 0x64, 0x1a, 0x14, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2f, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x52, 0x0a, 0x04, 0x43, 0x61, 0x72,
	0x64, 0x12, 0x3a, 0x0a, 0x0b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x0a, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x67, 0x0a,
	0x13, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x57, 0x69, 0x74, 0x68, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x0a, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x98, 0x02, 0x0a, 0x0a, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x61, 0x72, 0x64, 0x12, 0x52, 0x0a, 0x13, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f,
	0x6e, 0x73, 0x74, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x12, 0x58, 0x0a, 0x15, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x13,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x43,
	0x61, 0x72, 0x64, 0x12, 0x4c, 0x0a, 0x11, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x61, 0x72, 0x64, 0x48, 0x00,
	0x52, 0x0f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43, 0x61, 0x72,
	0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x22, 0xbe, 0x03, 0x0a, 0x11, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x68, 0x70, 0x12, 0x32, 0x0a, 0x07, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34,
	0x0a, 0x08, 0x77, 0x65, 0x61, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x77, 0x65, 0x61, 0x6b,
	0x6e, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x06, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x07, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72,
	0x65, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x72, 0x65, 0x74, 0x72, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x65,
	0x76, 0x6f, 0x6c, 0x76, 0x65, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x65, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x73, 0x54, 0x6f, 0x12, 0x33, 0x0a,
	0x08, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x5c, 0x0a, 0x13, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x61,
	0x72, 0x64, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x22, 0x58, 0x0a, 0x0f, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x43,
	0x61, 0x72, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x72,
	0x64, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0xdb, 0x01, 0x0a, 0x0e, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x42, 0x61, 0x73, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x61, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78,
	0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65,
	0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0xbb, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x42, 0x09,
	0x43, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x46, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x6d, 0x61, 0x74, 0x6f, 0x30, 0x32,
	0x31, 0x31, 0x2f, 0x62, 0x72, 0x61, 0x63, 0x68, 0x69, 0x6f, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x72, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0xa2, 0x02, 0x03, 0x4d, 0x43, 0x58, 0xaa, 0x02, 0x0d, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x64, 0xca, 0x02, 0x0d, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5c, 0x43, 0x61, 0x72, 0x64, 0xe2, 0x02, 0x19, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5c, 0x43, 0x61, 0x72, 0x64, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x3a, 0x3a, 0x43, 0x61, 0x72, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_messages_card_proto_rawDescOnce sync.Once
	file_messages_card_proto_rawDescData []byte
)

func file_messages_card_proto_rawDescGZIP() []byte {
	file_messages_card_proto_rawDescOnce.Do(func() {
		file_messages_card_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_messages_card_proto_rawDesc), len(file_messages_card_proto_rawDesc)))
	})
	return file_messages_card_proto_rawDescData
}

var file_messages_card_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_messages_card_proto_goTypes = []any{
	(*Card)(nil),                // 0: messages.card.Card
	(*MasterCardWithCount)(nil), // 1: messages.card.MasterCardWithCount
	(*MasterCard)(nil),          // 2: messages.card.MasterCard
	(*MasterMonsterCard)(nil),   // 3: messages.card.MasterMonsterCard
	(*MasterSupporterCard)(nil), // 4: messages.card.MasterSupporterCard
	(*MasterGoodsCard)(nil),     // 5: messages.card.MasterGoodsCard
	(*MasterCardBase)(nil),      // 6: messages.card.MasterCardBase
	(Element)(0),                // 7: messages.common.Element
	(*Skill)(nil),               // 8: messages.skill.Skill
	(*Ability)(nil),             // 9: messages.ability.Ability
	(SubType)(0),                // 10: messages.common.SubType
	(MasterCardType)(0),         // 11: messages.common.MasterCardType
}
var file_messages_card_proto_depIdxs = []int32{
	2,  // 0: messages.card.Card.master_card:type_name -> messages.card.MasterCard
	2,  // 1: messages.card.MasterCardWithCount.master_card:type_name -> messages.card.MasterCard
	3,  // 2: messages.card.MasterCard.master_monster_card:type_name -> messages.card.MasterMonsterCard
	4,  // 3: messages.card.MasterCard.master_supporter_card:type_name -> messages.card.MasterSupporterCard
	5,  // 4: messages.card.MasterCard.master_goods_card:type_name -> messages.card.MasterGoodsCard
	6,  // 5: messages.card.MasterMonsterCard.base:type_name -> messages.card.MasterCardBase
	7,  // 6: messages.card.MasterMonsterCard.element:type_name -> messages.common.Element
	7,  // 7: messages.card.MasterMonsterCard.weakness:type_name -> messages.common.Element
	8,  // 8: messages.card.MasterMonsterCard.skills:type_name -> messages.skill.Skill
	9,  // 9: messages.card.MasterMonsterCard.ability:type_name -> messages.ability.Ability
	10, // 10: messages.card.MasterMonsterCard.sub_type:type_name -> messages.common.SubType
	6,  // 11: messages.card.MasterSupporterCard.base:type_name -> messages.card.MasterCardBase
	6,  // 12: messages.card.MasterGoodsCard.base:type_name -> messages.card.MasterCardBase
	11, // 13: messages.card.MasterCardBase.card_type:type_name -> messages.common.MasterCardType
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_messages_card_proto_init() }
func file_messages_card_proto_init() {
	if File_messages_card_proto != nil {
		return
	}
	file_messages_skill_proto_init()
	file_messages_ability_proto_init()
	file_messages_common_proto_init()
	file_messages_card_proto_msgTypes[2].OneofWrappers = []any{
		(*MasterCard_MasterMonsterCard)(nil),
		(*MasterCard_MasterSupporterCard)(nil),
		(*MasterCard_MasterGoodsCard)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_messages_card_proto_rawDesc), len(file_messages_card_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_messages_card_proto_goTypes,
		DependencyIndexes: file_messages_card_proto_depIdxs,
		MessageInfos:      file_messages_card_proto_msgTypes,
	}.Build()
	File_messages_card_proto = out.File
	file_messages_card_proto_goTypes = nil
	file_messages_card_proto_depIdxs = nil
}
