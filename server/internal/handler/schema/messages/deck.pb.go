// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: messages/deck.proto

package messages

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// デッキ基本情報（id が必須の場合）
type DeckBaseWithId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ThumbnailCard *Card                  `protobuf:"bytes,3,opt,name=thumbnail_card,json=thumbnailCard,proto3" json:"thumbnail_card,omitempty"`
	Color         Element                `protobuf:"varint,4,opt,name=color,proto3,enum=messages.common.Element" json:"color,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeckBaseWithId) Reset() {
	*x = DeckBaseWithId{}
	mi := &file_messages_deck_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeckBaseWithId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeckBaseWithId) ProtoMessage() {}

func (x *DeckBaseWithId) ProtoReflect() protoreflect.Message {
	mi := &file_messages_deck_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeckBaseWithId.ProtoReflect.Descriptor instead.
func (*DeckBaseWithId) Descriptor() ([]byte, []int) {
	return file_messages_deck_proto_rawDescGZIP(), []int{0}
}

func (x *DeckBaseWithId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeckBaseWithId) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeckBaseWithId) GetThumbnailCard() *Card {
	if x != nil {
		return x.ThumbnailCard
	}
	return nil
}

func (x *DeckBaseWithId) GetColor() Element {
	if x != nil {
		return x.Color
	}
	return Element_ELEMENT_UNKNOWN
}

// デッキ（deckBase に加え、カードリストとエネルギー属性を持つ）
type Deck struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// デッキID（作成時は空の場合もあり）
	Id            string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ThumbnailCard *Card   `protobuf:"bytes,3,opt,name=thumbnail_card,json=thumbnailCard,proto3" json:"thumbnail_card,omitempty"`
	Color         Element `protobuf:"varint,4,opt,name=color,proto3,enum=messages.common.Element" json:"color,omitempty"`
	// カードリスト
	Cards []*Card `protobuf:"bytes,5,rep,name=cards,proto3" json:"cards,omitempty"`
	// エネルギーの属性リスト
	Energies      []Element `protobuf:"varint,6,rep,packed,name=energies,proto3,enum=messages.common.Element" json:"energies,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Deck) Reset() {
	*x = Deck{}
	mi := &file_messages_deck_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Deck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deck) ProtoMessage() {}

func (x *Deck) ProtoReflect() protoreflect.Message {
	mi := &file_messages_deck_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deck.ProtoReflect.Descriptor instead.
func (*Deck) Descriptor() ([]byte, []int) {
	return file_messages_deck_proto_rawDescGZIP(), []int{1}
}

func (x *Deck) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Deck) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Deck) GetThumbnailCard() *Card {
	if x != nil {
		return x.ThumbnailCard
	}
	return nil
}

func (x *Deck) GetColor() Element {
	if x != nil {
		return x.Color
	}
	return Element_ELEMENT_UNKNOWN
}

func (x *Deck) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *Deck) GetEnergies() []Element {
	if x != nil {
		return x.Energies
	}
	return nil
}

// デッキの基本情報（id はオプショナルの場合もある）
type DeckBase struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// デッキID（readOnly）
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// デッキ名
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// サムネイルカード
	ThumbnailCard *Card `protobuf:"bytes,3,opt,name=thumbnail_card,json=thumbnailCard,proto3" json:"thumbnail_card,omitempty"`
	// 色（Element）
	Color         Element `protobuf:"varint,4,opt,name=color,proto3,enum=messages.common.Element" json:"color,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeckBase) Reset() {
	*x = DeckBase{}
	mi := &file_messages_deck_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeckBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeckBase) ProtoMessage() {}

func (x *DeckBase) ProtoReflect() protoreflect.Message {
	mi := &file_messages_deck_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeckBase.ProtoReflect.Descriptor instead.
func (*DeckBase) Descriptor() ([]byte, []int) {
	return file_messages_deck_proto_rawDescGZIP(), []int{2}
}

func (x *DeckBase) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeckBase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeckBase) GetThumbnailCard() *Card {
	if x != nil {
		return x.ThumbnailCard
	}
	return nil
}

func (x *DeckBase) GetColor() Element {
	if x != nil {
		return x.Color
	}
	return Element_ELEMENT_UNKNOWN
}

// デッキ（id 必須バージョン）
type DeckWithId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ThumbnailCard *Card                  `protobuf:"bytes,3,opt,name=thumbnail_card,json=thumbnailCard,proto3" json:"thumbnail_card,omitempty"`
	Color         Element                `protobuf:"varint,4,opt,name=color,proto3,enum=messages.common.Element" json:"color,omitempty"`
	Cards         []*Card                `protobuf:"bytes,5,rep,name=cards,proto3" json:"cards,omitempty"`
	Energies      []Element              `protobuf:"varint,6,rep,packed,name=energies,proto3,enum=messages.common.Element" json:"energies,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeckWithId) Reset() {
	*x = DeckWithId{}
	mi := &file_messages_deck_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeckWithId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeckWithId) ProtoMessage() {}

func (x *DeckWithId) ProtoReflect() protoreflect.Message {
	mi := &file_messages_deck_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeckWithId.ProtoReflect.Descriptor instead.
func (*DeckWithId) Descriptor() ([]byte, []int) {
	return file_messages_deck_proto_rawDescGZIP(), []int{3}
}

func (x *DeckWithId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeckWithId) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeckWithId) GetThumbnailCard() *Card {
	if x != nil {
		return x.ThumbnailCard
	}
	return nil
}

func (x *DeckWithId) GetColor() Element {
	if x != nil {
		return x.Color
	}
	return Element_ELEMENT_UNKNOWN
}

func (x *DeckWithId) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *DeckWithId) GetEnergies() []Element {
	if x != nil {
		return x.Energies
	}
	return nil
}

var File_messages_deck_proto protoreflect.FileDescriptor

var file_messages_deck_proto_rawDesc = string([]byte{
	0x0a, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x64, 0x65, 0x63, 0x6b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x64, 0x65, 0x63, 0x6b, 0x1a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xa0, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x63, 0x6b, 0x42, 0x61, 0x73, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x43,
	0x61, 0x72, 0x64, 0x12, 0x2e, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x22, 0xf7, 0x01, 0x0a, 0x04, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3a, 0x0a, 0x0e, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0d, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x12, 0x2e, 0x0a, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x05,
	0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x65, 0x6e, 0x65, 0x72, 0x67,
	0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x69, 0x65, 0x73, 0x22, 0x9a, 0x01,
	0x0a, 0x08, 0x44, 0x65, 0x63, 0x6b, 0x42, 0x61, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a,
	0x0a, 0x0e, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0d, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x12, 0x2e, 0x0a, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0xfd, 0x01, 0x0a, 0x0a, 0x44,
	0x65, 0x63, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a,
	0x0e, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0d, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x12, 0x2e, 0x0a, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x05, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x63,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x69, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x08, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x69, 0x65, 0x73, 0x42, 0xbb, 0x01, 0x0a, 0x11, 0x63,
	0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x63, 0x6b,
	0x42, 0x09, 0x44, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x46, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x6d, 0x61, 0x74, 0x6f,
	0x30, 0x32, 0x31, 0x31, 0x2f, 0x62, 0x72, 0x61, 0x63, 0x68, 0x69, 0x6f, 0x2d, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0xa2, 0x02, 0x03, 0x4d, 0x44, 0x58, 0xaa, 0x02, 0x0d, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0xca, 0x02, 0x0d, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5c, 0x44, 0x65, 0x63, 0x6b, 0xe2, 0x02, 0x19, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5c, 0x44, 0x65, 0x63, 0x6b, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x3a, 0x3a, 0x44, 0x65, 0x63, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_messages_deck_proto_rawDescOnce sync.Once
	file_messages_deck_proto_rawDescData []byte
)

func file_messages_deck_proto_rawDescGZIP() []byte {
	file_messages_deck_proto_rawDescOnce.Do(func() {
		file_messages_deck_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_messages_deck_proto_rawDesc), len(file_messages_deck_proto_rawDesc)))
	})
	return file_messages_deck_proto_rawDescData
}

var file_messages_deck_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_messages_deck_proto_goTypes = []any{
	(*DeckBaseWithId)(nil), // 0: messages.deck.DeckBaseWithId
	(*Deck)(nil),           // 1: messages.deck.Deck
	(*DeckBase)(nil),       // 2: messages.deck.DeckBase
	(*DeckWithId)(nil),     // 3: messages.deck.DeckWithId
	(*Card)(nil),           // 4: messages.card.Card
	(Element)(0),           // 5: messages.common.Element
}
var file_messages_deck_proto_depIdxs = []int32{
	4,  // 0: messages.deck.DeckBaseWithId.thumbnail_card:type_name -> messages.card.Card
	5,  // 1: messages.deck.DeckBaseWithId.color:type_name -> messages.common.Element
	4,  // 2: messages.deck.Deck.thumbnail_card:type_name -> messages.card.Card
	5,  // 3: messages.deck.Deck.color:type_name -> messages.common.Element
	4,  // 4: messages.deck.Deck.cards:type_name -> messages.card.Card
	5,  // 5: messages.deck.Deck.energies:type_name -> messages.common.Element
	4,  // 6: messages.deck.DeckBase.thumbnail_card:type_name -> messages.card.Card
	5,  // 7: messages.deck.DeckBase.color:type_name -> messages.common.Element
	4,  // 8: messages.deck.DeckWithId.thumbnail_card:type_name -> messages.card.Card
	5,  // 9: messages.deck.DeckWithId.color:type_name -> messages.common.Element
	4,  // 10: messages.deck.DeckWithId.cards:type_name -> messages.card.Card
	5,  // 11: messages.deck.DeckWithId.energies:type_name -> messages.common.Element
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_messages_deck_proto_init() }
func file_messages_deck_proto_init() {
	if File_messages_deck_proto != nil {
		return
	}
	file_messages_common_proto_init()
	file_messages_card_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_messages_deck_proto_rawDesc), len(file_messages_deck_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_messages_deck_proto_goTypes,
		DependencyIndexes: file_messages_deck_proto_depIdxs,
		MessageInfos:      file_messages_deck_proto_msgTypes,
	}.Build()
	File_messages_deck_proto = out.File
	file_messages_deck_proto_goTypes = nil
	file_messages_deck_proto_depIdxs = nil
}
