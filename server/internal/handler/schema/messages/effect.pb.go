// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: messages/effect.proto

package messages

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// エネルギートラッシュ
type EnergyTrashEffect struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// どの場所から
	Position int32 `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty"`
	// トラッシュ後のエネルギー
	Energy        []Element `protobuf:"varint,2,rep,packed,name=energy,proto3,enum=messages.common.Element" json:"energy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnergyTrashEffect) Reset() {
	*x = EnergyTrashEffect{}
	mi := &file_messages_effect_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnergyTrashEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnergyTrashEffect) ProtoMessage() {}

func (x *EnergyTrashEffect) ProtoReflect() protoreflect.Message {
	mi := &file_messages_effect_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnergyTrashEffect.ProtoReflect.Descriptor instead.
func (*EnergyTrashEffect) Descriptor() ([]byte, []int) {
	return file_messages_effect_proto_rawDescGZIP(), []int{0}
}

func (x *EnergyTrashEffect) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *EnergyTrashEffect) GetEnergy() []Element {
	if x != nil {
		return x.Energy
	}
	return nil
}

// このカード使います宣言
type UseCardEffect struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// カード情報
	Card          *Card `protobuf:"bytes,1,opt,name=card,proto3" json:"card,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UseCardEffect) Reset() {
	*x = UseCardEffect{}
	mi := &file_messages_effect_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UseCardEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseCardEffect) ProtoMessage() {}

func (x *UseCardEffect) ProtoReflect() protoreflect.Message {
	mi := &file_messages_effect_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseCardEffect.ProtoReflect.Descriptor instead.
func (*UseCardEffect) Descriptor() ([]byte, []int) {
	return file_messages_effect_proto_rawDescGZIP(), []int{1}
}

func (x *UseCardEffect) GetCard() *Card {
	if x != nil {
		return x.Card
	}
	return nil
}

// 手札トラッシュ(持ち主)
type TrashHandEffectSecret struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 何枚
	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// どのカードが（持ち主のみ）
	Card          *Card `protobuf:"bytes,2,opt,name=card,proto3" json:"card,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrashHandEffectSecret) Reset() {
	*x = TrashHandEffectSecret{}
	mi := &file_messages_effect_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrashHandEffectSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrashHandEffectSecret) ProtoMessage() {}

func (x *TrashHandEffectSecret) ProtoReflect() protoreflect.Message {
	mi := &file_messages_effect_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrashHandEffectSecret.ProtoReflect.Descriptor instead.
func (*TrashHandEffectSecret) Descriptor() ([]byte, []int) {
	return file_messages_effect_proto_rawDescGZIP(), []int{2}
}

func (x *TrashHandEffectSecret) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TrashHandEffectSecret) GetCard() *Card {
	if x != nil {
		return x.Card
	}
	return nil
}

// 手札トラッシュ
type TrashHandEffect struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 何枚
	Count         int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrashHandEffect) Reset() {
	*x = TrashHandEffect{}
	mi := &file_messages_effect_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrashHandEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrashHandEffect) ProtoMessage() {}

func (x *TrashHandEffect) ProtoReflect() protoreflect.Message {
	mi := &file_messages_effect_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrashHandEffect.ProtoReflect.Descriptor instead.
func (*TrashHandEffect) Descriptor() ([]byte, []int) {
	return file_messages_effect_proto_rawDescGZIP(), []int{3}
}

func (x *TrashHandEffect) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// 山札トラッシュ
type TrashDeckEffect struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 何枚
	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// 残り枚数
	Remain        int32 `protobuf:"varint,2,opt,name=remain,proto3" json:"remain,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrashDeckEffect) Reset() {
	*x = TrashDeckEffect{}
	mi := &file_messages_effect_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrashDeckEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrashDeckEffect) ProtoMessage() {}

func (x *TrashDeckEffect) ProtoReflect() protoreflect.Message {
	mi := &file_messages_effect_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrashDeckEffect.ProtoReflect.Descriptor instead.
func (*TrashDeckEffect) Descriptor() ([]byte, []int) {
	return file_messages_effect_proto_rawDescGZIP(), []int{4}
}

func (x *TrashDeckEffect) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TrashDeckEffect) GetRemain() int32 {
	if x != nil {
		return x.Remain
	}
	return 0
}

// ワザor特性を使用する
type UseSkillOrAbilityEffect struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 名前 e.g. たいあたり
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UseSkillOrAbilityEffect) Reset() {
	*x = UseSkillOrAbilityEffect{}
	mi := &file_messages_effect_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UseSkillOrAbilityEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseSkillOrAbilityEffect) ProtoMessage() {}

func (x *UseSkillOrAbilityEffect) ProtoReflect() protoreflect.Message {
	mi := &file_messages_effect_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseSkillOrAbilityEffect.ProtoReflect.Descriptor instead.
func (*UseSkillOrAbilityEffect) Descriptor() ([]byte, []int) {
	return file_messages_effect_proto_rawDescGZIP(), []int{5}
}

func (x *UseSkillOrAbilityEffect) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// 回復する
type RecoverEffect struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 誰から
	Position int32 `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty"`
	// length4の配列で値
	Amount        []int32 `protobuf:"varint,2,rep,packed,name=amount,proto3" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecoverEffect) Reset() {
	*x = RecoverEffect{}
	mi := &file_messages_effect_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecoverEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverEffect) ProtoMessage() {}

func (x *RecoverEffect) ProtoReflect() protoreflect.Message {
	mi := &file_messages_effect_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverEffect.ProtoReflect.Descriptor instead.
func (*RecoverEffect) Descriptor() ([]byte, []int) {
	return file_messages_effect_proto_rawDescGZIP(), []int{6}
}

func (x *RecoverEffect) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *RecoverEffect) GetAmount() []int32 {
	if x != nil {
		return x.Amount
	}
	return nil
}

// ダメージを与える
type DamageEffect struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 誰から
	Position int32 `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty"`
	// length4の配列で値
	Amount        []int32 `protobuf:"varint,2,rep,packed,name=amount,proto3" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DamageEffect) Reset() {
	*x = DamageEffect{}
	mi := &file_messages_effect_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DamageEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DamageEffect) ProtoMessage() {}

func (x *DamageEffect) ProtoReflect() protoreflect.Message {
	mi := &file_messages_effect_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DamageEffect.ProtoReflect.Descriptor instead.
func (*DamageEffect) Descriptor() ([]byte, []int) {
	return file_messages_effect_proto_rawDescGZIP(), []int{7}
}

func (x *DamageEffect) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *DamageEffect) GetAmount() []int32 {
	if x != nil {
		return x.Amount
	}
	return nil
}

// 進化する
type EvolutionEffect struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// どの場所のカードが
	Position int32 `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty"`
	// カード情報
	Card          *Card `protobuf:"bytes,2,opt,name=card,proto3" json:"card,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EvolutionEffect) Reset() {
	*x = EvolutionEffect{}
	mi := &file_messages_effect_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EvolutionEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvolutionEffect) ProtoMessage() {}

func (x *EvolutionEffect) ProtoReflect() protoreflect.Message {
	mi := &file_messages_effect_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvolutionEffect.ProtoReflect.Descriptor instead.
func (*EvolutionEffect) Descriptor() ([]byte, []int) {
	return file_messages_effect_proto_rawDescGZIP(), []int{8}
}

func (x *EvolutionEffect) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *EvolutionEffect) GetCard() *Card {
	if x != nil {
		return x.Card
	}
	return nil
}

// 点数取得
type GetPointEffect struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 合計何点取得したか
	Point int32 `protobuf:"varint,1,opt,name=point,proto3" json:"point,omitempty"`
	// どのユーザーが
	UserId        string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPointEffect) Reset() {
	*x = GetPointEffect{}
	mi := &file_messages_effect_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPointEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPointEffect) ProtoMessage() {}

func (x *GetPointEffect) ProtoReflect() protoreflect.Message {
	mi := &file_messages_effect_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPointEffect.ProtoReflect.Descriptor instead.
func (*GetPointEffect) Descriptor() ([]byte, []int) {
	return file_messages_effect_proto_rawDescGZIP(), []int{9}
}

func (x *GetPointEffect) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *GetPointEffect) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// 勝敗決定
type DecideWinOrLoseEffect struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// どっちが
	UserId        string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecideWinOrLoseEffect) Reset() {
	*x = DecideWinOrLoseEffect{}
	mi := &file_messages_effect_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecideWinOrLoseEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecideWinOrLoseEffect) ProtoMessage() {}

func (x *DecideWinOrLoseEffect) ProtoReflect() protoreflect.Message {
	mi := &file_messages_effect_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecideWinOrLoseEffect.ProtoReflect.Descriptor instead.
func (*DecideWinOrLoseEffect) Descriptor() ([]byte, []int) {
	return file_messages_effect_proto_rawDescGZIP(), []int{10}
}

func (x *DecideWinOrLoseEffect) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// 先攻後攻の決定
type DecideFirstOrSecondEffect struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// どっちが
	UserId        string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecideFirstOrSecondEffect) Reset() {
	*x = DecideFirstOrSecondEffect{}
	mi := &file_messages_effect_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecideFirstOrSecondEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecideFirstOrSecondEffect) ProtoMessage() {}

func (x *DecideFirstOrSecondEffect) ProtoReflect() protoreflect.Message {
	mi := &file_messages_effect_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecideFirstOrSecondEffect.ProtoReflect.Descriptor instead.
func (*DecideFirstOrSecondEffect) Descriptor() ([]byte, []int) {
	return file_messages_effect_proto_rawDescGZIP(), []int{11}
}

func (x *DecideFirstOrSecondEffect) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// バトル場とベンチの入れ替え
type SwapBattleAndBenchEffect struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// どこと
	Position      int32 `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SwapBattleAndBenchEffect) Reset() {
	*x = SwapBattleAndBenchEffect{}
	mi := &file_messages_effect_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwapBattleAndBenchEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapBattleAndBenchEffect) ProtoMessage() {}

func (x *SwapBattleAndBenchEffect) ProtoReflect() protoreflect.Message {
	mi := &file_messages_effect_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapBattleAndBenchEffect.ProtoReflect.Descriptor instead.
func (*SwapBattleAndBenchEffect) Descriptor() ([]byte, []int) {
	return file_messages_effect_proto_rawDescGZIP(), []int{12}
}

func (x *SwapBattleAndBenchEffect) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

// ベンチからバトル場に出す（バトル場死亡時or手札戻り時等）
type PutBattleFromBenchEffect struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// どこから
	Position      int32 `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PutBattleFromBenchEffect) Reset() {
	*x = PutBattleFromBenchEffect{}
	mi := &file_messages_effect_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PutBattleFromBenchEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutBattleFromBenchEffect) ProtoMessage() {}

func (x *PutBattleFromBenchEffect) ProtoReflect() protoreflect.Message {
	mi := &file_messages_effect_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutBattleFromBenchEffect.ProtoReflect.Descriptor instead.
func (*PutBattleFromBenchEffect) Descriptor() ([]byte, []int) {
	return file_messages_effect_proto_rawDescGZIP(), []int{13}
}

func (x *PutBattleFromBenchEffect) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

// 手札に戻る
type ReturnHandEffect struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 誰が
	Position      int32 `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReturnHandEffect) Reset() {
	*x = ReturnHandEffect{}
	mi := &file_messages_effect_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReturnHandEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnHandEffect) ProtoMessage() {}

func (x *ReturnHandEffect) ProtoReflect() protoreflect.Message {
	mi := &file_messages_effect_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnHandEffect.ProtoReflect.Descriptor instead.
func (*ReturnHandEffect) Descriptor() ([]byte, []int) {
	return file_messages_effect_proto_rawDescGZIP(), []int{14}
}

func (x *ReturnHandEffect) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

// 気絶する
type FaintEffect struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 誰が
	Position      int32 `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FaintEffect) Reset() {
	*x = FaintEffect{}
	mi := &file_messages_effect_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FaintEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaintEffect) ProtoMessage() {}

func (x *FaintEffect) ProtoReflect() protoreflect.Message {
	mi := &file_messages_effect_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaintEffect.ProtoReflect.Descriptor instead.
func (*FaintEffect) Descriptor() ([]byte, []int) {
	return file_messages_effect_proto_rawDescGZIP(), []int{15}
}

func (x *FaintEffect) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

// 召喚する
type SummonEffect struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// カード情報
	Card *Card `protobuf:"bytes,1,opt,name=card,proto3" json:"card,omitempty"`
	// どこに
	Position      int32 `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SummonEffect) Reset() {
	*x = SummonEffect{}
	mi := &file_messages_effect_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SummonEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummonEffect) ProtoMessage() {}

func (x *SummonEffect) ProtoReflect() protoreflect.Message {
	mi := &file_messages_effect_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummonEffect.ProtoReflect.Descriptor instead.
func (*SummonEffect) Descriptor() ([]byte, []int) {
	return file_messages_effect_proto_rawDescGZIP(), []int{16}
}

func (x *SummonEffect) GetCard() *Card {
	if x != nil {
		return x.Card
	}
	return nil
}

func (x *SummonEffect) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

// コイントス
type CoinTossEffect struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 結果配列
	Result        []bool `protobuf:"varint,1,rep,packed,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CoinTossEffect) Reset() {
	*x = CoinTossEffect{}
	mi := &file_messages_effect_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CoinTossEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinTossEffect) ProtoMessage() {}

func (x *CoinTossEffect) ProtoReflect() protoreflect.Message {
	mi := &file_messages_effect_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinTossEffect.ProtoReflect.Descriptor instead.
func (*CoinTossEffect) Descriptor() ([]byte, []int) {
	return file_messages_effect_proto_rawDescGZIP(), []int{17}
}

func (x *CoinTossEffect) GetResult() []bool {
	if x != nil {
		return x.Result
	}
	return nil
}

// エネルギーつける
type AttachEnergyEffect struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// どこに
	Position int32 `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty"`
	// どのエネルギー
	Energies      []Element `protobuf:"varint,2,rep,packed,name=energies,proto3,enum=messages.common.Element" json:"energies,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AttachEnergyEffect) Reset() {
	*x = AttachEnergyEffect{}
	mi := &file_messages_effect_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttachEnergyEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachEnergyEffect) ProtoMessage() {}

func (x *AttachEnergyEffect) ProtoReflect() protoreflect.Message {
	mi := &file_messages_effect_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachEnergyEffect.ProtoReflect.Descriptor instead.
func (*AttachEnergyEffect) Descriptor() ([]byte, []int) {
	return file_messages_effect_proto_rawDescGZIP(), []int{18}
}

func (x *AttachEnergyEffect) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *AttachEnergyEffect) GetEnergies() []Element {
	if x != nil {
		return x.Energies
	}
	return nil
}

// 降参
type SurrenderEffect struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// どちらが
	UserId        string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SurrenderEffect) Reset() {
	*x = SurrenderEffect{}
	mi := &file_messages_effect_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SurrenderEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurrenderEffect) ProtoMessage() {}

func (x *SurrenderEffect) ProtoReflect() protoreflect.Message {
	mi := &file_messages_effect_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurrenderEffect.ProtoReflect.Descriptor instead.
func (*SurrenderEffect) Descriptor() ([]byte, []int) {
	return file_messages_effect_proto_rawDescGZIP(), []int{19}
}

func (x *SurrenderEffect) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// シャッフル
type ShuffleEffect struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShuffleEffect) Reset() {
	*x = ShuffleEffect{}
	mi := &file_messages_effect_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShuffleEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShuffleEffect) ProtoMessage() {}

func (x *ShuffleEffect) ProtoReflect() protoreflect.Message {
	mi := &file_messages_effect_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShuffleEffect.ProtoReflect.Descriptor instead.
func (*ShuffleEffect) Descriptor() ([]byte, []int) {
	return file_messages_effect_proto_rawDescGZIP(), []int{20}
}

// シークレットを持つエフェクト
type EffectWithSecret struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Effect:
	//
	//	*EffectWithSecret_EnergyTrash
	//	*EffectWithSecret_UseCard
	//	*EffectWithSecret_TrashHandSecret
	//	*EffectWithSecret_TrashDeck
	//	*EffectWithSecret_UseSkillOrAbility
	//	*EffectWithSecret_Recover
	//	*EffectWithSecret_Damage
	//	*EffectWithSecret_Evolution
	//	*EffectWithSecret_GetPoint
	//	*EffectWithSecret_DecideWinOrLose
	//	*EffectWithSecret_DecideFirstOrSecond
	//	*EffectWithSecret_SwapBattleAndBench
	//	*EffectWithSecret_PutBattleFromBench
	//	*EffectWithSecret_ReturnHand
	//	*EffectWithSecret_Faint
	//	*EffectWithSecret_Summon
	//	*EffectWithSecret_CoinToss
	//	*EffectWithSecret_AttachEnergy
	//	*EffectWithSecret_Surrender
	//	*EffectWithSecret_Shuffle
	Effect        isEffectWithSecret_Effect `protobuf_oneof:"effect"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EffectWithSecret) Reset() {
	*x = EffectWithSecret{}
	mi := &file_messages_effect_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EffectWithSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EffectWithSecret) ProtoMessage() {}

func (x *EffectWithSecret) ProtoReflect() protoreflect.Message {
	mi := &file_messages_effect_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EffectWithSecret.ProtoReflect.Descriptor instead.
func (*EffectWithSecret) Descriptor() ([]byte, []int) {
	return file_messages_effect_proto_rawDescGZIP(), []int{21}
}

func (x *EffectWithSecret) GetEffect() isEffectWithSecret_Effect {
	if x != nil {
		return x.Effect
	}
	return nil
}

func (x *EffectWithSecret) GetEnergyTrash() *EnergyTrashEffect {
	if x != nil {
		if x, ok := x.Effect.(*EffectWithSecret_EnergyTrash); ok {
			return x.EnergyTrash
		}
	}
	return nil
}

func (x *EffectWithSecret) GetUseCard() *UseCardEffect {
	if x != nil {
		if x, ok := x.Effect.(*EffectWithSecret_UseCard); ok {
			return x.UseCard
		}
	}
	return nil
}

func (x *EffectWithSecret) GetTrashHandSecret() *TrashHandEffectSecret {
	if x != nil {
		if x, ok := x.Effect.(*EffectWithSecret_TrashHandSecret); ok {
			return x.TrashHandSecret
		}
	}
	return nil
}

func (x *EffectWithSecret) GetTrashDeck() *TrashDeckEffect {
	if x != nil {
		if x, ok := x.Effect.(*EffectWithSecret_TrashDeck); ok {
			return x.TrashDeck
		}
	}
	return nil
}

func (x *EffectWithSecret) GetUseSkillOrAbility() *UseSkillOrAbilityEffect {
	if x != nil {
		if x, ok := x.Effect.(*EffectWithSecret_UseSkillOrAbility); ok {
			return x.UseSkillOrAbility
		}
	}
	return nil
}

func (x *EffectWithSecret) GetRecover() *RecoverEffect {
	if x != nil {
		if x, ok := x.Effect.(*EffectWithSecret_Recover); ok {
			return x.Recover
		}
	}
	return nil
}

func (x *EffectWithSecret) GetDamage() *DamageEffect {
	if x != nil {
		if x, ok := x.Effect.(*EffectWithSecret_Damage); ok {
			return x.Damage
		}
	}
	return nil
}

func (x *EffectWithSecret) GetEvolution() *EvolutionEffect {
	if x != nil {
		if x, ok := x.Effect.(*EffectWithSecret_Evolution); ok {
			return x.Evolution
		}
	}
	return nil
}

func (x *EffectWithSecret) GetGetPoint() *GetPointEffect {
	if x != nil {
		if x, ok := x.Effect.(*EffectWithSecret_GetPoint); ok {
			return x.GetPoint
		}
	}
	return nil
}

func (x *EffectWithSecret) GetDecideWinOrLose() *DecideWinOrLoseEffect {
	if x != nil {
		if x, ok := x.Effect.(*EffectWithSecret_DecideWinOrLose); ok {
			return x.DecideWinOrLose
		}
	}
	return nil
}

func (x *EffectWithSecret) GetDecideFirstOrSecond() *DecideFirstOrSecondEffect {
	if x != nil {
		if x, ok := x.Effect.(*EffectWithSecret_DecideFirstOrSecond); ok {
			return x.DecideFirstOrSecond
		}
	}
	return nil
}

func (x *EffectWithSecret) GetSwapBattleAndBench() *SwapBattleAndBenchEffect {
	if x != nil {
		if x, ok := x.Effect.(*EffectWithSecret_SwapBattleAndBench); ok {
			return x.SwapBattleAndBench
		}
	}
	return nil
}

func (x *EffectWithSecret) GetPutBattleFromBench() *PutBattleFromBenchEffect {
	if x != nil {
		if x, ok := x.Effect.(*EffectWithSecret_PutBattleFromBench); ok {
			return x.PutBattleFromBench
		}
	}
	return nil
}

func (x *EffectWithSecret) GetReturnHand() *ReturnHandEffect {
	if x != nil {
		if x, ok := x.Effect.(*EffectWithSecret_ReturnHand); ok {
			return x.ReturnHand
		}
	}
	return nil
}

func (x *EffectWithSecret) GetFaint() *FaintEffect {
	if x != nil {
		if x, ok := x.Effect.(*EffectWithSecret_Faint); ok {
			return x.Faint
		}
	}
	return nil
}

func (x *EffectWithSecret) GetSummon() *SummonEffect {
	if x != nil {
		if x, ok := x.Effect.(*EffectWithSecret_Summon); ok {
			return x.Summon
		}
	}
	return nil
}

func (x *EffectWithSecret) GetCoinToss() *CoinTossEffect {
	if x != nil {
		if x, ok := x.Effect.(*EffectWithSecret_CoinToss); ok {
			return x.CoinToss
		}
	}
	return nil
}

func (x *EffectWithSecret) GetAttachEnergy() *AttachEnergyEffect {
	if x != nil {
		if x, ok := x.Effect.(*EffectWithSecret_AttachEnergy); ok {
			return x.AttachEnergy
		}
	}
	return nil
}

func (x *EffectWithSecret) GetSurrender() *SurrenderEffect {
	if x != nil {
		if x, ok := x.Effect.(*EffectWithSecret_Surrender); ok {
			return x.Surrender
		}
	}
	return nil
}

func (x *EffectWithSecret) GetShuffle() *ShuffleEffect {
	if x != nil {
		if x, ok := x.Effect.(*EffectWithSecret_Shuffle); ok {
			return x.Shuffle
		}
	}
	return nil
}

type isEffectWithSecret_Effect interface {
	isEffectWithSecret_Effect()
}

type EffectWithSecret_EnergyTrash struct {
	EnergyTrash *EnergyTrashEffect `protobuf:"bytes,1,opt,name=energy_trash,json=energyTrash,proto3,oneof"`
}

type EffectWithSecret_UseCard struct {
	UseCard *UseCardEffect `protobuf:"bytes,2,opt,name=use_card,json=useCard,proto3,oneof"`
}

type EffectWithSecret_TrashHandSecret struct {
	TrashHandSecret *TrashHandEffectSecret `protobuf:"bytes,3,opt,name=trash_hand_secret,json=trashHandSecret,proto3,oneof"`
}

type EffectWithSecret_TrashDeck struct {
	TrashDeck *TrashDeckEffect `protobuf:"bytes,4,opt,name=trash_deck,json=trashDeck,proto3,oneof"`
}

type EffectWithSecret_UseSkillOrAbility struct {
	UseSkillOrAbility *UseSkillOrAbilityEffect `protobuf:"bytes,5,opt,name=use_skill_or_ability,json=useSkillOrAbility,proto3,oneof"`
}

type EffectWithSecret_Recover struct {
	Recover *RecoverEffect `protobuf:"bytes,6,opt,name=recover,proto3,oneof"`
}

type EffectWithSecret_Damage struct {
	Damage *DamageEffect `protobuf:"bytes,7,opt,name=damage,proto3,oneof"`
}

type EffectWithSecret_Evolution struct {
	Evolution *EvolutionEffect `protobuf:"bytes,8,opt,name=evolution,proto3,oneof"`
}

type EffectWithSecret_GetPoint struct {
	GetPoint *GetPointEffect `protobuf:"bytes,9,opt,name=get_point,json=getPoint,proto3,oneof"`
}

type EffectWithSecret_DecideWinOrLose struct {
	DecideWinOrLose *DecideWinOrLoseEffect `protobuf:"bytes,10,opt,name=decide_win_or_lose,json=decideWinOrLose,proto3,oneof"`
}

type EffectWithSecret_DecideFirstOrSecond struct {
	DecideFirstOrSecond *DecideFirstOrSecondEffect `protobuf:"bytes,11,opt,name=decide_first_or_second,json=decideFirstOrSecond,proto3,oneof"`
}

type EffectWithSecret_SwapBattleAndBench struct {
	SwapBattleAndBench *SwapBattleAndBenchEffect `protobuf:"bytes,12,opt,name=swap_battle_and_bench,json=swapBattleAndBench,proto3,oneof"`
}

type EffectWithSecret_PutBattleFromBench struct {
	PutBattleFromBench *PutBattleFromBenchEffect `protobuf:"bytes,13,opt,name=put_battle_from_bench,json=putBattleFromBench,proto3,oneof"`
}

type EffectWithSecret_ReturnHand struct {
	ReturnHand *ReturnHandEffect `protobuf:"bytes,14,opt,name=return_hand,json=returnHand,proto3,oneof"`
}

type EffectWithSecret_Faint struct {
	Faint *FaintEffect `protobuf:"bytes,15,opt,name=faint,proto3,oneof"`
}

type EffectWithSecret_Summon struct {
	Summon *SummonEffect `protobuf:"bytes,16,opt,name=summon,proto3,oneof"`
}

type EffectWithSecret_CoinToss struct {
	CoinToss *CoinTossEffect `protobuf:"bytes,17,opt,name=coin_toss,json=coinToss,proto3,oneof"`
}

type EffectWithSecret_AttachEnergy struct {
	AttachEnergy *AttachEnergyEffect `protobuf:"bytes,18,opt,name=attach_energy,json=attachEnergy,proto3,oneof"`
}

type EffectWithSecret_Surrender struct {
	Surrender *SurrenderEffect `protobuf:"bytes,19,opt,name=surrender,proto3,oneof"`
}

type EffectWithSecret_Shuffle struct {
	Shuffle *ShuffleEffect `protobuf:"bytes,20,opt,name=shuffle,proto3,oneof"`
}

func (*EffectWithSecret_EnergyTrash) isEffectWithSecret_Effect() {}

func (*EffectWithSecret_UseCard) isEffectWithSecret_Effect() {}

func (*EffectWithSecret_TrashHandSecret) isEffectWithSecret_Effect() {}

func (*EffectWithSecret_TrashDeck) isEffectWithSecret_Effect() {}

func (*EffectWithSecret_UseSkillOrAbility) isEffectWithSecret_Effect() {}

func (*EffectWithSecret_Recover) isEffectWithSecret_Effect() {}

func (*EffectWithSecret_Damage) isEffectWithSecret_Effect() {}

func (*EffectWithSecret_Evolution) isEffectWithSecret_Effect() {}

func (*EffectWithSecret_GetPoint) isEffectWithSecret_Effect() {}

func (*EffectWithSecret_DecideWinOrLose) isEffectWithSecret_Effect() {}

func (*EffectWithSecret_DecideFirstOrSecond) isEffectWithSecret_Effect() {}

func (*EffectWithSecret_SwapBattleAndBench) isEffectWithSecret_Effect() {}

func (*EffectWithSecret_PutBattleFromBench) isEffectWithSecret_Effect() {}

func (*EffectWithSecret_ReturnHand) isEffectWithSecret_Effect() {}

func (*EffectWithSecret_Faint) isEffectWithSecret_Effect() {}

func (*EffectWithSecret_Summon) isEffectWithSecret_Effect() {}

func (*EffectWithSecret_CoinToss) isEffectWithSecret_Effect() {}

func (*EffectWithSecret_AttachEnergy) isEffectWithSecret_Effect() {}

func (*EffectWithSecret_Surrender) isEffectWithSecret_Effect() {}

func (*EffectWithSecret_Shuffle) isEffectWithSecret_Effect() {}

// シークレットを持たないエフェクト
type Effect struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Effect:
	//
	//	*Effect_EnergyTrash
	//	*Effect_UseCard
	//	*Effect_TrashHand
	//	*Effect_TrashDeck
	//	*Effect_UseSkillOrAbility
	//	*Effect_Recover
	//	*Effect_Damage
	//	*Effect_Evolution
	//	*Effect_GetPoint
	//	*Effect_DecideWinOrLose
	//	*Effect_DecideFirstOrSecond
	//	*Effect_SwapBattleAndBench
	//	*Effect_PutBattleFromBench
	//	*Effect_ReturnHand
	//	*Effect_Faint
	//	*Effect_Summon
	//	*Effect_CoinToss
	//	*Effect_AttachEnergy
	//	*Effect_Surrender
	//	*Effect_Shuffle
	Effect        isEffect_Effect `protobuf_oneof:"effect"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Effect) Reset() {
	*x = Effect{}
	mi := &file_messages_effect_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Effect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Effect) ProtoMessage() {}

func (x *Effect) ProtoReflect() protoreflect.Message {
	mi := &file_messages_effect_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Effect.ProtoReflect.Descriptor instead.
func (*Effect) Descriptor() ([]byte, []int) {
	return file_messages_effect_proto_rawDescGZIP(), []int{22}
}

func (x *Effect) GetEffect() isEffect_Effect {
	if x != nil {
		return x.Effect
	}
	return nil
}

func (x *Effect) GetEnergyTrash() *EnergyTrashEffect {
	if x != nil {
		if x, ok := x.Effect.(*Effect_EnergyTrash); ok {
			return x.EnergyTrash
		}
	}
	return nil
}

func (x *Effect) GetUseCard() *UseCardEffect {
	if x != nil {
		if x, ok := x.Effect.(*Effect_UseCard); ok {
			return x.UseCard
		}
	}
	return nil
}

func (x *Effect) GetTrashHand() *TrashHandEffect {
	if x != nil {
		if x, ok := x.Effect.(*Effect_TrashHand); ok {
			return x.TrashHand
		}
	}
	return nil
}

func (x *Effect) GetTrashDeck() *TrashDeckEffect {
	if x != nil {
		if x, ok := x.Effect.(*Effect_TrashDeck); ok {
			return x.TrashDeck
		}
	}
	return nil
}

func (x *Effect) GetUseSkillOrAbility() *UseSkillOrAbilityEffect {
	if x != nil {
		if x, ok := x.Effect.(*Effect_UseSkillOrAbility); ok {
			return x.UseSkillOrAbility
		}
	}
	return nil
}

func (x *Effect) GetRecover() *RecoverEffect {
	if x != nil {
		if x, ok := x.Effect.(*Effect_Recover); ok {
			return x.Recover
		}
	}
	return nil
}

func (x *Effect) GetDamage() *DamageEffect {
	if x != nil {
		if x, ok := x.Effect.(*Effect_Damage); ok {
			return x.Damage
		}
	}
	return nil
}

func (x *Effect) GetEvolution() *EvolutionEffect {
	if x != nil {
		if x, ok := x.Effect.(*Effect_Evolution); ok {
			return x.Evolution
		}
	}
	return nil
}

func (x *Effect) GetGetPoint() *GetPointEffect {
	if x != nil {
		if x, ok := x.Effect.(*Effect_GetPoint); ok {
			return x.GetPoint
		}
	}
	return nil
}

func (x *Effect) GetDecideWinOrLose() *DecideWinOrLoseEffect {
	if x != nil {
		if x, ok := x.Effect.(*Effect_DecideWinOrLose); ok {
			return x.DecideWinOrLose
		}
	}
	return nil
}

func (x *Effect) GetDecideFirstOrSecond() *DecideFirstOrSecondEffect {
	if x != nil {
		if x, ok := x.Effect.(*Effect_DecideFirstOrSecond); ok {
			return x.DecideFirstOrSecond
		}
	}
	return nil
}

func (x *Effect) GetSwapBattleAndBench() *SwapBattleAndBenchEffect {
	if x != nil {
		if x, ok := x.Effect.(*Effect_SwapBattleAndBench); ok {
			return x.SwapBattleAndBench
		}
	}
	return nil
}

func (x *Effect) GetPutBattleFromBench() *PutBattleFromBenchEffect {
	if x != nil {
		if x, ok := x.Effect.(*Effect_PutBattleFromBench); ok {
			return x.PutBattleFromBench
		}
	}
	return nil
}

func (x *Effect) GetReturnHand() *ReturnHandEffect {
	if x != nil {
		if x, ok := x.Effect.(*Effect_ReturnHand); ok {
			return x.ReturnHand
		}
	}
	return nil
}

func (x *Effect) GetFaint() *FaintEffect {
	if x != nil {
		if x, ok := x.Effect.(*Effect_Faint); ok {
			return x.Faint
		}
	}
	return nil
}

func (x *Effect) GetSummon() *SummonEffect {
	if x != nil {
		if x, ok := x.Effect.(*Effect_Summon); ok {
			return x.Summon
		}
	}
	return nil
}

func (x *Effect) GetCoinToss() *CoinTossEffect {
	if x != nil {
		if x, ok := x.Effect.(*Effect_CoinToss); ok {
			return x.CoinToss
		}
	}
	return nil
}

func (x *Effect) GetAttachEnergy() *AttachEnergyEffect {
	if x != nil {
		if x, ok := x.Effect.(*Effect_AttachEnergy); ok {
			return x.AttachEnergy
		}
	}
	return nil
}

func (x *Effect) GetSurrender() *SurrenderEffect {
	if x != nil {
		if x, ok := x.Effect.(*Effect_Surrender); ok {
			return x.Surrender
		}
	}
	return nil
}

func (x *Effect) GetShuffle() *ShuffleEffect {
	if x != nil {
		if x, ok := x.Effect.(*Effect_Shuffle); ok {
			return x.Shuffle
		}
	}
	return nil
}

type isEffect_Effect interface {
	isEffect_Effect()
}

type Effect_EnergyTrash struct {
	EnergyTrash *EnergyTrashEffect `protobuf:"bytes,1,opt,name=energy_trash,json=energyTrash,proto3,oneof"`
}

type Effect_UseCard struct {
	UseCard *UseCardEffect `protobuf:"bytes,2,opt,name=use_card,json=useCard,proto3,oneof"`
}

type Effect_TrashHand struct {
	TrashHand *TrashHandEffect `protobuf:"bytes,3,opt,name=trash_hand,json=trashHand,proto3,oneof"`
}

type Effect_TrashDeck struct {
	TrashDeck *TrashDeckEffect `protobuf:"bytes,4,opt,name=trash_deck,json=trashDeck,proto3,oneof"`
}

type Effect_UseSkillOrAbility struct {
	UseSkillOrAbility *UseSkillOrAbilityEffect `protobuf:"bytes,5,opt,name=use_skill_or_ability,json=useSkillOrAbility,proto3,oneof"`
}

type Effect_Recover struct {
	Recover *RecoverEffect `protobuf:"bytes,6,opt,name=recover,proto3,oneof"`
}

type Effect_Damage struct {
	Damage *DamageEffect `protobuf:"bytes,7,opt,name=damage,proto3,oneof"`
}

type Effect_Evolution struct {
	Evolution *EvolutionEffect `protobuf:"bytes,8,opt,name=evolution,proto3,oneof"`
}

type Effect_GetPoint struct {
	GetPoint *GetPointEffect `protobuf:"bytes,9,opt,name=get_point,json=getPoint,proto3,oneof"`
}

type Effect_DecideWinOrLose struct {
	DecideWinOrLose *DecideWinOrLoseEffect `protobuf:"bytes,10,opt,name=decide_win_or_lose,json=decideWinOrLose,proto3,oneof"`
}

type Effect_DecideFirstOrSecond struct {
	DecideFirstOrSecond *DecideFirstOrSecondEffect `protobuf:"bytes,11,opt,name=decide_first_or_second,json=decideFirstOrSecond,proto3,oneof"`
}

type Effect_SwapBattleAndBench struct {
	SwapBattleAndBench *SwapBattleAndBenchEffect `protobuf:"bytes,12,opt,name=swap_battle_and_bench,json=swapBattleAndBench,proto3,oneof"`
}

type Effect_PutBattleFromBench struct {
	PutBattleFromBench *PutBattleFromBenchEffect `protobuf:"bytes,13,opt,name=put_battle_from_bench,json=putBattleFromBench,proto3,oneof"`
}

type Effect_ReturnHand struct {
	ReturnHand *ReturnHandEffect `protobuf:"bytes,14,opt,name=return_hand,json=returnHand,proto3,oneof"`
}

type Effect_Faint struct {
	Faint *FaintEffect `protobuf:"bytes,15,opt,name=faint,proto3,oneof"`
}

type Effect_Summon struct {
	Summon *SummonEffect `protobuf:"bytes,16,opt,name=summon,proto3,oneof"`
}

type Effect_CoinToss struct {
	CoinToss *CoinTossEffect `protobuf:"bytes,17,opt,name=coin_toss,json=coinToss,proto3,oneof"`
}

type Effect_AttachEnergy struct {
	AttachEnergy *AttachEnergyEffect `protobuf:"bytes,18,opt,name=attach_energy,json=attachEnergy,proto3,oneof"`
}

type Effect_Surrender struct {
	Surrender *SurrenderEffect `protobuf:"bytes,19,opt,name=surrender,proto3,oneof"`
}

type Effect_Shuffle struct {
	Shuffle *ShuffleEffect `protobuf:"bytes,20,opt,name=shuffle,proto3,oneof"`
}

func (*Effect_EnergyTrash) isEffect_Effect() {}

func (*Effect_UseCard) isEffect_Effect() {}

func (*Effect_TrashHand) isEffect_Effect() {}

func (*Effect_TrashDeck) isEffect_Effect() {}

func (*Effect_UseSkillOrAbility) isEffect_Effect() {}

func (*Effect_Recover) isEffect_Effect() {}

func (*Effect_Damage) isEffect_Effect() {}

func (*Effect_Evolution) isEffect_Effect() {}

func (*Effect_GetPoint) isEffect_Effect() {}

func (*Effect_DecideWinOrLose) isEffect_Effect() {}

func (*Effect_DecideFirstOrSecond) isEffect_Effect() {}

func (*Effect_SwapBattleAndBench) isEffect_Effect() {}

func (*Effect_PutBattleFromBench) isEffect_Effect() {}

func (*Effect_ReturnHand) isEffect_Effect() {}

func (*Effect_Faint) isEffect_Effect() {}

func (*Effect_Summon) isEffect_Effect() {}

func (*Effect_CoinToss) isEffect_Effect() {}

func (*Effect_AttachEnergy) isEffect_Effect() {}

func (*Effect_Surrender) isEffect_Effect() {}

func (*Effect_Shuffle) isEffect_Effect() {}

var File_messages_effect_proto protoreflect.FileDescriptor

var file_messages_effect_proto_rawDesc = string([]byte{
	0x0a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x1a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x61, 0x0a, 0x11, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x54, 0x72,
	0x61, 0x73, 0x68, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x06, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x06, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x22, 0x38, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x04, 0x63, 0x61, 0x72,
	0x64, 0x22, 0x56, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x73, 0x68, 0x48, 0x61, 0x6e, 0x64, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x27, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x22, 0x27, 0x0a, 0x0f, 0x54, 0x72, 0x61,
	0x73, 0x68, 0x48, 0x61, 0x6e, 0x64, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x3f, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x73, 0x68, 0x44, 0x65, 0x63, 0x6b, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x22, 0x2d, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4f,
	0x72, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x43, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x42, 0x0a, 0x0c, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x56, 0x0a, 0x0f, 0x45,
	0x76, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x04, 0x63, 0x61,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x04, 0x63,
	0x61, 0x72, 0x64, 0x22, 0x3e, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x15, 0x44, 0x65, 0x63, 0x69, 0x64, 0x65, 0x57, 0x69, 0x6e,
	0x4f, 0x72, 0x4c, 0x6f, 0x73, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x19, 0x44, 0x65, 0x63, 0x69, 0x64, 0x65, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x4f, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x18, 0x53, 0x77, 0x61,
	0x70, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x6e, 0x64, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x36, 0x0a, 0x18, 0x50, 0x75, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x46, 0x72,
	0x6f, 0x6d, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2e, 0x0a, 0x10, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x29, 0x0a, 0x0b, 0x46, 0x61, 0x69,
	0x6e, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x53, 0x0a, 0x0c, 0x53, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x63, 0x61,
	0x72, 0x64, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x28, 0x0a, 0x0e, 0x43, 0x6f, 0x69,
	0x6e, 0x54, 0x6f, 0x73, 0x73, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x66, 0x0a, 0x12, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x45, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x08, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x69, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x08, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x69, 0x65, 0x73, 0x22, 0x29, 0x0a, 0x0f, 0x53,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x0f, 0x0a, 0x0d, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c,
	0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x22, 0xc8, 0x0b, 0x0a, 0x10, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x47, 0x0a, 0x0c,
	0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x54, 0x72, 0x61, 0x73, 0x68,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x54, 0x72, 0x61, 0x73, 0x68, 0x12, 0x3b, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x43, 0x61, 0x72,
	0x64, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x75, 0x73, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x12, 0x54, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x68, 0x61, 0x6e, 0x64,
	0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e,
	0x54, 0x72, 0x61, 0x73, 0x68, 0x48, 0x61, 0x6e, 0x64, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x73, 0x68, 0x48, 0x61,
	0x6e, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x41, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x73,
	0x68, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x54,
	0x72, 0x61, 0x73, 0x68, 0x44, 0x65, 0x63, 0x6b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x48, 0x00,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x73, 0x68, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x5b, 0x0a, 0x14, 0x75,
	0x73, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6f, 0x72, 0x5f, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x4f, 0x72, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x11, 0x75, 0x73, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4f,
	0x72, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a,
	0x09, 0x65, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x2e, 0x45, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x48, 0x00, 0x52, 0x09, 0x65, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3e, 0x0a, 0x09, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x08, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x55, 0x0a, 0x12, 0x64, 0x65, 0x63, 0x69, 0x64, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x6f, 0x72,
	0x5f, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x64, 0x65, 0x57, 0x69, 0x6e, 0x4f, 0x72, 0x4c, 0x6f, 0x73, 0x65, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x65, 0x63, 0x69, 0x64, 0x65, 0x57, 0x69, 0x6e,
	0x4f, 0x72, 0x4c, 0x6f, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x16, 0x64, 0x65, 0x63, 0x69, 0x64, 0x65,
	0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x64, 0x65, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x4f, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x48, 0x00, 0x52, 0x13, 0x64, 0x65, 0x63, 0x69, 0x64, 0x65, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x4f, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x5e, 0x0a, 0x15, 0x73, 0x77, 0x61,
	0x70, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x62, 0x65, 0x6e,
	0x63, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x6e, 0x64, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x12, 0x73, 0x77, 0x61, 0x70, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x41, 0x6e, 0x64, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x12, 0x5e, 0x0a, 0x15, 0x70, 0x75, 0x74,
	0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x62, 0x65, 0x6e,
	0x63, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x75, 0x74, 0x42, 0x61,
	0x74, 0x74, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x12, 0x70, 0x75, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x12, 0x44, 0x0a, 0x0b, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x12,
	0x34, 0x0a, 0x05, 0x66, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x2e, 0x46, 0x61, 0x69, 0x6e, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x05,
	0x66, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x3e,
	0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x73, 0x73, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x73, 0x73, 0x12, 0x4a,
	0x0a, 0x0d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x45, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x40, 0x0a, 0x09, 0x73, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e,
	0x53, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x48,
	0x00, 0x52, 0x09, 0x73, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x07,
	0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e,
	0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52,
	0x07, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x22, 0xab, 0x0b, 0x0a, 0x06, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x47, 0x0a,
	0x0c, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x54, 0x72, 0x61, 0x73,
	0x68, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x54, 0x72, 0x61, 0x73, 0x68, 0x12, 0x3b, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x75, 0x73, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x12, 0x41, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x68, 0x61, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x73, 0x68, 0x48,
	0x61, 0x6e, 0x64, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x09, 0x74, 0x72, 0x61,
	0x73, 0x68, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x41, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x73, 0x68, 0x5f,
	0x64, 0x65, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x72, 0x61,
	0x73, 0x68, 0x44, 0x65, 0x63, 0x6b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x73, 0x68, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x5b, 0x0a, 0x14, 0x75, 0x73, 0x65,
	0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x6f, 0x72, 0x5f, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x4f, 0x72, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x48, 0x00, 0x52, 0x11, 0x75, 0x73, 0x65, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4f, 0x72, 0x41,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x12, 0x37, 0x0a, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x2e, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x48, 0x00, 0x52, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x65,
	0x76, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x2e, 0x45, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x48, 0x00, 0x52, 0x09, 0x65, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a,
	0x09, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x48, 0x00, 0x52, 0x08, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x55, 0x0a,
	0x12, 0x64, 0x65, 0x63, 0x69, 0x64, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x6f, 0x72, 0x5f, 0x6c,
	0x6f, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x64, 0x65, 0x57, 0x69, 0x6e, 0x4f, 0x72, 0x4c, 0x6f, 0x73, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x65, 0x63, 0x69, 0x64, 0x65, 0x57, 0x69, 0x6e, 0x4f, 0x72,
	0x4c, 0x6f, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x16, 0x64, 0x65, 0x63, 0x69, 0x64, 0x65, 0x5f, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x64, 0x65, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x4f, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x48, 0x00, 0x52, 0x13, 0x64, 0x65, 0x63, 0x69, 0x64, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4f,
	0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x5e, 0x0a, 0x15, 0x73, 0x77, 0x61, 0x70, 0x5f,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x62, 0x65, 0x6e, 0x63, 0x68,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x41, 0x6e, 0x64, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x48, 0x00, 0x52, 0x12, 0x73, 0x77, 0x61, 0x70, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x41,
	0x6e, 0x64, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x12, 0x5e, 0x0a, 0x15, 0x70, 0x75, 0x74, 0x5f, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x62, 0x65, 0x6e, 0x63, 0x68,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x75, 0x74, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x48, 0x00, 0x52, 0x12, 0x70, 0x75, 0x74, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x46, 0x72,
	0x6f, 0x6d, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x12, 0x44, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x48,
	0x00, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x34, 0x0a,
	0x05, 0x66, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x46,
	0x61, 0x69, 0x6e, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x05, 0x66, 0x61,
	0x69, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x09,
	0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x73, 0x73, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x73, 0x73, 0x12, 0x4a, 0x0a, 0x0d,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x45, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x40, 0x0a, 0x09, 0x73, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52,
	0x09, 0x73, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x07, 0x73, 0x68,
	0x75, 0x66, 0x66, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x68,
	0x75, 0x66, 0x66, 0x6c, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x73,
	0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x42, 0xc7, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x42, 0x0b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x6d, 0x61, 0x74, 0x6f, 0x30, 0x32, 0x31, 0x31, 0x2f, 0x62,
	0x72, 0x61, 0x63, 0x68, 0x69, 0x6f, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0xa2,
	0x02, 0x03, 0x4d, 0x45, 0x58, 0xaa, 0x02, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0xca, 0x02, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0xe2, 0x02, 0x1b, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x10, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x3a, 0x3a, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_messages_effect_proto_rawDescOnce sync.Once
	file_messages_effect_proto_rawDescData []byte
)

func file_messages_effect_proto_rawDescGZIP() []byte {
	file_messages_effect_proto_rawDescOnce.Do(func() {
		file_messages_effect_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_messages_effect_proto_rawDesc), len(file_messages_effect_proto_rawDesc)))
	})
	return file_messages_effect_proto_rawDescData
}

var file_messages_effect_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_messages_effect_proto_goTypes = []any{
	(*EnergyTrashEffect)(nil),         // 0: messages.effect.EnergyTrashEffect
	(*UseCardEffect)(nil),             // 1: messages.effect.UseCardEffect
	(*TrashHandEffectSecret)(nil),     // 2: messages.effect.TrashHandEffectSecret
	(*TrashHandEffect)(nil),           // 3: messages.effect.TrashHandEffect
	(*TrashDeckEffect)(nil),           // 4: messages.effect.TrashDeckEffect
	(*UseSkillOrAbilityEffect)(nil),   // 5: messages.effect.UseSkillOrAbilityEffect
	(*RecoverEffect)(nil),             // 6: messages.effect.RecoverEffect
	(*DamageEffect)(nil),              // 7: messages.effect.DamageEffect
	(*EvolutionEffect)(nil),           // 8: messages.effect.EvolutionEffect
	(*GetPointEffect)(nil),            // 9: messages.effect.GetPointEffect
	(*DecideWinOrLoseEffect)(nil),     // 10: messages.effect.DecideWinOrLoseEffect
	(*DecideFirstOrSecondEffect)(nil), // 11: messages.effect.DecideFirstOrSecondEffect
	(*SwapBattleAndBenchEffect)(nil),  // 12: messages.effect.SwapBattleAndBenchEffect
	(*PutBattleFromBenchEffect)(nil),  // 13: messages.effect.PutBattleFromBenchEffect
	(*ReturnHandEffect)(nil),          // 14: messages.effect.ReturnHandEffect
	(*FaintEffect)(nil),               // 15: messages.effect.FaintEffect
	(*SummonEffect)(nil),              // 16: messages.effect.SummonEffect
	(*CoinTossEffect)(nil),            // 17: messages.effect.CoinTossEffect
	(*AttachEnergyEffect)(nil),        // 18: messages.effect.AttachEnergyEffect
	(*SurrenderEffect)(nil),           // 19: messages.effect.SurrenderEffect
	(*ShuffleEffect)(nil),             // 20: messages.effect.ShuffleEffect
	(*EffectWithSecret)(nil),          // 21: messages.effect.EffectWithSecret
	(*Effect)(nil),                    // 22: messages.effect.Effect
	(Element)(0),                      // 23: messages.common.Element
	(*Card)(nil),                      // 24: messages.card.Card
}
var file_messages_effect_proto_depIdxs = []int32{
	23, // 0: messages.effect.EnergyTrashEffect.energy:type_name -> messages.common.Element
	24, // 1: messages.effect.UseCardEffect.card:type_name -> messages.card.Card
	24, // 2: messages.effect.TrashHandEffectSecret.card:type_name -> messages.card.Card
	24, // 3: messages.effect.EvolutionEffect.card:type_name -> messages.card.Card
	24, // 4: messages.effect.SummonEffect.card:type_name -> messages.card.Card
	23, // 5: messages.effect.AttachEnergyEffect.energies:type_name -> messages.common.Element
	0,  // 6: messages.effect.EffectWithSecret.energy_trash:type_name -> messages.effect.EnergyTrashEffect
	1,  // 7: messages.effect.EffectWithSecret.use_card:type_name -> messages.effect.UseCardEffect
	2,  // 8: messages.effect.EffectWithSecret.trash_hand_secret:type_name -> messages.effect.TrashHandEffectSecret
	4,  // 9: messages.effect.EffectWithSecret.trash_deck:type_name -> messages.effect.TrashDeckEffect
	5,  // 10: messages.effect.EffectWithSecret.use_skill_or_ability:type_name -> messages.effect.UseSkillOrAbilityEffect
	6,  // 11: messages.effect.EffectWithSecret.recover:type_name -> messages.effect.RecoverEffect
	7,  // 12: messages.effect.EffectWithSecret.damage:type_name -> messages.effect.DamageEffect
	8,  // 13: messages.effect.EffectWithSecret.evolution:type_name -> messages.effect.EvolutionEffect
	9,  // 14: messages.effect.EffectWithSecret.get_point:type_name -> messages.effect.GetPointEffect
	10, // 15: messages.effect.EffectWithSecret.decide_win_or_lose:type_name -> messages.effect.DecideWinOrLoseEffect
	11, // 16: messages.effect.EffectWithSecret.decide_first_or_second:type_name -> messages.effect.DecideFirstOrSecondEffect
	12, // 17: messages.effect.EffectWithSecret.swap_battle_and_bench:type_name -> messages.effect.SwapBattleAndBenchEffect
	13, // 18: messages.effect.EffectWithSecret.put_battle_from_bench:type_name -> messages.effect.PutBattleFromBenchEffect
	14, // 19: messages.effect.EffectWithSecret.return_hand:type_name -> messages.effect.ReturnHandEffect
	15, // 20: messages.effect.EffectWithSecret.faint:type_name -> messages.effect.FaintEffect
	16, // 21: messages.effect.EffectWithSecret.summon:type_name -> messages.effect.SummonEffect
	17, // 22: messages.effect.EffectWithSecret.coin_toss:type_name -> messages.effect.CoinTossEffect
	18, // 23: messages.effect.EffectWithSecret.attach_energy:type_name -> messages.effect.AttachEnergyEffect
	19, // 24: messages.effect.EffectWithSecret.surrender:type_name -> messages.effect.SurrenderEffect
	20, // 25: messages.effect.EffectWithSecret.shuffle:type_name -> messages.effect.ShuffleEffect
	0,  // 26: messages.effect.Effect.energy_trash:type_name -> messages.effect.EnergyTrashEffect
	1,  // 27: messages.effect.Effect.use_card:type_name -> messages.effect.UseCardEffect
	3,  // 28: messages.effect.Effect.trash_hand:type_name -> messages.effect.TrashHandEffect
	4,  // 29: messages.effect.Effect.trash_deck:type_name -> messages.effect.TrashDeckEffect
	5,  // 30: messages.effect.Effect.use_skill_or_ability:type_name -> messages.effect.UseSkillOrAbilityEffect
	6,  // 31: messages.effect.Effect.recover:type_name -> messages.effect.RecoverEffect
	7,  // 32: messages.effect.Effect.damage:type_name -> messages.effect.DamageEffect
	8,  // 33: messages.effect.Effect.evolution:type_name -> messages.effect.EvolutionEffect
	9,  // 34: messages.effect.Effect.get_point:type_name -> messages.effect.GetPointEffect
	10, // 35: messages.effect.Effect.decide_win_or_lose:type_name -> messages.effect.DecideWinOrLoseEffect
	11, // 36: messages.effect.Effect.decide_first_or_second:type_name -> messages.effect.DecideFirstOrSecondEffect
	12, // 37: messages.effect.Effect.swap_battle_and_bench:type_name -> messages.effect.SwapBattleAndBenchEffect
	13, // 38: messages.effect.Effect.put_battle_from_bench:type_name -> messages.effect.PutBattleFromBenchEffect
	14, // 39: messages.effect.Effect.return_hand:type_name -> messages.effect.ReturnHandEffect
	15, // 40: messages.effect.Effect.faint:type_name -> messages.effect.FaintEffect
	16, // 41: messages.effect.Effect.summon:type_name -> messages.effect.SummonEffect
	17, // 42: messages.effect.Effect.coin_toss:type_name -> messages.effect.CoinTossEffect
	18, // 43: messages.effect.Effect.attach_energy:type_name -> messages.effect.AttachEnergyEffect
	19, // 44: messages.effect.Effect.surrender:type_name -> messages.effect.SurrenderEffect
	20, // 45: messages.effect.Effect.shuffle:type_name -> messages.effect.ShuffleEffect
	46, // [46:46] is the sub-list for method output_type
	46, // [46:46] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_messages_effect_proto_init() }
func file_messages_effect_proto_init() {
	if File_messages_effect_proto != nil {
		return
	}
	file_messages_common_proto_init()
	file_messages_card_proto_init()
	file_messages_effect_proto_msgTypes[21].OneofWrappers = []any{
		(*EffectWithSecret_EnergyTrash)(nil),
		(*EffectWithSecret_UseCard)(nil),
		(*EffectWithSecret_TrashHandSecret)(nil),
		(*EffectWithSecret_TrashDeck)(nil),
		(*EffectWithSecret_UseSkillOrAbility)(nil),
		(*EffectWithSecret_Recover)(nil),
		(*EffectWithSecret_Damage)(nil),
		(*EffectWithSecret_Evolution)(nil),
		(*EffectWithSecret_GetPoint)(nil),
		(*EffectWithSecret_DecideWinOrLose)(nil),
		(*EffectWithSecret_DecideFirstOrSecond)(nil),
		(*EffectWithSecret_SwapBattleAndBench)(nil),
		(*EffectWithSecret_PutBattleFromBench)(nil),
		(*EffectWithSecret_ReturnHand)(nil),
		(*EffectWithSecret_Faint)(nil),
		(*EffectWithSecret_Summon)(nil),
		(*EffectWithSecret_CoinToss)(nil),
		(*EffectWithSecret_AttachEnergy)(nil),
		(*EffectWithSecret_Surrender)(nil),
		(*EffectWithSecret_Shuffle)(nil),
	}
	file_messages_effect_proto_msgTypes[22].OneofWrappers = []any{
		(*Effect_EnergyTrash)(nil),
		(*Effect_UseCard)(nil),
		(*Effect_TrashHand)(nil),
		(*Effect_TrashDeck)(nil),
		(*Effect_UseSkillOrAbility)(nil),
		(*Effect_Recover)(nil),
		(*Effect_Damage)(nil),
		(*Effect_Evolution)(nil),
		(*Effect_GetPoint)(nil),
		(*Effect_DecideWinOrLose)(nil),
		(*Effect_DecideFirstOrSecond)(nil),
		(*Effect_SwapBattleAndBench)(nil),
		(*Effect_PutBattleFromBench)(nil),
		(*Effect_ReturnHand)(nil),
		(*Effect_Faint)(nil),
		(*Effect_Summon)(nil),
		(*Effect_CoinToss)(nil),
		(*Effect_AttachEnergy)(nil),
		(*Effect_Surrender)(nil),
		(*Effect_Shuffle)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_messages_effect_proto_rawDesc), len(file_messages_effect_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_messages_effect_proto_goTypes,
		DependencyIndexes: file_messages_effect_proto_depIdxs,
		MessageInfos:      file_messages_effect_proto_msgTypes,
	}.Build()
	File_messages_effect_proto = out.File
	file_messages_effect_proto_goTypes = nil
	file_messages_effect_proto_depIdxs = nil
}
