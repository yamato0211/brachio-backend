// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// health check
	// (GET /)
	HealthCheck(ctx echo.Context) error
	// 取得済みカード一覧の取得
	// (GET /cards)
	GetCards(ctx echo.Context) error
	// 自身のデッキリストを取得
	// (GET /decks)
	GetDeckList(ctx echo.Context) error
	// 空のデッキを作成
	// (POST /decks)
	CreateNewDeck(ctx echo.Context) error
	// デッキを削除
	// (DELETE /decks/{deckId})
	DeleteDeck(ctx echo.Context, deckId string) error
	// デッキを取得
	// (GET /decks/{deckId})
	GetDeck(ctx echo.Context, deckId string) error
	// デッキを更新
	// (PUT /decks/{deckId})
	UpdateDeck(ctx echo.Context, deckId string) error
	// ガチャ一覧取得
	// (GET /gachas)
	GetGachaList(ctx echo.Context) error
	// ガチャの強さ取得
	// (GET /gachas/power)
	GetGachaPower(ctx echo.Context) error
	// ガチャを引く
	// (POST /gachas/{gachaId})
	DrawGacha(ctx echo.Context, gachaId string) error
	// 所持アイテム一覧取得
	// (GET /items)
	GetMyItemList(ctx echo.Context) error
	// Websocket接続
	// (GET /ws)
	Ws(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// HealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) HealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HealthCheck(ctx)
	return err
}

// GetCards converts echo context to params.
func (w *ServerInterfaceWrapper) GetCards(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCards(ctx)
	return err
}

// GetDeckList converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeckList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDeckList(ctx)
	return err
}

// CreateNewDeck converts echo context to params.
func (w *ServerInterfaceWrapper) CreateNewDeck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateNewDeck(ctx)
	return err
}

// DeleteDeck converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDeck(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "deckId" -------------
	var deckId string

	err = runtime.BindStyledParameterWithOptions("simple", "deckId", ctx.Param("deckId"), &deckId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deckId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDeck(ctx, deckId)
	return err
}

// GetDeck converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeck(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "deckId" -------------
	var deckId string

	err = runtime.BindStyledParameterWithOptions("simple", "deckId", ctx.Param("deckId"), &deckId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deckId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDeck(ctx, deckId)
	return err
}

// UpdateDeck converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateDeck(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "deckId" -------------
	var deckId string

	err = runtime.BindStyledParameterWithOptions("simple", "deckId", ctx.Param("deckId"), &deckId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deckId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateDeck(ctx, deckId)
	return err
}

// GetGachaList converts echo context to params.
func (w *ServerInterfaceWrapper) GetGachaList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGachaList(ctx)
	return err
}

// GetGachaPower converts echo context to params.
func (w *ServerInterfaceWrapper) GetGachaPower(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGachaPower(ctx)
	return err
}

// DrawGacha converts echo context to params.
func (w *ServerInterfaceWrapper) DrawGacha(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gachaId" -------------
	var gachaId string

	err = runtime.BindStyledParameterWithOptions("simple", "gachaId", ctx.Param("gachaId"), &gachaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gachaId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DrawGacha(ctx, gachaId)
	return err
}

// GetMyItemList converts echo context to params.
func (w *ServerInterfaceWrapper) GetMyItemList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMyItemList(ctx)
	return err
}

// Ws converts echo context to params.
func (w *ServerInterfaceWrapper) Ws(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Ws(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.HealthCheck)
	router.GET(baseURL+"/cards", wrapper.GetCards)
	router.GET(baseURL+"/decks", wrapper.GetDeckList)
	router.POST(baseURL+"/decks", wrapper.CreateNewDeck)
	router.DELETE(baseURL+"/decks/:deckId", wrapper.DeleteDeck)
	router.GET(baseURL+"/decks/:deckId", wrapper.GetDeck)
	router.PUT(baseURL+"/decks/:deckId", wrapper.UpdateDeck)
	router.GET(baseURL+"/gachas", wrapper.GetGachaList)
	router.GET(baseURL+"/gachas/power", wrapper.GetGachaPower)
	router.POST(baseURL+"/gachas/:gachaId", wrapper.DrawGacha)
	router.GET(baseURL+"/items", wrapper.GetMyItemList)
	router.GET(baseURL+"/ws", wrapper.Ws)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
