// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// health check
	// (GET /)
	HealthCheck(ctx echo.Context) error
	// 取得済みカード一覧の取得
	// (GET /cards)
	GetCards(ctx echo.Context) error
	// 自身のデッキリストを取得
	// (GET /decks)
	GetDeckList(ctx echo.Context) error
	// 空のデッキを作成
	// (POST /decks)
	CreateNewDeck(ctx echo.Context) error
	// デッキを削除
	// (DELETE /decks/{deckId})
	DeleteDeck(ctx echo.Context, deckId string) error
	// デッキを取得
	// (GET /decks/{deckId})
	GetDeck(ctx echo.Context, deckId string) error
	// デッキを更新
	// (PUT /decks/{deckId})
	UpdateDeck(ctx echo.Context, deckId string) error
	// ガチャ一覧取得
	// (GET /gachas)
	GetGachaList(ctx echo.Context) error
	// ガチャの強さ取得
	// (GET /gachas/power)
	GetGachaPower(ctx echo.Context) error
	// ガチャを引く
	// (POST /gachas/{gachaId})
	DrawGacha(ctx echo.Context, gachaId string) error
	// 所持アイテム一覧取得
	// (GET /items)
	GetMyItemList(ctx echo.Context) error
	// Websocket接続
	// (GET /ws)
	Ws(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// HealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) HealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HealthCheck(ctx)
	return err
}

// GetCards converts echo context to params.
func (w *ServerInterfaceWrapper) GetCards(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCards(ctx)
	return err
}

// GetDeckList converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeckList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDeckList(ctx)
	return err
}

// CreateNewDeck converts echo context to params.
func (w *ServerInterfaceWrapper) CreateNewDeck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateNewDeck(ctx)
	return err
}

// DeleteDeck converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDeck(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "deckId" -------------
	var deckId string

	err = runtime.BindStyledParameterWithOptions("simple", "deckId", ctx.Param("deckId"), &deckId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deckId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDeck(ctx, deckId)
	return err
}

// GetDeck converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeck(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "deckId" -------------
	var deckId string

	err = runtime.BindStyledParameterWithOptions("simple", "deckId", ctx.Param("deckId"), &deckId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deckId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDeck(ctx, deckId)
	return err
}

// UpdateDeck converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateDeck(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "deckId" -------------
	var deckId string

	err = runtime.BindStyledParameterWithOptions("simple", "deckId", ctx.Param("deckId"), &deckId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deckId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateDeck(ctx, deckId)
	return err
}

// GetGachaList converts echo context to params.
func (w *ServerInterfaceWrapper) GetGachaList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGachaList(ctx)
	return err
}

// GetGachaPower converts echo context to params.
func (w *ServerInterfaceWrapper) GetGachaPower(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGachaPower(ctx)
	return err
}

// DrawGacha converts echo context to params.
func (w *ServerInterfaceWrapper) DrawGacha(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gachaId" -------------
	var gachaId string

	err = runtime.BindStyledParameterWithOptions("simple", "gachaId", ctx.Param("gachaId"), &gachaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gachaId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DrawGacha(ctx, gachaId)
	return err
}

// GetMyItemList converts echo context to params.
func (w *ServerInterfaceWrapper) GetMyItemList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMyItemList(ctx)
	return err
}

// Ws converts echo context to params.
func (w *ServerInterfaceWrapper) Ws(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Ws(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.HealthCheck)
	router.GET(baseURL+"/cards", wrapper.GetCards)
	router.GET(baseURL+"/decks", wrapper.GetDeckList)
	router.POST(baseURL+"/decks", wrapper.CreateNewDeck)
	router.DELETE(baseURL+"/decks/:deckId", wrapper.DeleteDeck)
	router.GET(baseURL+"/decks/:deckId", wrapper.GetDeck)
	router.PUT(baseURL+"/decks/:deckId", wrapper.UpdateDeck)
	router.GET(baseURL+"/gachas", wrapper.GetGachaList)
	router.GET(baseURL+"/gachas/power", wrapper.GetGachaPower)
	router.POST(baseURL+"/gachas/:gachaId", wrapper.DrawGacha)
	router.GET(baseURL+"/items", wrapper.GetMyItemList)
	router.GET(baseURL+"/ws", wrapper.Ws)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
