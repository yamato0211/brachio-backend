// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// health check
	// (GET /)
	HealthCheck(ctx echo.Context) error
	// 取得済みカード一覧の取得
	// (GET /cards)
	GetCards(ctx echo.Context) error
	// 自身のデッキリストを取得
	// (GET /decks)
	GetDeckList(ctx echo.Context) error
	// 空のデッキを作成
	// (POST /decks)
	CreateNewDeck(ctx echo.Context) error
	// デッキを削除
	// (DELETE /decks/{deckId})
	DeleteDeck(ctx echo.Context, deckId string) error
	// デッキを取得
	// (GET /decks/{deckId})
	GetDeck(ctx echo.Context, deckId string) error
	// デッキを更新
	// (PUT /decks/{deckId})
	UpdateDeck(ctx echo.Context, deckId string) error
	// ガチャ一覧取得
	// (GET /gachas)
	GetGachaList(ctx echo.Context) error
	// ガチャの強さ取得
	// (GET /gachas/power)
	GetGachaPower(ctx echo.Context) error
	// ガチャを引く
	// (POST /gachas/{gachaId})
	DrawGacha(ctx echo.Context, gachaId string) error
	// 所持アイテム一覧取得
	// (GET /items)
	GetMyItemList(ctx echo.Context) error
	// Websocket接続
	// (GET /ws)
	Ws(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// HealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) HealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HealthCheck(ctx)
	return err
}

// GetCards converts echo context to params.
func (w *ServerInterfaceWrapper) GetCards(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCards(ctx)
	return err
}

// GetDeckList converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeckList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDeckList(ctx)
	return err
}

// CreateNewDeck converts echo context to params.
func (w *ServerInterfaceWrapper) CreateNewDeck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateNewDeck(ctx)
	return err
}

// DeleteDeck converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDeck(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "deckId" -------------
	var deckId string

	err = runtime.BindStyledParameterWithOptions("simple", "deckId", ctx.Param("deckId"), &deckId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deckId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDeck(ctx, deckId)
	return err
}

// GetDeck converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeck(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "deckId" -------------
	var deckId string

	err = runtime.BindStyledParameterWithOptions("simple", "deckId", ctx.Param("deckId"), &deckId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deckId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDeck(ctx, deckId)
	return err
}

// UpdateDeck converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateDeck(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "deckId" -------------
	var deckId string

	err = runtime.BindStyledParameterWithOptions("simple", "deckId", ctx.Param("deckId"), &deckId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deckId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateDeck(ctx, deckId)
	return err
}

// GetGachaList converts echo context to params.
func (w *ServerInterfaceWrapper) GetGachaList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGachaList(ctx)
	return err
}

// GetGachaPower converts echo context to params.
func (w *ServerInterfaceWrapper) GetGachaPower(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGachaPower(ctx)
	return err
}

// DrawGacha converts echo context to params.
func (w *ServerInterfaceWrapper) DrawGacha(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gachaId" -------------
	var gachaId string

	err = runtime.BindStyledParameterWithOptions("simple", "gachaId", ctx.Param("gachaId"), &gachaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gachaId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DrawGacha(ctx, gachaId)
	return err
}

// GetMyItemList converts echo context to params.
func (w *ServerInterfaceWrapper) GetMyItemList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMyItemList(ctx)
	return err
}

// Ws converts echo context to params.
func (w *ServerInterfaceWrapper) Ws(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Ws(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.HealthCheck)
	router.GET(baseURL+"/cards", wrapper.GetCards)
	router.GET(baseURL+"/decks", wrapper.GetDeckList)
	router.POST(baseURL+"/decks", wrapper.CreateNewDeck)
	router.DELETE(baseURL+"/decks/:deckId", wrapper.DeleteDeck)
	router.GET(baseURL+"/decks/:deckId", wrapper.GetDeck)
	router.PUT(baseURL+"/decks/:deckId", wrapper.UpdateDeck)
	router.GET(baseURL+"/gachas", wrapper.GetGachaList)
	router.GET(baseURL+"/gachas/power", wrapper.GetGachaPower)
	router.POST(baseURL+"/gachas/:gachaId", wrapper.DrawGacha)
	router.GET(baseURL+"/items", wrapper.GetMyItemList)
	router.GET(baseURL+"/ws", wrapper.Ws)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xaX28bxxH/KsK2bzmYVBoEAd9sCbWJJrGQ2PCDQQTr44p34f3L3tESKxDg3dW2FDuR",
	"K0Ry7KRFY6eVY9mym7aJYqvOh1mTkp7yFYrdvf+3R57+pTbgF/Ik3s7N/GbmN7OztwBkU7dMAxmODWoL",
	"wJYVpEN2CS+pmup06WUT2TJWLUc1DVADO0s/DfvrQAJoHuqWhugdBtQRqPEvCTho3gE1/tWTgIVNC2FH",
	"RXZ8q1jo4OZndHnXosJsB6tGiwrg8rJLdh88HH75+XDtWn5JTwIYfdJRMWqC2sWUWo3oZvPSx0hmCsoQ",
	"N5nJmnZ2FtQuLoDfYjQLauA3lRieSoBNRYe2g/AUXdOTFjLWqc28osTbIP428Zfq04AqBptnDa0Lag7u",
	"oHGqq02Bxo0U9vSR9IMulTGCDnofzU0juf3Rm9XJjzCyLdOw2Z2iRVIZA/xrxPeJ94gZcACFJdBEcrs8",
	"xPTuU9BGAoCpr7iiDtLZxShBMvdSqA/EGHbp38hAuBVaXEYQ0pCODCcvK2M+Vy/xAIlHn8CJASrMzmLI",
	"QdZBsqmZeB/qjnfomIiUClI2ElKUtUpHv2RAVZsK0mu8o7JgMlOlKH9TAouijOJ5QXWUevNI4u3Q8O0/",
	"oQMPgxaGNg2gMFelLM1mAY6ZIMDiIDi8JBjwNL+YZKrEdUPKoRSn9EWjo2kS/WgcGDwM505DWYEfoE86",
	"yGbVJ4OJfQ4Z0xjOcWhmYUdzQG0WajaSMlBNVvf694j3kPgu8e8R9zpxvyPuVeJej9PmkmlqCBp5qKLH",
	"iOI9THPK7UZHpwtCOGZVTM2cgw6iKaSpLcUxqDMkYNldWVFldlNLcfg/mxC3DcSW6siBGmAgtEyDImdi",
	"HWoJDeIkb1GQCmqLBFQdttB5rNG/w8u0I8rVnxC7cnQVP7VQ0M4Xzwb+8vkP3gXl6S5cK6S7fIRLOZNF",
	"HmT4zZhzCGdAlBWIW1TY2xIwWP9TzWEV3ZPrppafD76+T9zNOOr8PxP/MfG3Y9VVw0EthJnFwgZr+PAb",
	"oQji3tj9/jFxnxPvOv1014m7ubO+Mlx9IpCe5fRA5+ChIkxoQc6iYXZomFeL8jkPDV+QM2mpP7zhihUt",
	"KJXeXeJ9S/yrxP9bffqX7cXkP4j7BXHvE3fjxVZ/+KflX7aX9hNPsZwyIcUtkhK2i7BLNKe1BWAaqHRD",
	"+55ppPra8Ss+7FiWife35rRpNm1+fyOlrrgNGly5H3XPgyv/3OvfoRHp3yL+IxaOV4l3L98hQdw8x4Ap",
	"28izuymfzlvQsNmjC5t44j2jhc9fLGh7RrFPIGIk+8Ra1Q+7lygOvRBSsQkYYuHOj/gPadT6DyLgxyV7",
	"iG2KDFMWlorl0JthkdN5rAIJ2GEMAgm0aGwJq1QsiXZEUyE3CAkmnUGJXfDIPW4ccwnl0GVTu4zs32NT",
	"Z+itEu9H4m0Sv0/8z+Lfz5npX28S/1OQCsbEtQQUC9TerhYV13T4CLGObAj9XKVec+jWccqkvc6kBOy2",
	"qmm8AZPZ/+LOgn83aMtAH8sqFL88GwbKfL7dSsF1HEIbEphDkPcwNdr89coWhSgdhn+9U1Qa0lFRdjxQ",
	"QOGJW4rjPmbKA0wmos1M1tInrGl/GrPZeDo97PSlYOwS03+y8hyhrf5d4v+LeD8R72dq6z4sTiT9KBXC",
	"23qZTM9qstf/fnBjbXDFT87MBHSQo60EPxTJXCySGZBITiZlj6ywMzNJKZRb8gmQIoi8Nj5xV2g76DHE",
	"/ZRakyJ5IcHk3faYeD8AqdxYhkkRDXhiKig5KMkErWLF/BgpmxA7bv/6um680nVD1OAeJQ3/h/h/YaS0",
	"X2o6TjLuUpXfVXmCl0o/UV8lSEYL8uGvcL7zOlNe3UyRXrvvVXZfoycd6nQldRI2+lwkMeeSxNMxqooq",
	"i3eCvMwX9wqpjdyROyO3i7CFm4i48znciVKsat7ePvG/YRVjS7hLSRuWXT4/YeKJN9ionG+jqeFvCDfM",
	"RSc+FO9jOqRlsEa2S2MObelq1ZgVdMZnoNz+4wT9hI5iGhOnMJQV1ZyYOj8zQdzNkzP1F89Wh+tfDr/a",
	"In2PPkF1WPM8auHJmfrEhxaSgQQuIxxwTvVE9cQkNd20kAEtFdTA705UT7xFQxk6CouACv1oIYYMDSJI",
	"tWTEcwZBzVGmFCS32SSHH9OyRW9Wq3m7zv6BQWZ3dB3iLqgBhQmYkJkE+lMlyt7ggZlZ2vLa4Pmt4dYi",
	"cX+OWo4XW/3df6wTb4X/StzbxLsOpIyup5EzFRxsihSVTcMJjiGgZWmqzFZWPrZ5FPKIH0smcfsRnF+N",
	"tH6UNe4m/5U6F7bscBIFGgylJpLbxSjtXnuw+3SDdWLBARfxH/DMLoHSNJLbzIRDAlWKQTKnnXkKHo9i",
	"GWsTKLLzQVY1hBy4893TlChv5cV/vx4u3izAayr5skIesckjC60Rb0UIQOJqNTNIFdmWRyeKscoC/ao3",
	"exwpDTmjTtEp3kuf7t3+tgCtaSYggMqCGOrIQZh3IKOOZlX6L8pHcZXjaoEk//L5cQxnlqsbOfe8lbfl",
	"fXNiKvBXGry8kaKgEuZjammJ7Hs5wDk6Wkwc45dJ6DxcwvTtjEF6+NW/h2tPCpA+bzXh/zkS2aH8KbPZ",
	"PVKcOcJpVXovp2+5g8Tkw3rt4goXHeiWrv3sTYhfrazxVwoOUs0yluXin0tOglSxwqP30VDRlmL7R+Ku",
	"lkUr3OocW+wkNlT7giaypAw6C+w7qGBWwb4nFOytDLZXibucr1zhyzRj6SL1noeALgJ1Xgq+yL4hdAzc",
	"USpd2HDtUNmS9JwoGCI1hDnCX6lIvs2Q45Vb7C2R23y7lcuX97p1B+m/Gr2wt0tK4JW3KINfkeG5xGJP",
	"5FDO2YX7wQv2wbaBF9Al25TbyBl+/vedH+5wU2yELxeV5EfhyHmDzaG32TxtG0igw0ZliuNYtUpFM2Wo",
	"Kabt1N6pvlNl06PAnhEkubG3dpcT48mZeiZtQa/R+18AAAD//4dV4OtvLgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
