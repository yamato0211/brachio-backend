// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	. "github.com/yamato0211/brachio-backend/internal/handler/schema"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// health check
	// (GET /)
	HealthCheck(ctx echo.Context) error
	// 取得済みカード一覧の取得
	// (GET /cards)
	GetCards(ctx echo.Context, params GetCardsParams) error
	// 自身のデッキリストを取得
	// (GET /decks)
	GetDeckList(ctx echo.Context) error
	// 空のデッキを作成
	// (POST /decks)
	CreateNewDeck(ctx echo.Context) error
	// デッキを削除
	// (DELETE /decks/{deckId})
	DeleteDeck(ctx echo.Context, deckId string) error
	// デッキを取得
	// (GET /decks/{deckId})
	GetDeck(ctx echo.Context, deckId string) error
	// デッキを更新
	// (PUT /decks/{deckId})
	UpdateDeck(ctx echo.Context, deckId string) error
	// ガチャ一覧取得
	// (GET /gachas)
	GetGachaList(ctx echo.Context) error
	// ガチャの強さ取得
	// (GET /gachas/power)
	GetGachaPower(ctx echo.Context) error
	// ガチャを引く
	// (POST /gachas/{gachaId})
	DrawGacha(ctx echo.Context, gachaId string) error
	// 所持アイテム一覧取得
	// (GET /items)
	GetMyItemList(ctx echo.Context) error
	// プレゼント一覧取得
	// (GET /presents)
	GetMyPresents(ctx echo.Context) error
	// プレゼント受け取り
	// (POST /presents/{presentId})
	ReceivePresent(ctx echo.Context, presentId string) error
	// Websocket接続
	// (GET /ws)
	Ws(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// HealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) HealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HealthCheck(ctx)
	return err
}

// GetCards converts echo context to params.
func (w *ServerInterfaceWrapper) GetCards(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCardsParams
	// ------------- Optional query parameter "is_all" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_all", ctx.QueryParams(), &params.IsAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_all: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCards(ctx, params)
	return err
}

// GetDeckList converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeckList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDeckList(ctx)
	return err
}

// CreateNewDeck converts echo context to params.
func (w *ServerInterfaceWrapper) CreateNewDeck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateNewDeck(ctx)
	return err
}

// DeleteDeck converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDeck(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "deckId" -------------
	var deckId string

	err = runtime.BindStyledParameterWithOptions("simple", "deckId", ctx.Param("deckId"), &deckId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deckId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDeck(ctx, deckId)
	return err
}

// GetDeck converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeck(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "deckId" -------------
	var deckId string

	err = runtime.BindStyledParameterWithOptions("simple", "deckId", ctx.Param("deckId"), &deckId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deckId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDeck(ctx, deckId)
	return err
}

// UpdateDeck converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateDeck(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "deckId" -------------
	var deckId string

	err = runtime.BindStyledParameterWithOptions("simple", "deckId", ctx.Param("deckId"), &deckId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deckId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateDeck(ctx, deckId)
	return err
}

// GetGachaList converts echo context to params.
func (w *ServerInterfaceWrapper) GetGachaList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGachaList(ctx)
	return err
}

// GetGachaPower converts echo context to params.
func (w *ServerInterfaceWrapper) GetGachaPower(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGachaPower(ctx)
	return err
}

// DrawGacha converts echo context to params.
func (w *ServerInterfaceWrapper) DrawGacha(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gachaId" -------------
	var gachaId string

	err = runtime.BindStyledParameterWithOptions("simple", "gachaId", ctx.Param("gachaId"), &gachaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gachaId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DrawGacha(ctx, gachaId)
	return err
}

// GetMyItemList converts echo context to params.
func (w *ServerInterfaceWrapper) GetMyItemList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMyItemList(ctx)
	return err
}

// GetMyPresents converts echo context to params.
func (w *ServerInterfaceWrapper) GetMyPresents(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMyPresents(ctx)
	return err
}

// ReceivePresent converts echo context to params.
func (w *ServerInterfaceWrapper) ReceivePresent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "presentId" -------------
	var presentId string

	err = runtime.BindStyledParameterWithOptions("simple", "presentId", ctx.Param("presentId"), &presentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter presentId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ReceivePresent(ctx, presentId)
	return err
}

// Ws converts echo context to params.
func (w *ServerInterfaceWrapper) Ws(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Ws(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.HealthCheck)
	router.GET(baseURL+"/cards", wrapper.GetCards)
	router.GET(baseURL+"/decks", wrapper.GetDeckList)
	router.POST(baseURL+"/decks", wrapper.CreateNewDeck)
	router.DELETE(baseURL+"/decks/:deckId", wrapper.DeleteDeck)
	router.GET(baseURL+"/decks/:deckId", wrapper.GetDeck)
	router.PUT(baseURL+"/decks/:deckId", wrapper.UpdateDeck)
	router.GET(baseURL+"/gachas", wrapper.GetGachaList)
	router.GET(baseURL+"/gachas/power", wrapper.GetGachaPower)
	router.POST(baseURL+"/gachas/:gachaId", wrapper.DrawGacha)
	router.GET(baseURL+"/items", wrapper.GetMyItemList)
	router.GET(baseURL+"/presents", wrapper.GetMyPresents)
	router.POST(baseURL+"/presents/:presentId", wrapper.ReceivePresent)
	router.GET(baseURL+"/ws", wrapper.Ws)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
