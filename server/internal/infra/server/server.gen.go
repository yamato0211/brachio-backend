// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	. "github.com/yamato0211/brachio-backend/internal/handler/schema"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// health check
	// (GET /)
	HealthCheck(ctx echo.Context) error
	// 取得済みカード一覧の取得
	// (GET /cards)
	GetCards(ctx echo.Context, params GetCardsParams) error
	// 自身のデッキリストを取得
	// (GET /decks)
	GetDeckList(ctx echo.Context) error
	// 空のデッキを作成
	// (POST /decks)
	CreateNewDeck(ctx echo.Context) error
	// デッキを削除
	// (DELETE /decks/{deckId})
	DeleteDeck(ctx echo.Context, deckId string) error
	// デッキを取得
	// (GET /decks/{deckId})
	GetDeck(ctx echo.Context, deckId string) error
	// デッキを更新
	// (PUT /decks/{deckId})
	UpdateDeck(ctx echo.Context, deckId string) error
	// ガチャ一覧取得
	// (GET /gachas)
	GetGachaList(ctx echo.Context) error
	// ガチャの強さ取得
	// (GET /gachas/power)
	GetGachaPower(ctx echo.Context) error
	// ガチャを引く
	// (POST /gachas/{gachaId})
	DrawGacha(ctx echo.Context, gachaId string) error
	// 所持アイテム一覧取得
	// (GET /items)
	GetMyItemList(ctx echo.Context) error
	// Websocket接続
	// (GET /ws)
	Ws(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// HealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) HealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HealthCheck(ctx)
	return err
}

// GetCards converts echo context to params.
func (w *ServerInterfaceWrapper) GetCards(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCardsParams
	// ------------- Optional query parameter "is_all" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_all", ctx.QueryParams(), &params.IsAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_all: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCards(ctx, params)
	return err
}

// GetDeckList converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeckList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDeckList(ctx)
	return err
}

// CreateNewDeck converts echo context to params.
func (w *ServerInterfaceWrapper) CreateNewDeck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateNewDeck(ctx)
	return err
}

// DeleteDeck converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDeck(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "deckId" -------------
	var deckId string

	err = runtime.BindStyledParameterWithOptions("simple", "deckId", ctx.Param("deckId"), &deckId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deckId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDeck(ctx, deckId)
	return err
}

// GetDeck converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeck(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "deckId" -------------
	var deckId string

	err = runtime.BindStyledParameterWithOptions("simple", "deckId", ctx.Param("deckId"), &deckId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deckId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDeck(ctx, deckId)
	return err
}

// UpdateDeck converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateDeck(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "deckId" -------------
	var deckId string

	err = runtime.BindStyledParameterWithOptions("simple", "deckId", ctx.Param("deckId"), &deckId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deckId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateDeck(ctx, deckId)
	return err
}

// GetGachaList converts echo context to params.
func (w *ServerInterfaceWrapper) GetGachaList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGachaList(ctx)
	return err
}

// GetGachaPower converts echo context to params.
func (w *ServerInterfaceWrapper) GetGachaPower(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGachaPower(ctx)
	return err
}

// DrawGacha converts echo context to params.
func (w *ServerInterfaceWrapper) DrawGacha(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gachaId" -------------
	var gachaId string

	err = runtime.BindStyledParameterWithOptions("simple", "gachaId", ctx.Param("gachaId"), &gachaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gachaId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DrawGacha(ctx, gachaId)
	return err
}

// GetMyItemList converts echo context to params.
func (w *ServerInterfaceWrapper) GetMyItemList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMyItemList(ctx)
	return err
}

// Ws converts echo context to params.
func (w *ServerInterfaceWrapper) Ws(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Ws(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.HealthCheck)
	router.GET(baseURL+"/cards", wrapper.GetCards)
	router.GET(baseURL+"/decks", wrapper.GetDeckList)
	router.POST(baseURL+"/decks", wrapper.CreateNewDeck)
	router.DELETE(baseURL+"/decks/:deckId", wrapper.DeleteDeck)
	router.GET(baseURL+"/decks/:deckId", wrapper.GetDeck)
	router.PUT(baseURL+"/decks/:deckId", wrapper.UpdateDeck)
	router.GET(baseURL+"/gachas", wrapper.GetGachaList)
	router.GET(baseURL+"/gachas/power", wrapper.GetGachaPower)
	router.POST(baseURL+"/gachas/:gachaId", wrapper.DrawGacha)
	router.GET(baseURL+"/items", wrapper.GetMyItemList)
	router.GET(baseURL+"/ws", wrapper.Ws)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
