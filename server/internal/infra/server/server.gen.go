// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	. "github.com/yamato0211/brachio-backend/internal/handler/schema"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// health check
	// (GET /)
	HealthCheck(ctx echo.Context) error
	// 取得済みカード一覧の取得
	// (GET /cards)
	GetCards(ctx echo.Context, params GetCardsParams) error
	// 自身のデッキリストを取得
	// (GET /decks)
	GetDeckList(ctx echo.Context) error
	// 空のデッキを作成
	// (POST /decks)
	CreateNewDeck(ctx echo.Context) error
	// デッキを削除
	// (DELETE /decks/{deckId})
	DeleteDeck(ctx echo.Context, deckId string) error
	// デッキを取得
	// (GET /decks/{deckId})
	GetDeck(ctx echo.Context, deckId string) error
	// デッキを更新
	// (PUT /decks/{deckId})
	UpdateDeck(ctx echo.Context, deckId string) error
	// ガチャ一覧取得
	// (GET /gachas)
	GetGachaList(ctx echo.Context) error
	// ガチャの強さ取得
	// (GET /gachas/power)
	GetGachaPower(ctx echo.Context) error
	// ガチャを引く
	// (POST /gachas/{gachaId})
	DrawGacha(ctx echo.Context, gachaId string) error
	// 所持アイテム一覧取得
	// (GET /items)
	GetMyItemList(ctx echo.Context) error
	// プレゼント一覧取得
	// (GET /presents)
	GetMyPresents(ctx echo.Context) error
	// プレゼント受け取り
	// (POST /presents/{presentId})
	ReceivePresent(ctx echo.Context, presentId string) error
	// Get user by user ID
	// (GET /users/{userId})
	GetUser(ctx echo.Context, userId string) error
	// Websocket接続
	// (GET /ws)
	Ws(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// HealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) HealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HealthCheck(ctx)
	return err
}

// GetCards converts echo context to params.
func (w *ServerInterfaceWrapper) GetCards(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCardsParams
	// ------------- Optional query parameter "is_all" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_all", ctx.QueryParams(), &params.IsAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_all: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCards(ctx, params)
	return err
}

// GetDeckList converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeckList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDeckList(ctx)
	return err
}

// CreateNewDeck converts echo context to params.
func (w *ServerInterfaceWrapper) CreateNewDeck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateNewDeck(ctx)
	return err
}

// DeleteDeck converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDeck(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "deckId" -------------
	var deckId string

	err = runtime.BindStyledParameterWithOptions("simple", "deckId", ctx.Param("deckId"), &deckId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deckId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDeck(ctx, deckId)
	return err
}

// GetDeck converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeck(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "deckId" -------------
	var deckId string

	err = runtime.BindStyledParameterWithOptions("simple", "deckId", ctx.Param("deckId"), &deckId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deckId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDeck(ctx, deckId)
	return err
}

// UpdateDeck converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateDeck(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "deckId" -------------
	var deckId string

	err = runtime.BindStyledParameterWithOptions("simple", "deckId", ctx.Param("deckId"), &deckId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deckId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateDeck(ctx, deckId)
	return err
}

// GetGachaList converts echo context to params.
func (w *ServerInterfaceWrapper) GetGachaList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGachaList(ctx)
	return err
}

// GetGachaPower converts echo context to params.
func (w *ServerInterfaceWrapper) GetGachaPower(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGachaPower(ctx)
	return err
}

// DrawGacha converts echo context to params.
func (w *ServerInterfaceWrapper) DrawGacha(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gachaId" -------------
	var gachaId string

	err = runtime.BindStyledParameterWithOptions("simple", "gachaId", ctx.Param("gachaId"), &gachaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gachaId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DrawGacha(ctx, gachaId)
	return err
}

// GetMyItemList converts echo context to params.
func (w *ServerInterfaceWrapper) GetMyItemList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMyItemList(ctx)
	return err
}

// GetMyPresents converts echo context to params.
func (w *ServerInterfaceWrapper) GetMyPresents(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMyPresents(ctx)
	return err
}

// ReceivePresent converts echo context to params.
func (w *ServerInterfaceWrapper) ReceivePresent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "presentId" -------------
	var presentId string

	err = runtime.BindStyledParameterWithOptions("simple", "presentId", ctx.Param("presentId"), &presentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter presentId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ReceivePresent(ctx, presentId)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", ctx.Param("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUser(ctx, userId)
	return err
}

// Ws converts echo context to params.
func (w *ServerInterfaceWrapper) Ws(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Ws(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.HealthCheck)
	router.GET(baseURL+"/cards", wrapper.GetCards)
	router.GET(baseURL+"/decks", wrapper.GetDeckList)
	router.POST(baseURL+"/decks", wrapper.CreateNewDeck)
	router.DELETE(baseURL+"/decks/:deckId", wrapper.DeleteDeck)
	router.GET(baseURL+"/decks/:deckId", wrapper.GetDeck)
	router.PUT(baseURL+"/decks/:deckId", wrapper.UpdateDeck)
	router.GET(baseURL+"/gachas", wrapper.GetGachaList)
	router.GET(baseURL+"/gachas/power", wrapper.GetGachaPower)
	router.POST(baseURL+"/gachas/:gachaId", wrapper.DrawGacha)
	router.GET(baseURL+"/items", wrapper.GetMyItemList)
	router.GET(baseURL+"/presents", wrapper.GetMyPresents)
	router.POST(baseURL+"/presents/:presentId", wrapper.ReceivePresent)
	router.GET(baseURL+"/users/:userId", wrapper.GetUser)
	router.GET(baseURL+"/ws", wrapper.Ws)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
