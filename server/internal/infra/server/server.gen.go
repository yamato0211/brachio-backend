// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	. "github.com/yamato0211/brachio-backend/internal/handler/schema"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 所持カード一覧取得
	// (GET /cards)
	GetMyCardList(ctx echo.Context) error
	// カード取得
	// (GET /cards/{cardNumber})
	GetMyCard(ctx echo.Context, cardNumber string) error
	// デッキ一覧取得
	// (GET /decks)
	GetMyDeckList(ctx echo.Context) error
	// デッキ作成
	// (POST /decks)
	PostMyDeck(ctx echo.Context) error
	// デッキ取得
	// (GET /decks/{deckId})
	GetMyDeck(ctx echo.Context, deckId string) error
	// デッキ編集
	// (PUT /decks/{deckId})
	PutMyDeck(ctx echo.Context, deckId string) error
	// ガチャ一覧取得
	// (GET /gachas)
	GetGachaList(ctx echo.Context) error
	// ガチャを引く
	// (POST /gachas/{gachaId})
	PostGachaDraw(ctx echo.Context, gachaId string) error
	// 所持アイテム一覧取得
	// (GET /items)
	GetMyItemList(ctx echo.Context) error
	// パックパワーの溜まり状況取得
	// (GET /pack-power)
	GetPackPower(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetMyCardList converts echo context to params.
func (w *ServerInterfaceWrapper) GetMyCardList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMyCardList(ctx)
	return err
}

// GetMyCard converts echo context to params.
func (w *ServerInterfaceWrapper) GetMyCard(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "cardNumber" -------------
	var cardNumber string

	err = runtime.BindStyledParameterWithOptions("simple", "cardNumber", ctx.Param("cardNumber"), &cardNumber, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cardNumber: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMyCard(ctx, cardNumber)
	return err
}

// GetMyDeckList converts echo context to params.
func (w *ServerInterfaceWrapper) GetMyDeckList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMyDeckList(ctx)
	return err
}

// PostMyDeck converts echo context to params.
func (w *ServerInterfaceWrapper) PostMyDeck(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostMyDeck(ctx)
	return err
}

// GetMyDeck converts echo context to params.
func (w *ServerInterfaceWrapper) GetMyDeck(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "deckId" -------------
	var deckId string

	err = runtime.BindStyledParameterWithOptions("simple", "deckId", ctx.Param("deckId"), &deckId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deckId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMyDeck(ctx, deckId)
	return err
}

// PutMyDeck converts echo context to params.
func (w *ServerInterfaceWrapper) PutMyDeck(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "deckId" -------------
	var deckId string

	err = runtime.BindStyledParameterWithOptions("simple", "deckId", ctx.Param("deckId"), &deckId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deckId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutMyDeck(ctx, deckId)
	return err
}

// GetGachaList converts echo context to params.
func (w *ServerInterfaceWrapper) GetGachaList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGachaList(ctx)
	return err
}

// PostGachaDraw converts echo context to params.
func (w *ServerInterfaceWrapper) PostGachaDraw(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gachaId" -------------
	var gachaId string

	err = runtime.BindStyledParameterWithOptions("simple", "gachaId", ctx.Param("gachaId"), &gachaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gachaId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostGachaDraw(ctx, gachaId)
	return err
}

// GetMyItemList converts echo context to params.
func (w *ServerInterfaceWrapper) GetMyItemList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMyItemList(ctx)
	return err
}

// GetPackPower converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackPower(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPackPower(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/cards", wrapper.GetMyCardList)
	router.GET(baseURL+"/cards/:cardNumber", wrapper.GetMyCard)
	router.GET(baseURL+"/decks", wrapper.GetMyDeckList)
	router.POST(baseURL+"/decks", wrapper.PostMyDeck)
	router.GET(baseURL+"/decks/:deckId", wrapper.GetMyDeck)
	router.PUT(baseURL+"/decks/:deckId", wrapper.PutMyDeck)
	router.GET(baseURL+"/gachas", wrapper.GetGachaList)
	router.POST(baseURL+"/gachas/:gachaId", wrapper.PostGachaDraw)
	router.GET(baseURL+"/items", wrapper.GetMyItemList)
	router.GET(baseURL+"/pack-power", wrapper.GetPackPower)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZX1MTyRb/KlTf+3Bv1VwStO5L3lRWll3/UILlg5WHZtIkY5KZsaejpqhUZWZcFkGF",
	"pfyz61K6yhawgmFXS0Vl3Q/TJMCTX2GruyeTkOkZJoJ/tsoHKmEyfU6fc36/X5/uHgeqUTQNHenEAqlx",
	"YKk5VIT86zGIM+zT0NHpMZA6Pw7+jdEYSIF/JVpjEt6AxElDtwjCfFBFiX53uGSaBo779oBhZCzxZrqi",
	"gH6k5tm0TGyYCBMN8cmqEGf4lwyyVKyZRDN0kALUWaHuBnWvUfcxdV5RdxIoQCOoyN+N8upNDZCyiUAK",
	"QIxhmf2PCqjYTFanr2Xq3qDuCnVqzKldq/9xv1FdiuvxK2FZ5lTLSNy531PXpc6TwX6gAIxg5rReKIMU",
	"wSXkW7AI1vQsM6HDIoowUp+9AQKjWjMxRi8glU+tOcuAKT9YpJeKIHUeDGBoWUABxzWMgALOQYIwUMAJ",
	"LZsjOrOvgCGrrOY0lb+UzRHxsB/ivI740JOIwAJ7hGHW0IECThm4CAsgLQlwAKo5GASGNHXOKnVt6i7E",
	"S51WhFl0FhciDG3delN3Z86eOQEUMMbmSEAKlLAG4leiaSp2JXjA/RhePoMulpBFJLFbI0hnbwTd9SV3",
	"qgu+T2pPU/s3ak9Qe7rlfNQwCgjqe3q3TEO3UNC9CdW8FREptZfqG7epfZXaD3yixmXLEFTzQapIZ+rr",
	"h1Q1TpWKowhHSscUdZ9Rd5a6G63kaDpBWYSZA2ZlhD8Nt+H8RZ1fqXu3jR+eYgIF+HoIvNlKAY7GxlhE",
	"QeJNvWrcn5chDV0xoW7xtzoHNaYf1jeeU/cHTv81KejkulP/bpm6iyws5wWXuaXN9Wrj6gy1V+q1e9R+",
	"S53p/fPKy9tB8MozFRIihlgjZZkyrlLnEVs23AnqLEgKL8PaIEFFCcyMkkwxG9eqjet24/bvUlTJhesR",
	"h9EEdX8Z7H+3Mdn+gNq3qL1M7RVRj3cb17rJUstObAFqX/L/4dTaL1FyZnDk10Ox6/qFU356MCIYQXLM",
	"sCSMofYKteeoM02dZ347F7Rh5bVCQbbyuGvUeRF3hRlmVmTdmFUalWNyp/q0fv1Oo/Z8597Nnv+wVc1+",
	"ovT0icdKzyHx5b9tQD0KLd7+DBOYRX3NL4ekICWez5g95GWERBsVd4iM4nyVDa///xv371HnDaMGL0Ws",
	"nnxz/cn265X99eFhcx0yLgvB6ZhJDuIskhBva+ZtfX658XqeccxeoPYia0ecaZ/v1K6FCbSOrshEffUh",
	"tWtt469vP10TDOY+lqhd21qakxuVhSVgGI7lzqVGyps2uux3L5KBTGJkE6pS9yHXsHV5vkJ2ICyOECEh",
	"0hSLIdSubT9ebfx4M95itXvP+aUT/NIJfshOkK0SSC0xg8OMUgJkowhihI+USK713/FmLN+cGwGKOH/h",
	"my/+a8tZjhATVJhhTR8z2HiikQL7ZSSHeoaMPGJ/PUeGBoECLiEsig2SvcnePhadYSIdmhpIgcO9yd7D",
	"TDggyfFpJXyhzqLQNtXP3uZ6dXtxiTpz9Zk79bd3qX2X69pPtOoA7gZDNnAwA1JgAJGTZUa4E5pFOBDE",
	"XpE7O5RMCsXSiXegAE2zoKl8eOKCJcAqFInvZvexXDDdkoNBhLOrYvysq71W59OVNFv2i0WIy2EZEelg",
	"BYNZi7GaZRWkmWGR4MR4S2QqodluE4quMswLimEREYQtHkEYkW4/rs+8ZAsBe8xAAJqMaVdBVqyLJQ2z",
	"VVOwtlWJTrlN77Oyexc0ooDdla4lAhHlyiDv4EJeoeaZWddM6Edq/qMxgZ+TxmHC7nC6TOfuwYGkskyC",
	"dEUBprwvaQ6nztzmn/ONydnIJA4ZlpdFD57IIkeNTPnAwCZyVql0gr8SKFhfFC54JI3J2frUg/dNJzcR",
	"TKSPzsQ4+xjMVPaGaZcA3VNIdp07S0RETOyzEZBWTUPieM8SRWC9tEc5tl4u7/w8EQ310qcux6dkV/LD",
	"skvkX86uLFRzMEL8m4fXXYo/Py7/aNov7kJiiP/pb7tdPneFH+AAz96uTCbG+aenVCHLgH8j4Mw1bwQW",
	"u2yE2Nrg30ns3Qy1XwBJSOPN+XNgTeCaJz6DDtq/d9FzkDhqVnwmBEQ+3CO3Jq3D6657skGCih+Nl/x6",
	"INbupDOi99ugdFoJ8JXN2su0CdX8/8zm+VlIS9E81WJf1sQlt3d45kxtTb1oPLNjp751XPcBwdtychCg",
	"jRF+uCJyT/iSXJAKhgoLPeJ3oIASLnhb/lQiwX/LGRZJHU4mk6CSrvwdAAD//33GgQS1IQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
