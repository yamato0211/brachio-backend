// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// health check
	// (GET /)
	HealthCheck(ctx echo.Context) error
	// 取得済みカード一覧の取得
	// (GET /cards)
	GetCards(ctx echo.Context) error
	// 自身のデッキリストを取得
	// (GET /decks)
	GetDeckList(ctx echo.Context) error
	// 空のデッキを作成
	// (POST /decks)
	CreateNewDeck(ctx echo.Context) error
	// デッキを削除
	// (DELETE /decks/{deckId})
	DeleteDeck(ctx echo.Context, deckId string) error
	// デッキを取得
	// (GET /decks/{deckId})
	GetDeck(ctx echo.Context, deckId string) error
	// デッキを更新
	// (PUT /decks/{deckId})
	UpdateDeck(ctx echo.Context, deckId string) error
	// ガチャ一覧取得
	// (GET /gachas)
	GetGachaList(ctx echo.Context) error
	// ガチャの強さ取得
	// (GET /gachas/power)
	GetGachaPower(ctx echo.Context) error
	// ガチャを引く
	// (POST /gachas/{gachaId})
	DrawGacha(ctx echo.Context, gachaId string) error
	// 所持アイテム一覧取得
	// (GET /items)
	GetMyItemList(ctx echo.Context) error
	// Websocket接続
	// (GET /ws)
	Ws(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// HealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) HealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HealthCheck(ctx)
	return err
}

// GetCards converts echo context to params.
func (w *ServerInterfaceWrapper) GetCards(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCards(ctx)
	return err
}

// GetDeckList converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeckList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDeckList(ctx)
	return err
}

// CreateNewDeck converts echo context to params.
func (w *ServerInterfaceWrapper) CreateNewDeck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateNewDeck(ctx)
	return err
}

// DeleteDeck converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDeck(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "deckId" -------------
	var deckId string

	err = runtime.BindStyledParameterWithOptions("simple", "deckId", ctx.Param("deckId"), &deckId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deckId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDeck(ctx, deckId)
	return err
}

// GetDeck converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeck(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "deckId" -------------
	var deckId string

	err = runtime.BindStyledParameterWithOptions("simple", "deckId", ctx.Param("deckId"), &deckId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deckId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDeck(ctx, deckId)
	return err
}

// UpdateDeck converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateDeck(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "deckId" -------------
	var deckId string

	err = runtime.BindStyledParameterWithOptions("simple", "deckId", ctx.Param("deckId"), &deckId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deckId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateDeck(ctx, deckId)
	return err
}

// GetGachaList converts echo context to params.
func (w *ServerInterfaceWrapper) GetGachaList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGachaList(ctx)
	return err
}

// GetGachaPower converts echo context to params.
func (w *ServerInterfaceWrapper) GetGachaPower(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGachaPower(ctx)
	return err
}

// DrawGacha converts echo context to params.
func (w *ServerInterfaceWrapper) DrawGacha(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gachaId" -------------
	var gachaId string

	err = runtime.BindStyledParameterWithOptions("simple", "gachaId", ctx.Param("gachaId"), &gachaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gachaId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DrawGacha(ctx, gachaId)
	return err
}

// GetMyItemList converts echo context to params.
func (w *ServerInterfaceWrapper) GetMyItemList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMyItemList(ctx)
	return err
}

// Ws converts echo context to params.
func (w *ServerInterfaceWrapper) Ws(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Ws(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.HealthCheck)
	router.GET(baseURL+"/cards", wrapper.GetCards)
	router.GET(baseURL+"/decks", wrapper.GetDeckList)
	router.POST(baseURL+"/decks", wrapper.CreateNewDeck)
	router.DELETE(baseURL+"/decks/:deckId", wrapper.DeleteDeck)
	router.GET(baseURL+"/decks/:deckId", wrapper.GetDeck)
	router.PUT(baseURL+"/decks/:deckId", wrapper.UpdateDeck)
	router.GET(baseURL+"/gachas", wrapper.GetGachaList)
	router.GET(baseURL+"/gachas/power", wrapper.GetGachaPower)
	router.POST(baseURL+"/gachas/:gachaId", wrapper.DrawGacha)
	router.GET(baseURL+"/items", wrapper.GetMyItemList)
	router.GET(baseURL+"/ws", wrapper.Ws)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
