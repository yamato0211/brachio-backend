// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// health check
	// (GET /)
	HealthCheck(ctx echo.Context) error
	// 取得済みカード一覧の取得
	// (GET /cards)
	GetCards(ctx echo.Context) error
	// 自身のデッキリストを取得
	// (GET /decks)
	GetDeckList(ctx echo.Context) error
	// 空のデッキを作成
	// (POST /decks)
	CreateNewDeck(ctx echo.Context) error
	// デッキを削除
	// (DELETE /decks/{deckId})
	DeleteDeck(ctx echo.Context, deckId string) error
	// デッキを取得
	// (GET /decks/{deckId})
	GetDeck(ctx echo.Context, deckId string) error
	// デッキを更新
	// (PUT /decks/{deckId})
	UpdateDeck(ctx echo.Context, deckId string) error
	// ガチャ一覧取得
	// (GET /gachas)
	GetGachaList(ctx echo.Context) error
	// ガチャの強さ取得
	// (GET /gachas/power)
	GetGachaPower(ctx echo.Context) error
	// ガチャを引く
	// (POST /gachas/{gachaId})
	DrawGacha(ctx echo.Context, gachaId string) error
	// 所持アイテム一覧取得
	// (GET /items)
	GetMyItemList(ctx echo.Context) error
	// Websocket接続
	// (GET /ws)
	Ws(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// HealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) HealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HealthCheck(ctx)
	return err
}

// GetCards converts echo context to params.
func (w *ServerInterfaceWrapper) GetCards(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCards(ctx)
	return err
}

// GetDeckList converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeckList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDeckList(ctx)
	return err
}

// CreateNewDeck converts echo context to params.
func (w *ServerInterfaceWrapper) CreateNewDeck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateNewDeck(ctx)
	return err
}

// DeleteDeck converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDeck(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "deckId" -------------
	var deckId string

	err = runtime.BindStyledParameterWithOptions("simple", "deckId", ctx.Param("deckId"), &deckId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deckId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDeck(ctx, deckId)
	return err
}

// GetDeck converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeck(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "deckId" -------------
	var deckId string

	err = runtime.BindStyledParameterWithOptions("simple", "deckId", ctx.Param("deckId"), &deckId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deckId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDeck(ctx, deckId)
	return err
}

// UpdateDeck converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateDeck(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "deckId" -------------
	var deckId string

	err = runtime.BindStyledParameterWithOptions("simple", "deckId", ctx.Param("deckId"), &deckId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deckId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateDeck(ctx, deckId)
	return err
}

// GetGachaList converts echo context to params.
func (w *ServerInterfaceWrapper) GetGachaList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGachaList(ctx)
	return err
}

// GetGachaPower converts echo context to params.
func (w *ServerInterfaceWrapper) GetGachaPower(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGachaPower(ctx)
	return err
}

// DrawGacha converts echo context to params.
func (w *ServerInterfaceWrapper) DrawGacha(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "gachaId" -------------
	var gachaId string

	err = runtime.BindStyledParameterWithOptions("simple", "gachaId", ctx.Param("gachaId"), &gachaId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter gachaId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DrawGacha(ctx, gachaId)
	return err
}

// GetMyItemList converts echo context to params.
func (w *ServerInterfaceWrapper) GetMyItemList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMyItemList(ctx)
	return err
}

// Ws converts echo context to params.
func (w *ServerInterfaceWrapper) Ws(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Ws(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.HealthCheck)
	router.GET(baseURL+"/cards", wrapper.GetCards)
	router.GET(baseURL+"/decks", wrapper.GetDeckList)
	router.POST(baseURL+"/decks", wrapper.CreateNewDeck)
	router.DELETE(baseURL+"/decks/:deckId", wrapper.DeleteDeck)
	router.GET(baseURL+"/decks/:deckId", wrapper.GetDeck)
	router.PUT(baseURL+"/decks/:deckId", wrapper.UpdateDeck)
	router.GET(baseURL+"/gachas", wrapper.GetGachaList)
	router.GET(baseURL+"/gachas/power", wrapper.GetGachaPower)
	router.POST(baseURL+"/gachas/:gachaId", wrapper.DrawGacha)
	router.GET(baseURL+"/items", wrapper.GetMyItemList)
	router.GET(baseURL+"/ws", wrapper.Ws)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
