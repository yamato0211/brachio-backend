// @generated by protoc-gen-es v2.0.0
// @generated from file messages/effect.proto (package messages.effect, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { Element } from "./common_pb";
import type { Card } from "./card_pb";

/**
 * Describes the file messages/effect.proto.
 */
export declare const file_messages_effect: GenFile;

/**
 * エネルギートラッシュ
 *
 * @generated from message messages.effect.EnergyTrashEffect
 */
export declare type EnergyTrashEffect = Message<"messages.effect.EnergyTrashEffect"> & {
  /**
   * どの場所から
   *
   * @generated from field: int32 position = 1;
   */
  position: number;

  /**
   * トラッシュ後のエネルギー
   *
   * @generated from field: repeated messages.common.Element energy = 2;
   */
  energy: Element[];
};

/**
 * Describes the message messages.effect.EnergyTrashEffect.
 * Use `create(EnergyTrashEffectSchema)` to create a new message.
 */
export declare const EnergyTrashEffectSchema: GenMessage<EnergyTrashEffect>;

/**
 * このカード使います宣言
 *
 * @generated from message messages.effect.UseCardEffect
 */
export declare type UseCardEffect = Message<"messages.effect.UseCardEffect"> & {
  /**
   * カード情報
   *
   * @generated from field: messages.card.Card card = 1;
   */
  card?: Card;
};

/**
 * Describes the message messages.effect.UseCardEffect.
 * Use `create(UseCardEffectSchema)` to create a new message.
 */
export declare const UseCardEffectSchema: GenMessage<UseCardEffect>;

/**
 * 手札トラッシュ(持ち主)
 *
 * @generated from message messages.effect.TrashHandEffectSecret
 */
export declare type TrashHandEffectSecret = Message<"messages.effect.TrashHandEffectSecret"> & {
  /**
   * 何枚
   *
   * @generated from field: int32 count = 1;
   */
  count: number;

  /**
   * どのカードが（持ち主のみ）
   *
   * @generated from field: messages.card.Card card = 2;
   */
  card?: Card;
};

/**
 * Describes the message messages.effect.TrashHandEffectSecret.
 * Use `create(TrashHandEffectSecretSchema)` to create a new message.
 */
export declare const TrashHandEffectSecretSchema: GenMessage<TrashHandEffectSecret>;

/**
 * 手札トラッシュ
 *
 * @generated from message messages.effect.TrashHandEffect
 */
export declare type TrashHandEffect = Message<"messages.effect.TrashHandEffect"> & {
  /**
   * 何枚
   *
   * @generated from field: int32 count = 1;
   */
  count: number;
};

/**
 * Describes the message messages.effect.TrashHandEffect.
 * Use `create(TrashHandEffectSchema)` to create a new message.
 */
export declare const TrashHandEffectSchema: GenMessage<TrashHandEffect>;

/**
 * 山札トラッシュ
 *
 * @generated from message messages.effect.TrashDeckEffect
 */
export declare type TrashDeckEffect = Message<"messages.effect.TrashDeckEffect"> & {
  /**
   * 何枚
   *
   * @generated from field: int32 count = 1;
   */
  count: number;

  /**
   * 残り枚数
   *
   * @generated from field: int32 remain = 2;
   */
  remain: number;
};

/**
 * Describes the message messages.effect.TrashDeckEffect.
 * Use `create(TrashDeckEffectSchema)` to create a new message.
 */
export declare const TrashDeckEffectSchema: GenMessage<TrashDeckEffect>;

/**
 * ワザor特性を使用する
 *
 * @generated from message messages.effect.UseSkillOrAbilityEffect
 */
export declare type UseSkillOrAbilityEffect = Message<"messages.effect.UseSkillOrAbilityEffect"> & {
  /**
   * 名前 e.g. たいあたり
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message messages.effect.UseSkillOrAbilityEffect.
 * Use `create(UseSkillOrAbilityEffectSchema)` to create a new message.
 */
export declare const UseSkillOrAbilityEffectSchema: GenMessage<UseSkillOrAbilityEffect>;

/**
 * 回復する
 *
 * @generated from message messages.effect.RecoverEffect
 */
export declare type RecoverEffect = Message<"messages.effect.RecoverEffect"> & {
  /**
   * 誰から
   *
   * @generated from field: int32 position = 1;
   */
  position: number;

  /**
   * length4の配列で値
   *
   * @generated from field: repeated int32 amount = 2;
   */
  amount: number[];
};

/**
 * Describes the message messages.effect.RecoverEffect.
 * Use `create(RecoverEffectSchema)` to create a new message.
 */
export declare const RecoverEffectSchema: GenMessage<RecoverEffect>;

/**
 * ダメージを与える
 *
 * @generated from message messages.effect.DamageEffect
 */
export declare type DamageEffect = Message<"messages.effect.DamageEffect"> & {
  /**
   * 誰から
   *
   * @generated from field: int32 position = 1;
   */
  position: number;

  /**
   * length4の配列で値
   *
   * @generated from field: repeated int32 amount = 2;
   */
  amount: number[];
};

/**
 * Describes the message messages.effect.DamageEffect.
 * Use `create(DamageEffectSchema)` to create a new message.
 */
export declare const DamageEffectSchema: GenMessage<DamageEffect>;

/**
 * 進化する
 *
 * @generated from message messages.effect.EvolutionEffect
 */
export declare type EvolutionEffect = Message<"messages.effect.EvolutionEffect"> & {
  /**
   * どの場所のカードが
   *
   * @generated from field: int32 position = 1;
   */
  position: number;

  /**
   * カード情報
   *
   * @generated from field: messages.card.Card card = 2;
   */
  card?: Card;
};

/**
 * Describes the message messages.effect.EvolutionEffect.
 * Use `create(EvolutionEffectSchema)` to create a new message.
 */
export declare const EvolutionEffectSchema: GenMessage<EvolutionEffect>;

/**
 * 点数取得
 *
 * @generated from message messages.effect.GetPointEffect
 */
export declare type GetPointEffect = Message<"messages.effect.GetPointEffect"> & {
  /**
   * 合計何点取得したか
   *
   * @generated from field: int32 point = 1;
   */
  point: number;

  /**
   * どのユーザーが
   *
   * @generated from field: string userId = 2;
   */
  userId: string;
};

/**
 * Describes the message messages.effect.GetPointEffect.
 * Use `create(GetPointEffectSchema)` to create a new message.
 */
export declare const GetPointEffectSchema: GenMessage<GetPointEffect>;

/**
 * 勝敗決定
 *
 * @generated from message messages.effect.DecideWinOrLoseEffect
 */
export declare type DecideWinOrLoseEffect = Message<"messages.effect.DecideWinOrLoseEffect"> & {
  /**
   * どっちが
   *
   * @generated from field: string userId = 1;
   */
  userId: string;
};

/**
 * Describes the message messages.effect.DecideWinOrLoseEffect.
 * Use `create(DecideWinOrLoseEffectSchema)` to create a new message.
 */
export declare const DecideWinOrLoseEffectSchema: GenMessage<DecideWinOrLoseEffect>;

/**
 * 先攻後攻の決定
 *
 * @generated from message messages.effect.DecideFirstOrSecondEffect
 */
export declare type DecideFirstOrSecondEffect = Message<"messages.effect.DecideFirstOrSecondEffect"> & {
  /**
   * どっちが
   *
   * @generated from field: string userId = 1;
   */
  userId: string;
};

/**
 * Describes the message messages.effect.DecideFirstOrSecondEffect.
 * Use `create(DecideFirstOrSecondEffectSchema)` to create a new message.
 */
export declare const DecideFirstOrSecondEffectSchema: GenMessage<DecideFirstOrSecondEffect>;

/**
 * バトル場とベンチの入れ替え
 *
 * @generated from message messages.effect.SwapBattleAndBenchEffect
 */
export declare type SwapBattleAndBenchEffect = Message<"messages.effect.SwapBattleAndBenchEffect"> & {
  /**
   * どこと
   *
   * @generated from field: int32 position = 1;
   */
  position: number;
};

/**
 * Describes the message messages.effect.SwapBattleAndBenchEffect.
 * Use `create(SwapBattleAndBenchEffectSchema)` to create a new message.
 */
export declare const SwapBattleAndBenchEffectSchema: GenMessage<SwapBattleAndBenchEffect>;

/**
 * ベンチからバトル場に出す（バトル場死亡時or手札戻り時等）
 *
 * @generated from message messages.effect.PutBattleFromBenchEffect
 */
export declare type PutBattleFromBenchEffect = Message<"messages.effect.PutBattleFromBenchEffect"> & {
  /**
   * どこから
   *
   * @generated from field: int32 position = 1;
   */
  position: number;
};

/**
 * Describes the message messages.effect.PutBattleFromBenchEffect.
 * Use `create(PutBattleFromBenchEffectSchema)` to create a new message.
 */
export declare const PutBattleFromBenchEffectSchema: GenMessage<PutBattleFromBenchEffect>;

/**
 * 手札に戻る
 *
 * @generated from message messages.effect.ReturnHandEffect
 */
export declare type ReturnHandEffect = Message<"messages.effect.ReturnHandEffect"> & {
  /**
   * 誰が
   *
   * @generated from field: int32 position = 1;
   */
  position: number;
};

/**
 * Describes the message messages.effect.ReturnHandEffect.
 * Use `create(ReturnHandEffectSchema)` to create a new message.
 */
export declare const ReturnHandEffectSchema: GenMessage<ReturnHandEffect>;

/**
 * 気絶する
 *
 * @generated from message messages.effect.FaintEffect
 */
export declare type FaintEffect = Message<"messages.effect.FaintEffect"> & {
  /**
   * 誰が
   *
   * @generated from field: int32 position = 1;
   */
  position: number;
};

/**
 * Describes the message messages.effect.FaintEffect.
 * Use `create(FaintEffectSchema)` to create a new message.
 */
export declare const FaintEffectSchema: GenMessage<FaintEffect>;

/**
 * 召喚する
 *
 * @generated from message messages.effect.SummonEffect
 */
export declare type SummonEffect = Message<"messages.effect.SummonEffect"> & {
  /**
   * カード情報
   *
   * @generated from field: messages.card.Card card = 1;
   */
  card?: Card;

  /**
   * どこに
   *
   * @generated from field: int32 position = 2;
   */
  position: number;
};

/**
 * Describes the message messages.effect.SummonEffect.
 * Use `create(SummonEffectSchema)` to create a new message.
 */
export declare const SummonEffectSchema: GenMessage<SummonEffect>;

/**
 * コイントス
 *
 * @generated from message messages.effect.CoinTossEffect
 */
export declare type CoinTossEffect = Message<"messages.effect.CoinTossEffect"> & {
  /**
   * 結果配列
   *
   * @generated from field: repeated bool result = 1;
   */
  result: boolean[];
};

/**
 * Describes the message messages.effect.CoinTossEffect.
 * Use `create(CoinTossEffectSchema)` to create a new message.
 */
export declare const CoinTossEffectSchema: GenMessage<CoinTossEffect>;

/**
 * エネルギーつける
 *
 * @generated from message messages.effect.AttachEnergyEffect
 */
export declare type AttachEnergyEffect = Message<"messages.effect.AttachEnergyEffect"> & {
  /**
   * どこに
   *
   * @generated from field: int32 position = 1;
   */
  position: number;

  /**
   * どのエネルギー
   *
   * @generated from field: repeated messages.common.Element energies = 2;
   */
  energies: Element[];
};

/**
 * Describes the message messages.effect.AttachEnergyEffect.
 * Use `create(AttachEnergyEffectSchema)` to create a new message.
 */
export declare const AttachEnergyEffectSchema: GenMessage<AttachEnergyEffect>;

/**
 * 降参
 *
 * @generated from message messages.effect.SurrenderEffect
 */
export declare type SurrenderEffect = Message<"messages.effect.SurrenderEffect"> & {
  /**
   * どちらが
   *
   * @generated from field: string userId = 1;
   */
  userId: string;
};

/**
 * Describes the message messages.effect.SurrenderEffect.
 * Use `create(SurrenderEffectSchema)` to create a new message.
 */
export declare const SurrenderEffectSchema: GenMessage<SurrenderEffect>;

/**
 * シャッフル
 *
 * @generated from message messages.effect.ShuffleEffect
 */
export declare type ShuffleEffect = Message<"messages.effect.ShuffleEffect"> & {
};

/**
 * Describes the message messages.effect.ShuffleEffect.
 * Use `create(ShuffleEffectSchema)` to create a new message.
 */
export declare const ShuffleEffectSchema: GenMessage<ShuffleEffect>;

/**
 * シークレットを持つエフェクト
 *
 * @generated from message messages.effect.EffectWithSecret
 */
export declare type EffectWithSecret = Message<"messages.effect.EffectWithSecret"> & {
  /**
   * @generated from oneof messages.effect.EffectWithSecret.effect
   */
  effect: {
    /**
     * @generated from field: messages.effect.EnergyTrashEffect energy_trash = 1;
     */
    value: EnergyTrashEffect;
    case: "energyTrash";
  } | {
    /**
     * @generated from field: messages.effect.UseCardEffect use_card = 2;
     */
    value: UseCardEffect;
    case: "useCard";
  } | {
    /**
     * @generated from field: messages.effect.TrashHandEffectSecret trash_hand_secret = 3;
     */
    value: TrashHandEffectSecret;
    case: "trashHandSecret";
  } | {
    /**
     * @generated from field: messages.effect.TrashDeckEffect trash_deck = 4;
     */
    value: TrashDeckEffect;
    case: "trashDeck";
  } | {
    /**
     * @generated from field: messages.effect.UseSkillOrAbilityEffect use_skill_or_ability = 5;
     */
    value: UseSkillOrAbilityEffect;
    case: "useSkillOrAbility";
  } | {
    /**
     * @generated from field: messages.effect.RecoverEffect recover = 6;
     */
    value: RecoverEffect;
    case: "recover";
  } | {
    /**
     * @generated from field: messages.effect.DamageEffect damage = 7;
     */
    value: DamageEffect;
    case: "damage";
  } | {
    /**
     * @generated from field: messages.effect.EvolutionEffect evolution = 8;
     */
    value: EvolutionEffect;
    case: "evolution";
  } | {
    /**
     * @generated from field: messages.effect.GetPointEffect get_point = 9;
     */
    value: GetPointEffect;
    case: "getPoint";
  } | {
    /**
     * @generated from field: messages.effect.DecideWinOrLoseEffect decide_win_or_lose = 10;
     */
    value: DecideWinOrLoseEffect;
    case: "decideWinOrLose";
  } | {
    /**
     * @generated from field: messages.effect.DecideFirstOrSecondEffect decide_first_or_second = 11;
     */
    value: DecideFirstOrSecondEffect;
    case: "decideFirstOrSecond";
  } | {
    /**
     * @generated from field: messages.effect.SwapBattleAndBenchEffect swap_battle_and_bench = 12;
     */
    value: SwapBattleAndBenchEffect;
    case: "swapBattleAndBench";
  } | {
    /**
     * @generated from field: messages.effect.PutBattleFromBenchEffect put_battle_from_bench = 13;
     */
    value: PutBattleFromBenchEffect;
    case: "putBattleFromBench";
  } | {
    /**
     * @generated from field: messages.effect.ReturnHandEffect return_hand = 14;
     */
    value: ReturnHandEffect;
    case: "returnHand";
  } | {
    /**
     * @generated from field: messages.effect.FaintEffect faint = 15;
     */
    value: FaintEffect;
    case: "faint";
  } | {
    /**
     * @generated from field: messages.effect.SummonEffect summon = 16;
     */
    value: SummonEffect;
    case: "summon";
  } | {
    /**
     * @generated from field: messages.effect.CoinTossEffect coin_toss = 17;
     */
    value: CoinTossEffect;
    case: "coinToss";
  } | {
    /**
     * @generated from field: messages.effect.AttachEnergyEffect attach_energy = 18;
     */
    value: AttachEnergyEffect;
    case: "attachEnergy";
  } | {
    /**
     * @generated from field: messages.effect.SurrenderEffect surrender = 19;
     */
    value: SurrenderEffect;
    case: "surrender";
  } | {
    /**
     * @generated from field: messages.effect.ShuffleEffect shuffle = 20;
     */
    value: ShuffleEffect;
    case: "shuffle";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message messages.effect.EffectWithSecret.
 * Use `create(EffectWithSecretSchema)` to create a new message.
 */
export declare const EffectWithSecretSchema: GenMessage<EffectWithSecret>;

/**
 * シークレットを持たないエフェクト
 *
 * @generated from message messages.effect.Effect
 */
export declare type Effect = Message<"messages.effect.Effect"> & {
  /**
   * @generated from oneof messages.effect.Effect.effect
   */
  effect: {
    /**
     * @generated from field: messages.effect.EnergyTrashEffect energy_trash = 1;
     */
    value: EnergyTrashEffect;
    case: "energyTrash";
  } | {
    /**
     * @generated from field: messages.effect.UseCardEffect use_card = 2;
     */
    value: UseCardEffect;
    case: "useCard";
  } | {
    /**
     * @generated from field: messages.effect.TrashHandEffect trash_hand = 3;
     */
    value: TrashHandEffect;
    case: "trashHand";
  } | {
    /**
     * @generated from field: messages.effect.TrashDeckEffect trash_deck = 4;
     */
    value: TrashDeckEffect;
    case: "trashDeck";
  } | {
    /**
     * @generated from field: messages.effect.UseSkillOrAbilityEffect use_skill_or_ability = 5;
     */
    value: UseSkillOrAbilityEffect;
    case: "useSkillOrAbility";
  } | {
    /**
     * @generated from field: messages.effect.RecoverEffect recover = 6;
     */
    value: RecoverEffect;
    case: "recover";
  } | {
    /**
     * @generated from field: messages.effect.DamageEffect damage = 7;
     */
    value: DamageEffect;
    case: "damage";
  } | {
    /**
     * @generated from field: messages.effect.EvolutionEffect evolution = 8;
     */
    value: EvolutionEffect;
    case: "evolution";
  } | {
    /**
     * @generated from field: messages.effect.GetPointEffect get_point = 9;
     */
    value: GetPointEffect;
    case: "getPoint";
  } | {
    /**
     * @generated from field: messages.effect.DecideWinOrLoseEffect decide_win_or_lose = 10;
     */
    value: DecideWinOrLoseEffect;
    case: "decideWinOrLose";
  } | {
    /**
     * @generated from field: messages.effect.DecideFirstOrSecondEffect decide_first_or_second = 11;
     */
    value: DecideFirstOrSecondEffect;
    case: "decideFirstOrSecond";
  } | {
    /**
     * @generated from field: messages.effect.SwapBattleAndBenchEffect swap_battle_and_bench = 12;
     */
    value: SwapBattleAndBenchEffect;
    case: "swapBattleAndBench";
  } | {
    /**
     * @generated from field: messages.effect.PutBattleFromBenchEffect put_battle_from_bench = 13;
     */
    value: PutBattleFromBenchEffect;
    case: "putBattleFromBench";
  } | {
    /**
     * @generated from field: messages.effect.ReturnHandEffect return_hand = 14;
     */
    value: ReturnHandEffect;
    case: "returnHand";
  } | {
    /**
     * @generated from field: messages.effect.FaintEffect faint = 15;
     */
    value: FaintEffect;
    case: "faint";
  } | {
    /**
     * @generated from field: messages.effect.SummonEffect summon = 16;
     */
    value: SummonEffect;
    case: "summon";
  } | {
    /**
     * @generated from field: messages.effect.CoinTossEffect coin_toss = 17;
     */
    value: CoinTossEffect;
    case: "coinToss";
  } | {
    /**
     * @generated from field: messages.effect.AttachEnergyEffect attach_energy = 18;
     */
    value: AttachEnergyEffect;
    case: "attachEnergy";
  } | {
    /**
     * @generated from field: messages.effect.SurrenderEffect surrender = 19;
     */
    value: SurrenderEffect;
    case: "surrender";
  } | {
    /**
     * @generated from field: messages.effect.ShuffleEffect shuffle = 20;
     */
    value: ShuffleEffect;
    case: "shuffle";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message messages.effect.Effect.
 * Use `create(EffectSchema)` to create a new message.
 */
export declare const EffectSchema: GenMessage<Effect>;

