// @generated by protoc-gen-es v2.0.0
// @generated from file websocket/payload/playing.proto (package websocket.payload.playing, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { Card } from "../../messages/card_pb";
import type { Element } from "../../messages/common_pb";
import type { Ability } from "../../messages/ability_pb";
import type { Empty } from "@bufbuild/protobuf/wkt";
import type { Effect, EffectWithSecret } from "../../messages/effect_pb";

/**
 * Describes the file websocket/payload/playing.proto.
 */
export declare const file_websocket_payload_playing: GenFile;

/**
 * @generated from message websocket.payload.playing.AttackMonsterPayload
 */
export declare type AttackMonsterPayload = Message<"websocket.payload.playing.AttackMonsterPayload"> & {
  /**
   * 攻撃者のモンスター
   *
   * @generated from field: int32 attacker_position = 1;
   */
  attackerPosition: number;

  /**
   * 技のインデックス
   *
   * @generated from field: int32 skill = 2;
   */
  skill: number;

  /**
   * @generated from field: repeated int32 targetsDamages = 3;
   */
  targetsDamages: number[];
};

/**
 * Describes the message websocket.payload.playing.AttackMonsterPayload.
 * Use `create(AttackMonsterPayloadSchema)` to create a new message.
 */
export declare const AttackMonsterPayloadSchema: GenMessage<AttackMonsterPayload>;

/**
 * @generated from message websocket.payload.playing.SummonMonsterPayload
 */
export declare type SummonMonsterPayload = Message<"websocket.payload.playing.SummonMonsterPayload"> & {
  /**
   * 召喚するモンスター
   *
   * @generated from field: messages.card.Card card = 1;
   */
  card?: Card;

  /**
   * 召喚する場所
   *
   * @generated from field: int32 position = 2;
   */
  position: number;
};

/**
 * Describes the message websocket.payload.playing.SummonMonsterPayload.
 * Use `create(SummonMonsterPayloadSchema)` to create a new message.
 */
export declare const SummonMonsterPayloadSchema: GenMessage<SummonMonsterPayload>;

/**
 * @generated from message websocket.payload.playing.EvolutionMonsterPayload
 */
export declare type EvolutionMonsterPayload = Message<"websocket.payload.playing.EvolutionMonsterPayload"> & {
  /**
   * 進化するモンスター
   *
   * @generated from field: messages.card.Card card = 1;
   */
  card?: Card;

  /**
   * 進化する場所
   *
   * @generated from field: int32 position = 2;
   */
  position: number;
};

/**
 * Describes the message websocket.payload.playing.EvolutionMonsterPayload.
 * Use `create(EvolutionMonsterPayloadSchema)` to create a new message.
 */
export declare const EvolutionMonsterPayloadSchema: GenMessage<EvolutionMonsterPayload>;

/**
 * @generated from message websocket.payload.playing.TakeSupportPayload
 */
export declare type TakeSupportPayload = Message<"websocket.payload.playing.TakeSupportPayload"> & {
  /**
   * サポートカード
   *
   * @generated from field: messages.card.Card card = 1;
   */
  card?: Card;

  /**
   * サポートの対象のカードのID
   *
   * @generated from field: repeated int32 positions = 2;
   */
  positions: number[];
};

/**
 * Describes the message websocket.payload.playing.TakeSupportPayload.
 * Use `create(TakeSupportPayloadSchema)` to create a new message.
 */
export declare const TakeSupportPayloadSchema: GenMessage<TakeSupportPayload>;

/**
 * @generated from message websocket.payload.playing.TakeGoodsPayload
 */
export declare type TakeGoodsPayload = Message<"websocket.payload.playing.TakeGoodsPayload"> & {
  /**
   * アイテム
   *
   * @generated from field: messages.card.Card card = 1;
   */
  card?: Card;

  /**
   * グッズ効果の対象のカード
   *
   * @generated from field: repeated int32 positions = 2;
   */
  positions: number[];
};

/**
 * Describes the message websocket.payload.playing.TakeGoodsPayload.
 * Use `create(TakeGoodsPayloadSchema)` to create a new message.
 */
export declare const TakeGoodsPayloadSchema: GenMessage<TakeGoodsPayload>;

/**
 * @generated from message websocket.payload.playing.RetreatPayload
 */
export declare type RetreatPayload = Message<"websocket.payload.playing.RetreatPayload"> & {
  /**
   * 退却するモンスター
   *
   * @generated from field: messages.card.Card card = 1;
   */
  card?: Card;

  /**
   * 逃げる場所
   *
   * @generated from field: int32 position = 2;
   */
  position: number;
};

/**
 * Describes the message websocket.payload.playing.RetreatPayload.
 * Use `create(RetreatPayloadSchema)` to create a new message.
 */
export declare const RetreatPayloadSchema: GenMessage<RetreatPayload>;

/**
 * @generated from message websocket.payload.playing.SupplyEnergys
 */
export declare type SupplyEnergys = Message<"websocket.payload.playing.SupplyEnergys"> & {
  /**
   * @generated from field: repeated messages.common.Element energies = 1;
   */
  energies: Element[];
};

/**
 * Describes the message websocket.payload.playing.SupplyEnergys.
 * Use `create(SupplyEnergysSchema)` to create a new message.
 */
export declare const SupplyEnergysSchema: GenMessage<SupplyEnergys>;

/**
 * @generated from message websocket.payload.playing.SupplyEnergyPayload
 */
export declare type SupplyEnergyPayload = Message<"websocket.payload.playing.SupplyEnergyPayload"> & {
  /**
   * 供給するエネルギー(ポジションベース length4)
   *
   * @generated from field: repeated websocket.payload.playing.SupplyEnergys supplys = 1;
   */
  supplys: SupplyEnergys[];
};

/**
 * Describes the message websocket.payload.playing.SupplyEnergyPayload.
 * Use `create(SupplyEnergyPayloadSchema)` to create a new message.
 */
export declare const SupplyEnergyPayloadSchema: GenMessage<SupplyEnergyPayload>;

/**
 * @generated from message websocket.payload.playing.SurrenderPayload
 */
export declare type SurrenderPayload = Message<"websocket.payload.playing.SurrenderPayload"> & {
  /**
   * 降参するユーザーのID
   *
   * @generated from field: string userId = 1;
   */
  userId: string;
};

/**
 * Describes the message websocket.payload.playing.SurrenderPayload.
 * Use `create(SurrenderPayloadSchema)` to create a new message.
 */
export declare const SurrenderPayloadSchema: GenMessage<SurrenderPayload>;

/**
 * @generated from message websocket.payload.playing.AbilityPayload
 */
export declare type AbilityPayload = Message<"websocket.payload.playing.AbilityPayload"> & {
  /**
   * 発動するラムモン
   *
   * @generated from field: int32 position = 1;
   */
  position: number;

  /**
   * 発動する特性
   *
   * @generated from field: messages.ability.Ability ability = 2;
   */
  ability?: Ability;
};

/**
 * Describes the message websocket.payload.playing.AbilityPayload.
 * Use `create(AbilityPayloadSchema)` to create a new message.
 */
export declare const AbilityPayloadSchema: GenMessage<AbilityPayload>;

/**
 * @generated from message websocket.payload.playing.DrawCardPayload
 */
export declare type DrawCardPayload = Message<"websocket.payload.playing.DrawCardPayload"> & {
  /**
   * 山札から引くカードの枚数
   *
   * @generated from field: int32 count = 1;
   */
  count: number;

  /**
   * 山札の残り枚数
   *
   * @generated from field: int32 remain = 2;
   */
  remain: number;
};

/**
 * Describes the message websocket.payload.playing.DrawCardPayload.
 * Use `create(DrawCardPayloadSchema)` to create a new message.
 */
export declare const DrawCardPayloadSchema: GenMessage<DrawCardPayload>;

/**
 * @generated from message websocket.payload.playing.DrawCardIndividualPayload
 */
export declare type DrawCardIndividualPayload = Message<"websocket.payload.playing.DrawCardIndividualPayload"> & {
  /**
   * 山札から引くカードの枚数
   *
   * @generated from field: int32 count = 1;
   */
  count: number;

  /**
   * 山札から引くカード
   *
   * @generated from field: repeated messages.card.Card cards = 2;
   */
  cards: Card[];

  /**
   * 山札の残り枚数
   *
   * @generated from field: int32 remain = 3;
   */
  remain: number;
};

/**
 * Describes the message websocket.payload.playing.DrawCardIndividualPayload.
 * Use `create(DrawCardIndividualPayloadSchema)` to create a new message.
 */
export declare const DrawCardIndividualPayloadSchema: GenMessage<DrawCardIndividualPayload>;

/**
 * @generated from message websocket.payload.playing.ConfirmActionPayload
 */
export declare type ConfirmActionPayload = Message<"websocket.payload.playing.ConfirmActionPayload"> & {
  /**
   * @generated from field: repeated websocket.payload.playing.Action actions = 1;
   */
  actions: Action[];
};

/**
 * Describes the message websocket.payload.playing.ConfirmActionPayload.
 * Use `create(ConfirmActionPayloadSchema)` to create a new message.
 */
export declare const ConfirmActionPayloadSchema: GenMessage<ConfirmActionPayload>;

/**
 * @generated from message websocket.payload.playing.Action
 */
export declare type Action = Message<"websocket.payload.playing.Action"> & {
  /**
   * @generated from field: websocket.payload.playing.ActionType type = 1;
   */
  type: ActionType;

  /**
   * 行動するラムモンorアイテム
   *
   * @generated from field: optional int32 position = 2;
   */
  position?: number;
};

/**
 * Describes the message websocket.payload.playing.Action.
 * Use `create(ActionSchema)` to create a new message.
 */
export declare const ActionSchema: GenMessage<Action>;

/**
 * @generated from message websocket.payload.playing.CoinTossPayload
 */
export declare type CoinTossPayload = Message<"websocket.payload.playing.CoinTossPayload"> & {
  /**
   * @generated from field: repeated bool results = 1;
   */
  results: boolean[];
};

/**
 * Describes the message websocket.payload.playing.CoinTossPayload.
 * Use `create(CoinTossPayloadSchema)` to create a new message.
 */
export declare const CoinTossPayloadSchema: GenMessage<CoinTossPayload>;

/**
 * @generated from message websocket.payload.playing.CoinTossEmptyPayload
 */
export declare type CoinTossEmptyPayload = Message<"websocket.payload.playing.CoinTossEmptyPayload"> & {
  /**
   * @generated from field: google.protobuf.Empty empty = 1;
   */
  empty?: Empty;
};

/**
 * Describes the message websocket.payload.playing.CoinTossEmptyPayload.
 * Use `create(CoinTossEmptyPayloadSchema)` to create a new message.
 */
export declare const CoinTossEmptyPayloadSchema: GenMessage<CoinTossEmptyPayload>;

/**
 * @generated from message websocket.payload.playing.StartGamePayload
 */
export declare type StartGamePayload = Message<"websocket.payload.playing.StartGamePayload"> & {
  /**
   * @generated from field: google.protobuf.Empty empty = 1;
   */
  empty?: Empty;
};

/**
 * Describes the message websocket.payload.playing.StartGamePayload.
 * Use `create(StartGamePayloadSchema)` to create a new message.
 */
export declare const StartGamePayloadSchema: GenMessage<StartGamePayload>;

/**
 * @generated from message websocket.payload.playing.InitialPlacementCompletePayload
 */
export declare type InitialPlacementCompletePayload = Message<"websocket.payload.playing.InitialPlacementCompletePayload"> & {
  /**
   * @generated from field: google.protobuf.Empty empty = 1;
   */
  empty?: Empty;
};

/**
 * Describes the message websocket.payload.playing.InitialPlacementCompletePayload.
 * Use `create(InitialPlacementCompletePayloadSchema)` to create a new message.
 */
export declare const InitialPlacementCompletePayloadSchema: GenMessage<InitialPlacementCompletePayload>;

/**
 * @generated from message websocket.payload.playing.TurnStartPayload
 */
export declare type TurnStartPayload = Message<"websocket.payload.playing.TurnStartPayload"> & {
  /**
   * ターンプレイヤーのID
   *
   * @generated from field: string userId = 1;
   */
  userId: string;

  /**
   * 発動するイベントの原因となるカード
   *
   * @generated from field: repeated messages.card.Card cards = 2;
   */
  cards: Card[];

  /**
   * イベントの原因となる特性
   *
   * @generated from field: repeated messages.ability.Ability abilities = 3;
   */
  abilities: Ability[];
};

/**
 * Describes the message websocket.payload.playing.TurnStartPayload.
 * Use `create(TurnStartPayloadSchema)` to create a new message.
 */
export declare const TurnStartPayloadSchema: GenMessage<TurnStartPayload>;

/**
 * @generated from message websocket.payload.playing.TurnEndPayload
 */
export declare type TurnEndPayload = Message<"websocket.payload.playing.TurnEndPayload"> & {
  /**
   * ターンプレイヤーのID
   *
   * @generated from field: string userId = 1;
   */
  userId: string;

  /**
   * 発動するイベントの原因となるカード
   *
   * @generated from field: repeated messages.card.Card cards = 2;
   */
  cards: Card[];

  /**
   * イベントの原因となる特性
   *
   * @generated from field: repeated messages.ability.Ability abilities = 3;
   */
  abilities: Ability[];
};

/**
 * Describes the message websocket.payload.playing.TurnEndPayload.
 * Use `create(TurnEndPayloadSchema)` to create a new message.
 */
export declare const TurnEndPayloadSchema: GenMessage<TurnEndPayload>;

/**
 * @generated from message websocket.payload.playing.ConfirmEnergyResponsePayload
 */
export declare type ConfirmEnergyResponsePayload = Message<"websocket.payload.playing.ConfirmEnergyResponsePayload"> & {
  /**
   * エネルギーを供給するモンスター
   *
   * @generated from field: messages.card.Card card = 1;
   */
  card?: Card;

  /**
   * 供給するエネルギー
   *
   * @generated from field: repeated messages.common.Element energies = 2;
   */
  energies: Element[];
};

/**
 * Describes the message websocket.payload.playing.ConfirmEnergyResponsePayload.
 * Use `create(ConfirmEnergyResponsePayloadSchema)` to create a new message.
 */
export declare const ConfirmEnergyResponsePayloadSchema: GenMessage<ConfirmEnergyResponsePayload>;

/**
 * @generated from message websocket.payload.playing.ConfirmEnergyRequestPayload
 */
export declare type ConfirmEnergyRequestPayload = Message<"websocket.payload.playing.ConfirmEnergyRequestPayload"> & {
  /**
   * エネルギーを供給するモンスター
   *
   * @generated from field: messages.card.Card card = 1;
   */
  card?: Card;

  /**
   * 必要なエネルギー
   *
   * @generated from field: repeated messages.common.Element energies = 2;
   */
  energies: Element[];
};

/**
 * Describes the message websocket.payload.playing.ConfirmEnergyRequestPayload.
 * Use `create(ConfirmEnergyRequestPayloadSchema)` to create a new message.
 */
export declare const ConfirmEnergyRequestPayloadSchema: GenMessage<ConfirmEnergyRequestPayload>;

/**
 * @generated from message websocket.payload.playing.ConfirmTargetResponsePayload
 */
export declare type ConfirmTargetResponsePayload = Message<"websocket.payload.playing.ConfirmTargetResponsePayload"> & {
  /**
   * 対象となるカード
   *
   * @generated from field: int32 position = 1;
   */
  position: number;

  /**
   * ターゲットとなるカード
   *
   * @generated from field: repeated int32 target_positions = 2;
   */
  targetPositions: number[];
};

/**
 * Describes the message websocket.payload.playing.ConfirmTargetResponsePayload.
 * Use `create(ConfirmTargetResponsePayloadSchema)` to create a new message.
 */
export declare const ConfirmTargetResponsePayloadSchema: GenMessage<ConfirmTargetResponsePayload>;

/**
 * @generated from message websocket.payload.playing.ConfirmTargetRequestPayload
 */
export declare type ConfirmTargetRequestPayload = Message<"websocket.payload.playing.ConfirmTargetRequestPayload"> & {
  /**
   * 対象となるカード
   *
   * @generated from field: int32 position = 1;
   */
  position: number;

  /**
   * 必要なターゲット数
   *
   * @generated from field: int32 count = 2;
   */
  count: number;
};

/**
 * Describes the message websocket.payload.playing.ConfirmTargetRequestPayload.
 * Use `create(ConfirmTargetRequestPayloadSchema)` to create a new message.
 */
export declare const ConfirmTargetRequestPayloadSchema: GenMessage<ConfirmTargetRequestPayload>;

/**
 * @generated from message websocket.payload.playing.NextEnergyPayload
 */
export declare type NextEnergyPayload = Message<"websocket.payload.playing.NextEnergyPayload"> & {
  /**
   * 次のエネルギー
   *
   * @generated from field: messages.common.Element energy = 1;
   */
  energy: Element;
};

/**
 * Describes the message websocket.payload.playing.NextEnergyPayload.
 * Use `create(NextEnergyPayloadSchema)` to create a new message.
 */
export declare const NextEnergyPayloadSchema: GenMessage<NextEnergyPayload>;

/**
 * @generated from message websocket.payload.playing.DrawEffectPayloadToRecipient
 */
export declare type DrawEffectPayloadToRecipient = Message<"websocket.payload.playing.DrawEffectPayloadToRecipient"> & {
  /**
   * @generated from field: repeated messages.effect.Effect effects = 1;
   */
  effects: Effect[];
};

/**
 * Describes the message websocket.payload.playing.DrawEffectPayloadToRecipient.
 * Use `create(DrawEffectPayloadToRecipientSchema)` to create a new message.
 */
export declare const DrawEffectPayloadToRecipientSchema: GenMessage<DrawEffectPayloadToRecipient>;

/**
 * @generated from message websocket.payload.playing.DrawEffectPayloadToActor
 */
export declare type DrawEffectPayloadToActor = Message<"websocket.payload.playing.DrawEffectPayloadToActor"> & {
  /**
   * @generated from field: repeated messages.effect.EffectWithSecret effects = 1;
   */
  effects: EffectWithSecret[];
};

/**
 * Describes the message websocket.payload.playing.DrawEffectPayloadToActor.
 * Use `create(DrawEffectPayloadToActorSchema)` to create a new message.
 */
export declare const DrawEffectPayloadToActorSchema: GenMessage<DrawEffectPayloadToActor>;

/**
 * @generated from message websocket.payload.playing.SelectBattlePositionPayload
 */
export declare type SelectBattlePositionPayload = Message<"websocket.payload.playing.SelectBattlePositionPayload"> & {
  /**
   * @generated from field: int32 position = 1;
   */
  position: number;
};

/**
 * Describes the message websocket.payload.playing.SelectBattlePositionPayload.
 * Use `create(SelectBattlePositionPayloadSchema)` to create a new message.
 */
export declare const SelectBattlePositionPayloadSchema: GenMessage<SelectBattlePositionPayload>;

/**
 * @generated from enum websocket.payload.playing.ActionType
 */
export enum ActionType {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: ATTACK_MONSTER = 1;
   */
  ATTACK_MONSTER = 1,

  /**
   * @generated from enum value: SUMMON_MONSTER = 2;
   */
  SUMMON_MONSTER = 2,

  /**
   * @generated from enum value: EVOLUTION_MONSTER = 3;
   */
  EVOLUTION_MONSTER = 3,

  /**
   * @generated from enum value: TAKE_SUPPORT = 4;
   */
  TAKE_SUPPORT = 4,

  /**
   * @generated from enum value: TAKE_GOODS = 5;
   */
  TAKE_GOODS = 5,

  /**
   * @generated from enum value: RETREAT = 6;
   */
  RETREAT = 6,

  /**
   * @generated from enum value: SUPPLY_ENERGY = 7;
   */
  SUPPLY_ENERGY = 7,

  /**
   * @generated from enum value: SURRENDER = 8;
   */
  SURRENDER = 8,

  /**
   * @generated from enum value: ABILITY = 9;
   */
  ABILITY = 9,

  /**
   * @generated from enum value: DRAW = 10;
   */
  DRAW = 10,
}

/**
 * Describes the enum websocket.payload.playing.ActionType.
 */
export declare const ActionTypeSchema: GenEnum<ActionType>;

