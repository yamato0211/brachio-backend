// @generated by protoc-gen-es v2.0.0
// @generated from file websocket/event/playing.proto (package websocket.event.playing, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { AbilityPayload, AttackMonsterPayload, CoinTossEmptyPayload, CoinTossPayload, ConfirmActionPayload, ConfirmEnergyRequestPayload, ConfirmEnergyResponsePayload, ConfirmTargetRequestPayload, ConfirmTargetResponsePayload, DrawCardIndividualPayload, DrawCardPayload, DrawEffectPayloadToActor, DrawEffectPayloadToRecipient, EvolutionMonsterPayload, InitialPlacementCompletePayload, NextEnergyPayload, RetreatPayload, SelectBattlePositionPayload, StartGamePayload, SummonMonsterPayload, SupplyEnergyPayload, SurrenderPayload, TakeGoodsPayload, TakeSupportPayload, TurnEndPayload, TurnStartPayload } from "../payload/playing_pb";

/**
 * Describes the file websocket/event/playing.proto.
 */
export declare const file_websocket_event_playing: GenFile;

/**
 * //
 * ラムモン攻撃イベント
 * //
 *
 * @generated from message websocket.event.playing.AttackMonsterEventToServer
 */
export declare type AttackMonsterEventToServer = Message<"websocket.event.playing.AttackMonsterEventToServer"> & {
  /**
   * @generated from field: websocket.payload.playing.AttackMonsterPayload payload = 1;
   */
  payload?: AttackMonsterPayload;
};

/**
 * Describes the message websocket.event.playing.AttackMonsterEventToServer.
 * Use `create(AttackMonsterEventToServerSchema)` to create a new message.
 */
export declare const AttackMonsterEventToServerSchema: GenMessage<AttackMonsterEventToServer>;

/**
 * TODO:一旦保留
 *
 * @generated from message websocket.event.playing.AttackMonsterEventToActor
 */
export declare type AttackMonsterEventToActor = Message<"websocket.event.playing.AttackMonsterEventToActor"> & {
  /**
   * @generated from field: websocket.payload.playing.AttackMonsterPayload payload = 1;
   */
  payload?: AttackMonsterPayload;

  /**
   * 攻撃者のユーザーID
   *
   * @generated from field: string userId = 2;
   */
  userId: string;
};

/**
 * Describes the message websocket.event.playing.AttackMonsterEventToActor.
 * Use `create(AttackMonsterEventToActorSchema)` to create a new message.
 */
export declare const AttackMonsterEventToActorSchema: GenMessage<AttackMonsterEventToActor>;

/**
 * @generated from message websocket.event.playing.AttackMonsterEventToRecipient
 */
export declare type AttackMonsterEventToRecipient = Message<"websocket.event.playing.AttackMonsterEventToRecipient"> & {
  /**
   * @generated from field: websocket.payload.playing.AttackMonsterPayload payload = 1;
   */
  payload?: AttackMonsterPayload;

  /**
   * 攻撃者のユーザーID
   *
   * @generated from field: string userId = 2;
   */
  userId: string;
};

/**
 * Describes the message websocket.event.playing.AttackMonsterEventToRecipient.
 * Use `create(AttackMonsterEventToRecipientSchema)` to create a new message.
 */
export declare const AttackMonsterEventToRecipientSchema: GenMessage<AttackMonsterEventToRecipient>;

/**
 * //
 * ラムモン召喚イベント
 * //
 *
 * @generated from message websocket.event.playing.SummonMonsterEventToServer
 */
export declare type SummonMonsterEventToServer = Message<"websocket.event.playing.SummonMonsterEventToServer"> & {
  /**
   * @generated from field: websocket.payload.playing.SummonMonsterPayload payload = 1;
   */
  payload?: SummonMonsterPayload;
};

/**
 * Describes the message websocket.event.playing.SummonMonsterEventToServer.
 * Use `create(SummonMonsterEventToServerSchema)` to create a new message.
 */
export declare const SummonMonsterEventToServerSchema: GenMessage<SummonMonsterEventToServer>;

/**
 * @generated from message websocket.event.playing.SummonMonsterEventToActor
 */
export declare type SummonMonsterEventToActor = Message<"websocket.event.playing.SummonMonsterEventToActor"> & {
  /**
   * @generated from field: websocket.payload.playing.SummonMonsterPayload payload = 1;
   */
  payload?: SummonMonsterPayload;

  /**
   * 召喚するユーザーのID
   *
   * @generated from field: string userId = 2;
   */
  userId: string;
};

/**
 * Describes the message websocket.event.playing.SummonMonsterEventToActor.
 * Use `create(SummonMonsterEventToActorSchema)` to create a new message.
 */
export declare const SummonMonsterEventToActorSchema: GenMessage<SummonMonsterEventToActor>;

/**
 * @generated from message websocket.event.playing.SummonMonsterEventToRecipient
 */
export declare type SummonMonsterEventToRecipient = Message<"websocket.event.playing.SummonMonsterEventToRecipient"> & {
  /**
   * @generated from field: websocket.payload.playing.SummonMonsterPayload payload = 1;
   */
  payload?: SummonMonsterPayload;

  /**
   * 召喚するユーザーのID
   *
   * @generated from field: string userId = 2;
   */
  userId: string;
};

/**
 * Describes the message websocket.event.playing.SummonMonsterEventToRecipient.
 * Use `create(SummonMonsterEventToRecipientSchema)` to create a new message.
 */
export declare const SummonMonsterEventToRecipientSchema: GenMessage<SummonMonsterEventToRecipient>;

/**
 * //
 * ラムモン進化イベント
 * //
 *
 * @generated from message websocket.event.playing.EvolutionMonsterEventToServer
 */
export declare type EvolutionMonsterEventToServer = Message<"websocket.event.playing.EvolutionMonsterEventToServer"> & {
  /**
   * @generated from field: websocket.payload.playing.EvolutionMonsterPayload payload = 1;
   */
  payload?: EvolutionMonsterPayload;
};

/**
 * Describes the message websocket.event.playing.EvolutionMonsterEventToServer.
 * Use `create(EvolutionMonsterEventToServerSchema)` to create a new message.
 */
export declare const EvolutionMonsterEventToServerSchema: GenMessage<EvolutionMonsterEventToServer>;

/**
 * @generated from message websocket.event.playing.EvolutionMonsterEventToActor
 */
export declare type EvolutionMonsterEventToActor = Message<"websocket.event.playing.EvolutionMonsterEventToActor"> & {
  /**
   * @generated from field: websocket.payload.playing.EvolutionMonsterPayload payload = 1;
   */
  payload?: EvolutionMonsterPayload;

  /**
   * 進化するユーザーのID
   *
   * @generated from field: string userId = 2;
   */
  userId: string;
};

/**
 * Describes the message websocket.event.playing.EvolutionMonsterEventToActor.
 * Use `create(EvolutionMonsterEventToActorSchema)` to create a new message.
 */
export declare const EvolutionMonsterEventToActorSchema: GenMessage<EvolutionMonsterEventToActor>;

/**
 * @generated from message websocket.event.playing.EvolutionMonsterEventToRecipient
 */
export declare type EvolutionMonsterEventToRecipient = Message<"websocket.event.playing.EvolutionMonsterEventToRecipient"> & {
  /**
   * @generated from field: websocket.payload.playing.EvolutionMonsterPayload payload = 1;
   */
  payload?: EvolutionMonsterPayload;

  /**
   * 進化するユーザーのID
   *
   * @generated from field: string userId = 2;
   */
  userId: string;
};

/**
 * Describes the message websocket.event.playing.EvolutionMonsterEventToRecipient.
 * Use `create(EvolutionMonsterEventToRecipientSchema)` to create a new message.
 */
export declare const EvolutionMonsterEventToRecipientSchema: GenMessage<EvolutionMonsterEventToRecipient>;

/**
 * //
 * サポートカード使用イベント
 * //
 *
 * @generated from message websocket.event.playing.TakeSupportEventToServer
 */
export declare type TakeSupportEventToServer = Message<"websocket.event.playing.TakeSupportEventToServer"> & {
  /**
   * @generated from field: websocket.payload.playing.TakeSupportPayload payload = 1;
   */
  payload?: TakeSupportPayload;
};

/**
 * Describes the message websocket.event.playing.TakeSupportEventToServer.
 * Use `create(TakeSupportEventToServerSchema)` to create a new message.
 */
export declare const TakeSupportEventToServerSchema: GenMessage<TakeSupportEventToServer>;

/**
 * @generated from message websocket.event.playing.TakeSupportEventToActor
 */
export declare type TakeSupportEventToActor = Message<"websocket.event.playing.TakeSupportEventToActor"> & {
  /**
   * @generated from field: websocket.payload.playing.TakeSupportPayload payload = 1;
   */
  payload?: TakeSupportPayload;

  /**
   * サポートするユーザーのID
   *
   * @generated from field: string userId = 2;
   */
  userId: string;
};

/**
 * Describes the message websocket.event.playing.TakeSupportEventToActor.
 * Use `create(TakeSupportEventToActorSchema)` to create a new message.
 */
export declare const TakeSupportEventToActorSchema: GenMessage<TakeSupportEventToActor>;

/**
 * @generated from message websocket.event.playing.TakeSupportEventToRecipient
 */
export declare type TakeSupportEventToRecipient = Message<"websocket.event.playing.TakeSupportEventToRecipient"> & {
  /**
   * @generated from field: websocket.payload.playing.TakeSupportPayload payload = 1;
   */
  payload?: TakeSupportPayload;

  /**
   * サポートするユーザーのID
   *
   * @generated from field: string userId = 2;
   */
  userId: string;
};

/**
 * Describes the message websocket.event.playing.TakeSupportEventToRecipient.
 * Use `create(TakeSupportEventToRecipientSchema)` to create a new message.
 */
export declare const TakeSupportEventToRecipientSchema: GenMessage<TakeSupportEventToRecipient>;

/**
 * //
 * グッズカード使用イベント
 * //
 *
 * @generated from message websocket.event.playing.TakeGoodsEventToServer
 */
export declare type TakeGoodsEventToServer = Message<"websocket.event.playing.TakeGoodsEventToServer"> & {
  /**
   * @generated from field: websocket.payload.playing.TakeGoodsPayload payload = 1;
   */
  payload?: TakeGoodsPayload;
};

/**
 * Describes the message websocket.event.playing.TakeGoodsEventToServer.
 * Use `create(TakeGoodsEventToServerSchema)` to create a new message.
 */
export declare const TakeGoodsEventToServerSchema: GenMessage<TakeGoodsEventToServer>;

/**
 * @generated from message websocket.event.playing.TakeGoodsEventToActor
 */
export declare type TakeGoodsEventToActor = Message<"websocket.event.playing.TakeGoodsEventToActor"> & {
  /**
   * @generated from field: websocket.payload.playing.TakeGoodsPayload payload = 1;
   */
  payload?: TakeGoodsPayload;

  /**
   * アイテムを取得するユーザーのID
   *
   * @generated from field: string userId = 2;
   */
  userId: string;
};

/**
 * Describes the message websocket.event.playing.TakeGoodsEventToActor.
 * Use `create(TakeGoodsEventToActorSchema)` to create a new message.
 */
export declare const TakeGoodsEventToActorSchema: GenMessage<TakeGoodsEventToActor>;

/**
 * @generated from message websocket.event.playing.TakeGoodsEventToRecipient
 */
export declare type TakeGoodsEventToRecipient = Message<"websocket.event.playing.TakeGoodsEventToRecipient"> & {
  /**
   * @generated from field: websocket.payload.playing.TakeGoodsPayload payload = 1;
   */
  payload?: TakeGoodsPayload;

  /**
   * アイテムを取得するユーザーのID
   *
   * @generated from field: string userId = 2;
   */
  userId: string;
};

/**
 * Describes the message websocket.event.playing.TakeGoodsEventToRecipient.
 * Use `create(TakeGoodsEventToRecipientSchema)` to create a new message.
 */
export declare const TakeGoodsEventToRecipientSchema: GenMessage<TakeGoodsEventToRecipient>;

/**
 * //
 * 逃げるイベント
 * //
 *
 * @generated from message websocket.event.playing.RetreatEventToServer
 */
export declare type RetreatEventToServer = Message<"websocket.event.playing.RetreatEventToServer"> & {
  /**
   * @generated from field: websocket.payload.playing.RetreatPayload payload = 1;
   */
  payload?: RetreatPayload;
};

/**
 * Describes the message websocket.event.playing.RetreatEventToServer.
 * Use `create(RetreatEventToServerSchema)` to create a new message.
 */
export declare const RetreatEventToServerSchema: GenMessage<RetreatEventToServer>;

/**
 * @generated from message websocket.event.playing.RetreatEventToActor
 */
export declare type RetreatEventToActor = Message<"websocket.event.playing.RetreatEventToActor"> & {
  /**
   * @generated from field: websocket.payload.playing.RetreatPayload payload = 1;
   */
  payload?: RetreatPayload;

  /**
   * 逃げるユーザーのID
   *
   * @generated from field: string userId = 2;
   */
  userId: string;
};

/**
 * Describes the message websocket.event.playing.RetreatEventToActor.
 * Use `create(RetreatEventToActorSchema)` to create a new message.
 */
export declare const RetreatEventToActorSchema: GenMessage<RetreatEventToActor>;

/**
 * @generated from message websocket.event.playing.RetreatEventToRecipient
 */
export declare type RetreatEventToRecipient = Message<"websocket.event.playing.RetreatEventToRecipient"> & {
  /**
   * @generated from field: websocket.payload.playing.RetreatPayload payload = 1;
   */
  payload?: RetreatPayload;

  /**
   * 逃げるユーザーのID
   *
   * @generated from field: string userId = 2;
   */
  userId: string;
};

/**
 * Describes the message websocket.event.playing.RetreatEventToRecipient.
 * Use `create(RetreatEventToRecipientSchema)` to create a new message.
 */
export declare const RetreatEventToRecipientSchema: GenMessage<RetreatEventToRecipient>;

/**
 * //
 * エネルギー付与イベント
 * //
 *
 * @generated from message websocket.event.playing.SupplyEnergyEventToServer
 */
export declare type SupplyEnergyEventToServer = Message<"websocket.event.playing.SupplyEnergyEventToServer"> & {
  /**
   * @generated from field: websocket.payload.playing.SupplyEnergyPayload payload = 1;
   */
  payload?: SupplyEnergyPayload;
};

/**
 * Describes the message websocket.event.playing.SupplyEnergyEventToServer.
 * Use `create(SupplyEnergyEventToServerSchema)` to create a new message.
 */
export declare const SupplyEnergyEventToServerSchema: GenMessage<SupplyEnergyEventToServer>;

/**
 * @generated from message websocket.event.playing.SupplyEnergyEventToActor
 */
export declare type SupplyEnergyEventToActor = Message<"websocket.event.playing.SupplyEnergyEventToActor"> & {
  /**
   * @generated from field: websocket.payload.playing.SupplyEnergyPayload payload = 1;
   */
  payload?: SupplyEnergyPayload;

  /**
   * エネルギーを供給するユーザーのID
   *
   * @generated from field: string userId = 2;
   */
  userId: string;
};

/**
 * Describes the message websocket.event.playing.SupplyEnergyEventToActor.
 * Use `create(SupplyEnergyEventToActorSchema)` to create a new message.
 */
export declare const SupplyEnergyEventToActorSchema: GenMessage<SupplyEnergyEventToActor>;

/**
 * @generated from message websocket.event.playing.SupplyEnergyEventToRecipient
 */
export declare type SupplyEnergyEventToRecipient = Message<"websocket.event.playing.SupplyEnergyEventToRecipient"> & {
  /**
   * @generated from field: websocket.payload.playing.SupplyEnergyPayload payload = 1;
   */
  payload?: SupplyEnergyPayload;

  /**
   * エネルギーを供給するユーザーのID
   *
   * @generated from field: string userId = 2;
   */
  userId: string;
};

/**
 * Describes the message websocket.event.playing.SupplyEnergyEventToRecipient.
 * Use `create(SupplyEnergyEventToRecipientSchema)` to create a new message.
 */
export declare const SupplyEnergyEventToRecipientSchema: GenMessage<SupplyEnergyEventToRecipient>;

/**
 * //
 * 降参イベント
 * //
 *
 * @generated from message websocket.event.playing.SurrenderEventToServer
 */
export declare type SurrenderEventToServer = Message<"websocket.event.playing.SurrenderEventToServer"> & {
  /**
   * @generated from field: websocket.payload.playing.SurrenderPayload payload = 1;
   */
  payload?: SurrenderPayload;
};

/**
 * Describes the message websocket.event.playing.SurrenderEventToServer.
 * Use `create(SurrenderEventToServerSchema)` to create a new message.
 */
export declare const SurrenderEventToServerSchema: GenMessage<SurrenderEventToServer>;

/**
 * @generated from message websocket.event.playing.SurrenderEventToActor
 */
export declare type SurrenderEventToActor = Message<"websocket.event.playing.SurrenderEventToActor"> & {
  /**
   * @generated from field: websocket.payload.playing.SurrenderPayload payload = 1;
   */
  payload?: SurrenderPayload;

  /**
   * 降参するユーザーのID
   *
   * @generated from field: string userId = 2;
   */
  userId: string;
};

/**
 * Describes the message websocket.event.playing.SurrenderEventToActor.
 * Use `create(SurrenderEventToActorSchema)` to create a new message.
 */
export declare const SurrenderEventToActorSchema: GenMessage<SurrenderEventToActor>;

/**
 * @generated from message websocket.event.playing.SurrenderEventToRecipient
 */
export declare type SurrenderEventToRecipient = Message<"websocket.event.playing.SurrenderEventToRecipient"> & {
  /**
   * @generated from field: websocket.payload.playing.SurrenderPayload payload = 1;
   */
  payload?: SurrenderPayload;

  /**
   * 降参するユーザーのID
   *
   * @generated from field: string userId = 2;
   */
  userId: string;
};

/**
 * Describes the message websocket.event.playing.SurrenderEventToRecipient.
 * Use `create(SurrenderEventToRecipientSchema)` to create a new message.
 */
export declare const SurrenderEventToRecipientSchema: GenMessage<SurrenderEventToRecipient>;

/**
 * //
 * ラムモン特性イベント
 * //
 *
 * @generated from message websocket.event.playing.AbilityEventToServer
 */
export declare type AbilityEventToServer = Message<"websocket.event.playing.AbilityEventToServer"> & {
  /**
   * @generated from field: websocket.payload.playing.AbilityPayload payload = 1;
   */
  payload?: AbilityPayload;
};

/**
 * Describes the message websocket.event.playing.AbilityEventToServer.
 * Use `create(AbilityEventToServerSchema)` to create a new message.
 */
export declare const AbilityEventToServerSchema: GenMessage<AbilityEventToServer>;

/**
 * @generated from message websocket.event.playing.AbilityEventToActor
 */
export declare type AbilityEventToActor = Message<"websocket.event.playing.AbilityEventToActor"> & {
  /**
   * @generated from field: websocket.payload.playing.AbilityPayload payload = 1;
   */
  payload?: AbilityPayload;

  /**
   * 特性を発動するユーザーのID
   *
   * @generated from field: string userId = 2;
   */
  userId: string;
};

/**
 * Describes the message websocket.event.playing.AbilityEventToActor.
 * Use `create(AbilityEventToActorSchema)` to create a new message.
 */
export declare const AbilityEventToActorSchema: GenMessage<AbilityEventToActor>;

/**
 * @generated from message websocket.event.playing.AbilityEventToRecipient
 */
export declare type AbilityEventToRecipient = Message<"websocket.event.playing.AbilityEventToRecipient"> & {
  /**
   * @generated from field: websocket.payload.playing.AbilityPayload payload = 1;
   */
  payload?: AbilityPayload;

  /**
   * 特性を発動するユーザーのID
   *
   * @generated from field: string userId = 2;
   */
  userId: string;
};

/**
 * Describes the message websocket.event.playing.AbilityEventToRecipient.
 * Use `create(AbilityEventToRecipientSchema)` to create a new message.
 */
export declare const AbilityEventToRecipientSchema: GenMessage<AbilityEventToRecipient>;

/**
 * //
 * ドローイベント
 * //
 *
 * @generated from message websocket.event.playing.DrawEventToServer
 */
export declare type DrawEventToServer = Message<"websocket.event.playing.DrawEventToServer"> & {
  /**
   * @generated from field: websocket.payload.playing.DrawCardPayload payload = 1;
   */
  payload?: DrawCardPayload;
};

/**
 * Describes the message websocket.event.playing.DrawEventToServer.
 * Use `create(DrawEventToServerSchema)` to create a new message.
 */
export declare const DrawEventToServerSchema: GenMessage<DrawEventToServer>;

/**
 * @generated from message websocket.event.playing.DrawEventToActor
 */
export declare type DrawEventToActor = Message<"websocket.event.playing.DrawEventToActor"> & {
  /**
   * @generated from field: websocket.payload.playing.DrawCardIndividualPayload payload = 1;
   */
  payload?: DrawCardIndividualPayload;

  /**
   * ドローするユーザーのID
   *
   * @generated from field: string userId = 2;
   */
  userId: string;
};

/**
 * Describes the message websocket.event.playing.DrawEventToActor.
 * Use `create(DrawEventToActorSchema)` to create a new message.
 */
export declare const DrawEventToActorSchema: GenMessage<DrawEventToActor>;

/**
 * @generated from message websocket.event.playing.DrawEventToRecipient
 */
export declare type DrawEventToRecipient = Message<"websocket.event.playing.DrawEventToRecipient"> & {
  /**
   * @generated from field: websocket.payload.playing.DrawCardPayload payload = 1;
   */
  payload?: DrawCardPayload;

  /**
   * ドローするユーザーのID
   *
   * @generated from field: string userId = 2;
   */
  userId: string;
};

/**
 * Describes the message websocket.event.playing.DrawEventToRecipient.
 * Use `create(DrawEventToRecipientSchema)` to create a new message.
 */
export declare const DrawEventToRecipientSchema: GenMessage<DrawEventToRecipient>;

/**
 * //
 * 実行可能な行動確認イベント
 * //
 *
 * @generated from message websocket.event.playing.ConfirmActionEventToActor
 */
export declare type ConfirmActionEventToActor = Message<"websocket.event.playing.ConfirmActionEventToActor"> & {
  /**
   * @generated from field: websocket.payload.playing.ConfirmActionPayload payload = 1;
   */
  payload?: ConfirmActionPayload;
};

/**
 * Describes the message websocket.event.playing.ConfirmActionEventToActor.
 * Use `create(ConfirmActionEventToActorSchema)` to create a new message.
 */
export declare const ConfirmActionEventToActorSchema: GenMessage<ConfirmActionEventToActor>;

/**
 * //
 * 初期ラムポケ配置完了イベント
 * //
 *
 * @generated from message websocket.event.playing.InitialPlacementCompleteEventToServer
 */
export declare type InitialPlacementCompleteEventToServer = Message<"websocket.event.playing.InitialPlacementCompleteEventToServer"> & {
  /**
   * @generated from field: websocket.payload.playing.InitialPlacementCompletePayload payload = 1;
   */
  payload?: InitialPlacementCompletePayload;
};

/**
 * Describes the message websocket.event.playing.InitialPlacementCompleteEventToServer.
 * Use `create(InitialPlacementCompleteEventToServerSchema)` to create a new message.
 */
export declare const InitialPlacementCompleteEventToServerSchema: GenMessage<InitialPlacementCompleteEventToServer>;

/**
 * //
 * ゲーム開始通知イベント
 * //
 *
 * @generated from message websocket.event.playing.StartGameEventToClients
 */
export declare type StartGameEventToClients = Message<"websocket.event.playing.StartGameEventToClients"> & {
  /**
   * @generated from field: websocket.payload.playing.StartGamePayload payload = 1;
   */
  payload?: StartGamePayload;
};

/**
 * Describes the message websocket.event.playing.StartGameEventToClients.
 * Use `create(StartGameEventToClientsSchema)` to create a new message.
 */
export declare const StartGameEventToClientsSchema: GenMessage<StartGameEventToClients>;

/**
 * //
 * ターン開始時イベント検知イベント
 * //
 *
 * @generated from message websocket.event.playing.TurnStartEventToClients
 */
export declare type TurnStartEventToClients = Message<"websocket.event.playing.TurnStartEventToClients"> & {
  /**
   * @generated from field: websocket.payload.playing.TurnStartPayload payload = 1;
   */
  payload?: TurnStartPayload;
};

/**
 * Describes the message websocket.event.playing.TurnStartEventToClients.
 * Use `create(TurnStartEventToClientsSchema)` to create a new message.
 */
export declare const TurnStartEventToClientsSchema: GenMessage<TurnStartEventToClients>;

/**
 * //
 * ターン終了時イベント検知イベント
 * //
 *
 * @generated from message websocket.event.playing.TurnEndEventToClients
 */
export declare type TurnEndEventToClients = Message<"websocket.event.playing.TurnEndEventToClients"> & {
  /**
   * @generated from field: websocket.payload.playing.TurnEndPayload payload = 1;
   */
  payload?: TurnEndPayload;
};

/**
 * Describes the message websocket.event.playing.TurnEndEventToClients.
 * Use `create(TurnEndEventToClientsSchema)` to create a new message.
 */
export declare const TurnEndEventToClientsSchema: GenMessage<TurnEndEventToClients>;

/**
 * //
 * コイントスイベント
 * //
 *
 * @generated from message websocket.event.playing.CoinTossEventToServer
 */
export declare type CoinTossEventToServer = Message<"websocket.event.playing.CoinTossEventToServer"> & {
  /**
   * @generated from field: websocket.payload.playing.CoinTossEmptyPayload payload = 1;
   */
  payload?: CoinTossEmptyPayload;
};

/**
 * Describes the message websocket.event.playing.CoinTossEventToServer.
 * Use `create(CoinTossEventToServerSchema)` to create a new message.
 */
export declare const CoinTossEventToServerSchema: GenMessage<CoinTossEventToServer>;

/**
 * @generated from message websocket.event.playing.CoinTossEventToActor
 */
export declare type CoinTossEventToActor = Message<"websocket.event.playing.CoinTossEventToActor"> & {
  /**
   * @generated from field: websocket.payload.playing.CoinTossPayload payload = 1;
   */
  payload?: CoinTossPayload;
};

/**
 * Describes the message websocket.event.playing.CoinTossEventToActor.
 * Use `create(CoinTossEventToActorSchema)` to create a new message.
 */
export declare const CoinTossEventToActorSchema: GenMessage<CoinTossEventToActor>;

/**
 * //
 * コイントス結果通知イベント
 * //
 *
 * @generated from message websocket.event.playing.CoinTossResultEventToRecipient
 */
export declare type CoinTossResultEventToRecipient = Message<"websocket.event.playing.CoinTossResultEventToRecipient"> & {
  /**
   * @generated from field: websocket.payload.playing.CoinTossPayload payload = 1;
   */
  payload?: CoinTossPayload;
};

/**
 * Describes the message websocket.event.playing.CoinTossResultEventToRecipient.
 * Use `create(CoinTossResultEventToRecipientSchema)` to create a new message.
 */
export declare const CoinTossResultEventToRecipientSchema: GenMessage<CoinTossResultEventToRecipient>;

/**
 * //
 * ワザを打つために必要なエネルギー確認イベント
 * //
 *
 * @generated from message websocket.event.playing.ConfirmEnergyEventToServer
 */
export declare type ConfirmEnergyEventToServer = Message<"websocket.event.playing.ConfirmEnergyEventToServer"> & {
  /**
   * @generated from field: websocket.payload.playing.ConfirmEnergyResponsePayload payload = 1;
   */
  payload?: ConfirmEnergyResponsePayload;
};

/**
 * Describes the message websocket.event.playing.ConfirmEnergyEventToServer.
 * Use `create(ConfirmEnergyEventToServerSchema)` to create a new message.
 */
export declare const ConfirmEnergyEventToServerSchema: GenMessage<ConfirmEnergyEventToServer>;

/**
 * @generated from message websocket.event.playing.ConfirmEnergyEventToActor
 */
export declare type ConfirmEnergyEventToActor = Message<"websocket.event.playing.ConfirmEnergyEventToActor"> & {
  /**
   * @generated from field: websocket.payload.playing.ConfirmEnergyRequestPayload payload = 1;
   */
  payload?: ConfirmEnergyRequestPayload;
};

/**
 * Describes the message websocket.event.playing.ConfirmEnergyEventToActor.
 * Use `create(ConfirmEnergyEventToActorSchema)` to create a new message.
 */
export declare const ConfirmEnergyEventToActorSchema: GenMessage<ConfirmEnergyEventToActor>;

/**
 * //
 * ワザを打つために必要なターゲット指定イベント
 * //
 *
 * @generated from message websocket.event.playing.ConfirmTargetEventToServer
 */
export declare type ConfirmTargetEventToServer = Message<"websocket.event.playing.ConfirmTargetEventToServer"> & {
  /**
   * @generated from field: websocket.payload.playing.ConfirmTargetResponsePayload payload = 1;
   */
  payload?: ConfirmTargetResponsePayload;
};

/**
 * Describes the message websocket.event.playing.ConfirmTargetEventToServer.
 * Use `create(ConfirmTargetEventToServerSchema)` to create a new message.
 */
export declare const ConfirmTargetEventToServerSchema: GenMessage<ConfirmTargetEventToServer>;

/**
 * @generated from message websocket.event.playing.ConfirmTargetEventToActor
 */
export declare type ConfirmTargetEventToActor = Message<"websocket.event.playing.ConfirmTargetEventToActor"> & {
  /**
   * @generated from field: websocket.payload.playing.ConfirmTargetRequestPayload payload = 1;
   */
  payload?: ConfirmTargetRequestPayload;
};

/**
 * Describes the message websocket.event.playing.ConfirmTargetEventToActor.
 * Use `create(ConfirmTargetEventToActorSchema)` to create a new message.
 */
export declare const ConfirmTargetEventToActorSchema: GenMessage<ConfirmTargetEventToActor>;

/**
 * //
 * 次のエネルギーの取得イベント
 * //
 *
 * @generated from message websocket.event.playing.NextEnergyEventToActor
 */
export declare type NextEnergyEventToActor = Message<"websocket.event.playing.NextEnergyEventToActor"> & {
  /**
   * @generated from field: websocket.payload.playing.NextEnergyPayload payload = 1;
   */
  payload?: NextEnergyPayload;
};

/**
 * Describes the message websocket.event.playing.NextEnergyEventToActor.
 * Use `create(NextEnergyEventToActorSchema)` to create a new message.
 */
export declare const NextEnergyEventToActorSchema: GenMessage<NextEnergyEventToActor>;

/**
 * //
 * 描画する必要のあるイベント通知イベント
 * //
 *
 * @generated from message websocket.event.playing.DrawEffectEventToActor
 */
export declare type DrawEffectEventToActor = Message<"websocket.event.playing.DrawEffectEventToActor"> & {
  /**
   * @generated from field: websocket.payload.playing.DrawEffectPayloadToActor payload = 1;
   */
  payload?: DrawEffectPayloadToActor;
};

/**
 * Describes the message websocket.event.playing.DrawEffectEventToActor.
 * Use `create(DrawEffectEventToActorSchema)` to create a new message.
 */
export declare const DrawEffectEventToActorSchema: GenMessage<DrawEffectEventToActor>;

/**
 * @generated from message websocket.event.playing.DrawEffectEventToRecipient
 */
export declare type DrawEffectEventToRecipient = Message<"websocket.event.playing.DrawEffectEventToRecipient"> & {
  /**
   * @generated from field: websocket.payload.playing.DrawEffectPayloadToRecipient payload = 1;
   */
  payload?: DrawEffectPayloadToRecipient;
};

/**
 * Describes the message websocket.event.playing.DrawEffectEventToRecipient.
 * Use `create(DrawEffectEventToRecipientSchema)` to create a new message.
 */
export declare const DrawEffectEventToRecipientSchema: GenMessage<DrawEffectEventToRecipient>;

/**
 * //
 * バトル場が空いた時にバトル場に置くカードを選択するイベント(クライアントへの通知はDrawEffectEventを用いる)
 * //
 *
 * @generated from message websocket.event.playing.SelectBattlePositionEventToServer
 */
export declare type SelectBattlePositionEventToServer = Message<"websocket.event.playing.SelectBattlePositionEventToServer"> & {
  /**
   * @generated from field: websocket.payload.playing.SelectBattlePositionPayload payload = 1;
   */
  payload?: SelectBattlePositionPayload;
};

/**
 * Describes the message websocket.event.playing.SelectBattlePositionEventToServer.
 * Use `create(SelectBattlePositionEventToServerSchema)` to create a new message.
 */
export declare const SelectBattlePositionEventToServerSchema: GenMessage<SelectBattlePositionEventToServer>;

